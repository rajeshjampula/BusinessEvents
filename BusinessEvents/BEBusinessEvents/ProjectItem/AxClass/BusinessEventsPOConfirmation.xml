<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessEventsPOConfirmation</Name>
	<SourceCode>
		<Declaration><![CDATA[
// ToDo: Add attribute which can be shown in config form for Logic apps or other drop down
class BusinessEventsPOConfirmation extends BusinessEventsBase
{
    PurchFormLetterPurchOrderContract POConfirmationContract;    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BusinessEventsPOConfirmation construct(PurchFormLetterPurchOrderContract _contract)
    {
        BusinessEventsPOConfirmation bePOConfirmation = new BusinessEventsPOConfirmation();
        bePOConfirmation.POConfirmationContract = _contract;
        return bePOConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.GetBusinessEventConfig(classStr(BusinessEventsPOConfirmation));

        // Only run if in the specified company and business events are enabled or if Business Events are enabled but not company specific.
        // Ensure that we don't have BODMAS issue here. Conditions may need to be turned around.
        // ToDo: Remove company specific column, make company part of PK and adjust filter. Test.
        if((BEConfiguration && BEConfiguration.Enabled && BEConfiguration.CompanySpecific && BEConfiguration.company == curExt()) || 
          (BEConfiguration && BEConfiguration.Enabled && !BEConfiguration.CompanySpecific)) 
        {
            this.FetchPayload();            
            this.SendEvent(this.SerializePayload());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FetchPayload</Name>
				<Source><![CDATA[
    protected void FetchPayload()
    {
        super();
        VendPurchOrderJour vendPurchOrderJour;  
        PurchLineAllVersions purchLineAllVersions;                     
        PurchTable purchTable;           

        purchTable = POConfirmationContract.parmCallerTable();
        select vendPurchOrderJour where VendPurchOrderJour.PurchId == PurchTable.PurchId;

        // Header at the start of the list
        Payload.addStart(VendPurchOrderJour);    

        // ToDo: We need to handle those scenarios better in the generated JSON.                    
        Payload.addEnd(purchTable);

        while select purchLineAllVersions where purchLineAllVersions.PurchId == vendPurchOrderJour.PurchId
        {
            // Add all other records at the end.
            Payload.addEnd(PurchLineAllVersions);
        }        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>