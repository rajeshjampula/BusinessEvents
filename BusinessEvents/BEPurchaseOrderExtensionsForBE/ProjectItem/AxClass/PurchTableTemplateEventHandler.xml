<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableTemplateEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableTemplateEventHandler</c> class is used as the event handler for purchase order
/// workflow.
/// </summary>
/// <remarks>
/// This class implements the <c>WorkflowStartedEventHandler</c>, <c>WorkflowCanceledEventHandler</c>,
/// <c>WorkflowCompletedEventHandler</c> class interfaces and handles the updates that are required
/// when the different workflow event has ended.
/// </remarks>
class
    PurchTableTemplateEventHandler
implements
    WorkflowCompletedEventHandler,
    WorkflowCanceledEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the business logic when the workflow is canceled.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// If the change management value on the purchase order has been switched to no, the purchase orders
    /// are set to approved; otherwise, the user must submit the purchase again.
    /// </remarks>
    public void canceled(WorkflowEventArgs  _workflowEventArgs)
    {
        PurchTable  purchTable;
        WorkflowTrackingTable       lastWorkflowTrackingRecord;
        WorkflowTrackingStatusTable wfTrackingStatusTable;
        WorkflowContext             wfContext = _workflowEventArgs.parmWorkflowContext();

        ttsbegin;

        // Finds the last workflow tracking record for the workflow context.
        select firstonly lastWorkflowTrackingRecord order by lastWorkflowTrackingRecord.CreatedDateTime desc where
            ((lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::WorkItem &&
              lastWorkflowTrackingRecord.TrackingType    != WorkflowTrackingType::Creation) ||
            ((lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Submission ||
              lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::SubmitOnBehalf ||
              lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Cancellation ||
              lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Resume) &&
              lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Workflow) ||
             (lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Resubmission) ||
             (lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::LineItemWorkflow &&
              lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Creation))
        exists join wfTrackingStatusTable
            where wfTrackingStatusTable.RecId            == lastWorkflowTrackingRecord.WorkflowTrackingStatusTable &&
                  wfTrackingStatusTable.ContextRecId     == wfContext.parmRecId() &&
                  wfTrackingStatusTable.ContextTableId   == wfContext.parmTableId() &&
                  wfTrackingStatusTable.ContextCompanyId == wfContext.parmCompanyId();

        if ( lastWorkflowTrackingRecord
          && lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Workflow
          && lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Cancellation)
        {
            purchTable = PurchTable::findRecId(_workflowEventArgs.parmWorkflowContext().parmRecId(), true);
            if (purchTable.DocumentState != VersioningDocumentState::Draft)
            {
                VersioningPurchaseOrder::newPurchaseOrder(purchTable).cancelChangeRequest();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DocumentState</c> field on the <c>PurchTable</c> table to approved.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the workflow is completed. The
    /// <c>WorkflowState</c> field on the <c>PurchTable</c> table is set to the
    /// <c>TradeWorkflowState::Approved</c> enumeration value.
    /// </remarks>
    public void  completed(WorkflowEventArgs  _workflowEventArgs)
    {
        PurchTable purchTable;

        ttsbegin;

        purchTable = PurchTable::findRecId(_workflowEventArgs.parmWorkflowContext().parmRecId(), true);
        VersioningPurchaseOrder::newPurchaseOrder(purchTable).approveChangeRequest();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>