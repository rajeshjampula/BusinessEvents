<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchTable extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountClearing</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountClearing(VendPostingProfile _postingProfile_RU = '')
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && _postingProfile_RU)
        {
            return VendLedgerAccounts::clearingLedgerDimension(this.InvoiceAccount,
                                                               _postingProfile_RU);
        }
        // </GEERU>
        return VendLedgerAccounts::clearingLedgerDimension(this.InvoiceAccount,
                                                           this.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountVend</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountVend(VendPostingProfile _postingProfile_RU = '')
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && _postingProfile_RU)
        {
            return VendLedgerAccounts::summaryLedgerDimension(this.InvoiceAccount,
                                                               _postingProfile_RU);
        }
        // </GEERU>
        return VendLedgerAccounts::summaryLedgerDimension(this.InvoiceAccount,
                                                           this.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementDocumentTitle_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document title of the related agreement.
    /// </summary>
    /// <returns>
    ///     The agreement document title.
    /// </returns>
    public display AgreementDocumentTitle agreementDocumentTitle_RU()
    {
        return PurchAgreementHeader::find(this.MatchingAgreement).DocumentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementHeaderExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the record ID of the <c>AgreementHeaderExt_RU</c> that is attached to the current purchase order.
    /// </summary>
    /// <returns>
    ///     The agreement record ID.
    /// </returns>
    public AgreementHeaderExtRecId_RU agreementHeaderExt_RU()
    {
        PurchTable_RU   purchTable_RU;
        #isoCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = this.purchTable_RU();
        }

        return purchTable_RU.AgreementHeaderExt_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementIsLinked</Name>
				<Source><![CDATA[
    display public PurchAgreementIsLinked agreementIsLinked()
    {
        if (this.MatchingAgreement)
        {
            return NoYes::Yes;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAccountingDateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if it is allowed to change the accounting date.
    /// </summary>
    /// <returns>
    /// true if it is allowed to change the accounting date; otherwise false.
    /// </returns>
    public boolean allowAccountingDateChange()
    {
        boolean             ok = true;

        if (!SourceDocumentHeaderProvider::allowAccountingDateChange(this.SourceDocumentHeader))
        {
            ok = checkFailed("@SYS344799");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCurrencyChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>CurrencyCode</c> is enabled.
    /// </summary>
    /// <param name="_giveWarning">
    /// A Boolean value that specifies whether to notify the user who a currency change is not enabled.
    /// </param>
    /// <returns>
    /// false if there has been any invoicing activity, either posted or pending; otherwise, true.
    /// </returns>
    public boolean allowCurrencyChange(boolean _giveWarning = true)
    {
        boolean             ok = true;

        if (this.isInvoiced() || this.existInvoice() || this.isInvoiceMatched())
        {
            if (_giveWarning)
            {
                ok = checkFailed(strFmt("@SYS129442", this.PurchId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur2MST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>amountCur2MST</c> value for the current record in <c>PurchTable</c> table.
    /// </summary>
    /// <returns>
    /// The <c>amountCur2MST</c> value of the current record.
    /// </returns>

    display AmountMST amountCur2MST()
    {
        return CurrencyExchangeHelper::amountCur2MST(this.amountRemainingExclTax(), this.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDelivered</Name>
				<Source><![CDATA[
    display AmountCur  amountDelivered()
    {
        PurchLine       purchLine;
        AmountCur       amountCur = 0;

        while select purchLine
            index hint PurchLineIdx
            where purchLine.PurchId         == this.PurchId
              && !purchLine.IsDeleted
        {
            amountCur += purchLine.calcLineAmountExclTax(purchLine.PurchQty - purchLine.RemainPurchPhysical);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInvoiced</Name>
				<Source><![CDATA[
    display AmountCur amountInvoiced()
    {
        VendInvoiceJour vendInvoiceJour;

        select sum(InvoiceAmount) from vendInvoiceJour
                  where vendInvoiceJour.PurchId == this.PurchId;

        return vendInvoiceJour.InvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInvoicedExclTax</Name>
				<Source><![CDATA[
    display AmountCur  amountInvoicedExclTax()
    {
        PurchLine       purchLine;
        AmountCur       amountCur = 0;

        while select purchLine
            where purchLine.PurchId         == this.PurchId
               && !purchLine.IsDeleted
        {
            amountCur += purchLine.calcLineAmountExclTax(purchLine.PurchQty - purchLine.RemainPurchFinancial);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountOrderedNotInvoiced</Name>
				<Source><![CDATA[
    display AmountCur amountOrderedNotInvoiced()
    {
        PurchLine       purchLine;
        AmountCur       ordered;

        while select purchLine
            index PurchLineIdx
            where purchLine.PurchId         == this.PurchId
               && !purchLine.IsDeleted
        {
            ordered += purchLine.calcLineAmountExclTax(purchLine.RemainPurchPhysical+purchLine.RemainPurchFinancial);
        }

        return ordered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountOrderedNotInvoicedMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Purchase order balance converted into MST.
    /// </summary>
    /// <returns>
    ///     Returns the purchase order balance of not invoiced lines converted from the purchase orders currency into company currency.
    /// </returns>

    display AmountMST  amountOrderedNotInvoicedMST()
    {
        return CurrencyExchangeHelper::amountCur2MST(this.amountOrderedNotInvoiced(), this.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRemainingExclTax</Name>
				<Source><![CDATA[
    display AmountCur  amountRemainingExclTax()
    {
        PurchLine       purchLine;
        AmountCur       amountCur = 0;

        while select purchLine
            index hint PurchLineIdx
            where purchLine.PurchId         == this.PurchId
               && !purchLine.IsDeleted
        {
            amountCur += purchLine.calcLineAmountExclTax(purchLine.RemainPurchPhysical);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRemainingMST</Name>
				<Source><![CDATA[
    display AmountMST amountRemainingMST()
    {
        PurchLine       purchLine;
        AmountMST       amountMST = 0;
        AmountMST       lineAmountMSTExclTax, receivedInTotalPrice;

        while select purchLine
            index hint PurchLineIdx
            where purchLine.PurchId         == this.PurchId
               && !purchLine.IsDeleted
        {
            lineAmountMSTExclTax = purchLine.lineAmountMSTExclTax();
            receivedInTotalPrice = purchLine.receivedInTotalPrice();
            amountMST += (lineAmountMSTExclTax-receivedInTotalPrice);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateWithPurchAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates the purchase order with the specified agreement order.
    /// </summary>
    /// <param name="_purchAgreementHeader">
    /// The <c>PurchAgreementHeader</c> record with which to associate the purchase line.
    /// </param>
    void  associateWithPurchAgreement(PurchAgreementHeader _purchAgreementHeader)
    {
        this.type().associateWithAgreementHeader(_purchAgreementHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoApproveChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits and approves a change request for a purchase order.
    /// </summary>
    /// <param name="isPlanOrderRef">
    /// The boolean to identify whether the PO reference to a planned order; Parameter is obsolete and not used
    /// </param>
    public void autoApproveChangeRequest(boolean isPlanOrderRef = false)
    {
        VersioningPurchaseOrder versioningPurchaseOrder;

        if (this.ChangeRequestRequired)
        {
            versioningPurchaseOrder = VersioningPurchaseOrder::newPurchaseOrder(this);
            versioningPurchaseOrder.submitChangeRequest();
            versioningPurchaseOrder.approveChangeRequest();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDue_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public void calcDue_RU()
    {
        if (! this.PaymentSched && SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            this.FixedDueDate = PaymTerm::find(this.Payment).due(this.DeliveryDate, this.paymDayId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyAllocationOrDistributionTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to use an allocation or distribution template to create the distributons of the transaction header.
    /// </summary>
    /// <returns>
    /// true if the distribution template can be used; otherwise, false.
    /// </returns>
    public boolean canApplyAllocationOrDistributionTemplate()
    {
        boolean projMultipleFundingSources = false;

        projMultipleFundingSources = (this.ProjId && ProjInvoiceTable::hasMultipleFundingSources(ProjTable::projInvoiceStatic(this.ProjId).ProjInvoiceProjId));

        if (!this.isInvoiceMatched() && !(projMultipleFundingSources))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAutoUpdatePurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the table buffer is restricted by the change management functionality.
    /// </summary>
    /// <returns>
    /// true if the buffer can be updated; otherwise, false.
    /// </returns>
    public boolean canAutoUpdatePurchOrder()
    {
        return !this.ChangeRequestRequired || this.DocumentState == VersioningDocumentState::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConfirmationRequestBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the current purchase order can be updated for any confirmation request (binding or not binding).
    /// </summary>
    /// <returns>
    ///     True if it is possible to update the purchase order for any confirmation request (binding or not binding).
    /// </returns>
    public boolean canConfirmationRequestBeUpdated()
    {
        return this.type().canAnyConfirmationRequestBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFinalize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the purchase order can be finalized.
    /// </summary>
    /// <returns>
    ///    true if the the purchase order can be finalized; otherwise, false.
    /// </returns>
    public boolean canFinalize()
    {
        return (this.isInvoiced()
            ||  this.isCanceled())
            && this.DocumentState == VersioningDocumentState::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if modifications that have a financial impact are allowed to be made when the french feature is enabled.
    /// </summary>
    /// <returns>
    /// true if there exists an accounting distribution state of complete or finalized for the document or the commitments feature is disabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should only be used by the French commitments feature, it is not intended for use by other scenarios.
    /// </remarks>
    public boolean canModifyPurchaseOrder()
    {
        AccountingEvent accountingEvent;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            select firstonly RecId from accountingEvent
                where accountingEvent.SourceDocumentHeader  == this.SourceDocumentHeader
                   && (accountingEvent.State    == AccountingEventState::Complete
                       || accountingEvent.State == AccountingEventState::Journalized);
        }

        return accountingEvent.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRenumberLineNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line number field can be edited.
    /// </summary>
    /// <returns>
    /// true if the line number field can be edited; otherwise, false.
    /// </returns>
    public boolean canRenumberLineNumbers()
    {
        return !this.isVersioned()
               && !PurchParameters::find().DisallowLineRenumbering;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method are testing if the current <c>PurchTable</c> can be submitted to workflow.
    /// </summary>
    /// <param name="workflowType">Workflow type</param>
    /// <returns>
    ///     Returns true if the current record can be submitted to workflow, otherwise false.
    /// </returns>
    public boolean  canSubmitToWorkflow(str workflowType = '')
    {
        boolean     canSubmit = false;

        if (this.RecId && this.DocumentState  == VersioningDocumentState::Draft)
        {
            canSubmit = true;
        }

        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccount</Name>
				<Source><![CDATA[
    boolean checkAccount()
    {
        boolean ok =  VendTable::find(this.OrderAccount).checkAccountIsNotBlockedForAllDocuments();

        // If the commitments feature is enabled, then we want to validate that the order account matches what is on the commitment.
        if (PublicSectorUtils::isFrenchRegulatoryEnabled() && !this.checkVendorOnAllPurchLineCommitments())
        {
            ok = checkFailed("@SPS2134");
            this.OrderAccount = this.orig().OrderAccount;
        }

        // <GIN>
        if (TaxParameters::isCustomsEnable_IN()
            && this.purchTable_W().CustomsImportOrder_IN == NoYes::Yes
            && this.PurchaseType          != PurchaseType::Purch)
        {
            return checkFailed("@GLS5766");
        }
        // </GIN>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountingDateFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the change of the accounting data is allowed.
    /// </summary>
    /// <param name="_accountingDate">
    /// The <c>AccountingDate</c> value to test if it is OK to change the accounting date.
    /// </param>
    /// <returns>
    /// Returns true if a change of the accounting data is allowed; otherwise false.
    /// </returns>
    public boolean checkAccountingDateFiscalYear(AccountingDate _accountingDate = this.orig().AccountingDate)
    {
        boolean dateIsValid = true;

        boolean isFiscalYearChanged()
        {
            return (this.AccountingDate != _accountingDate
                   && (this.AccountingDate < FiscalCalendars::findFirstDayofYear(
                       CompanyInfoHelper::fiscalCalendarRecId(),
                       _accountingDate)
                   || this.AccountingDate > FiscalCalendars::findLastDayofYear(
                       CompanyInfoHelper::fiscalCalendarRecId(),
                       _accountingDate)));
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdv2BudgetCtrl)))
        {
            if (isFiscalYearChanged())
            {
                dateIsValid = dateIsValid && !SourceDocumentHeaderProvider::isJournalized(this.SourceDocumentHeader);
                dateIsValid = dateIsValid && !SourceDocumentHeaderProvider::hasBudgetReservations(this.SourceDocumentHeader);
            }
        }

        return dateIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the <c>AgreementHeaderExt_RU</c> field for purchase order.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///     The record ID of the purchase agreement; optional.
    /// </param>
    /// <returns>
    ///     true if the <c>AgreementHeaderExt_RU</c> field is valid; otherwise, false.
    /// </returns>
    public boolean checkAgreement_RU(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = this.purchTable_RU().AgreementHeaderExt_RU)
    {
        PurchAgreementHeader purchAgreementHeader;
        boolean ok = true;

        if (PurchLine::exist(this.PurchId))
        {
            ok = checkFailed("@GLS220553");
        }

        if (ok && _agreementHeaderExtRecId)
        {
            purchAgreementHeader = PurchAgreementHeaderExt_RU::purchAgreementHeader(_agreementHeaderExtRecId);

            if (!purchAgreementHeader.canReleaseAgreement(this.DeliveryDate))
            {
                ok = checkFailed("@SYS103075");
            }

            if (purchAgreementHeader.VendAccount != this.OrderAccount)
            {
                ok = checkFailed("@SYS334899");
            }

            if (ok && this.InvoiceAccount && purchAgreementHeader.purchAgreementHeaderDefault().VendorInvoiceAccount != this.InvoiceAccount)
            {
                ok = checkFailed("@SYS334899");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the order can be canceled.
    /// </summary>
    /// <returns>
    /// true if the order can be canceled; otherwise, false.
    /// </returns>
    public boolean checkCancel()
    {
        return this.RecId && this.PurchStatus == PurchStatus::Backorder
            && (this.DocumentState != VersioningDocumentState::InReview
            && this.DocumentState != VersioningDocumentState::Finalized)
            && VersioningPurchaseOrder::checkHistoryExist(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCashPayment</Name>
				<Source><![CDATA[
    boolean  checkCashPayment()
    {
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        // <GEERU>
        if (this.PaymentSched
            && (PaymTerm::isCashAccount(this.Payment)
                || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                    && this.purchTable_W().EmplAccount_RU)))
        // </GEERU>
        {
            return checkFailed("@SYS28733");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    boolean checkContactPerson()
    {
        ContactPerson   contactPerson;

        if (this.ContactPersonId)
        {
            contactPerson = ContactPerson::find(this.ContactPersonId);
            if (contactPerson.ContactForParty != this.party())
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    boolean  checkCurrencyCode()
    {
        boolean oK = true;

        if (this)
        {
            if (this.CurrencyCode != this.orig().CurrencyCode &&
                PurchLine::existDifferentCurrency(this.PurchId,this.CurrencyCode))
            {
                warning("@SYS15290");

                this.CurrencyCode = this.orig().CurrencyCode;
            }

            if (this.CurrencyCode != this.orig().CurrencyCode &&
                MarkupTrans::existDifferentCurrency(this.TableId, this.RecId, this.CurrencyCode))
            {
                warning("@SYS24528");

                this.CurrencyCode = this.orig().CurrencyCode;
            }
        }

        return oK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    boolean checkDelete()
    {
        return this.type().checkDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFullyDistributedAndQualified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all purchase order lines are fully distributed and fully qualified.
    /// </summary>
    /// <param name="_caller">
    /// The calling source document processor caller.
    /// </param>
    /// <param name="_user">
    /// The user that submitted the source document implementation for processing; optional.
    /// </param>
    /// <returns>
    /// true if all purchase order lines are fully distributed and qualified; otherwise, false.
    /// </returns>
    boolean checkFullyDistributedAndQualified(
        SourceDocumentProcessorCaller           _caller = null,
        UserId                                  _user = curUserId()
        )
    {
        SourceDocumentHeader    sourceDocumentHeader;
        SourceDocumentLine      sourceDocumentLine;

        // Make sure all lines are fully distributed - Completed and finalized lines will not be changed
        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        // Cache max accounting distribution numbers to avoid having to look up each line individually during submit
        AccountingDistributionProcessor::cacheAccountingDistNumbersForHeader(sourceDocumentHeader);

        if (sourceDocumentHeader)
        {
            while select sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeader.RecId
                    && sourceDocumentLine.ParentSourceDocumentLine == 0
                    && (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft
                        || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
            {
                SourceDocumentLineProcessor::submitSourceDocumentLine(
                    sourceDocumentLine,
                    false,
                    SourceDocumentLineAccountingStatus::FullyDistributed,
                    _caller,
                    _user);
            }
        }

        return SourceDocumentProvider::areSourceDocAccDistAccountValid(
            SourceDocumentHeader::find(this.SourceDocumentHeader), true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfHeaderMiscChargesItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the warning icon the of the header miscellaneous charges of a debit or credit type are
    /// equal to the item and they have not been allocated to lines
    /// </summary>
    /// <returns>
    /// The warning icon of the header miscellaneous charges of debit or credit type are equal to the item
    /// and they have not been allocated to lines; otherwise, null.
    /// </returns>
    display ImageRes checkIfHeaderMiscChargesItems()
    {
        #resAppl
        ImageRes icon;

        if (Markup::hasMarkupTypeItem(this))
        {
            icon = #ImageWarning;
        }

        return  icon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the various posting updates are allowed for the order.
    /// </summary>
    /// <param name = "_packedCheckIfUpdateContract">
    ///     Specifies which of the posting update allowance values for the order to get; optional.
    /// </param>
    /// <returns>
    ///    A packed <c>PurchTableCanBeUpdatedContract</c> class with the values of whether the order can do a posting of a given type.
    /// </returns>
    container checkIfUpdate(container _packedCheckIfUpdateContract = conNull())
    {
        return this.type().checkIfUpdate(_packedCheckIfUpdateContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUpdate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the various posting updates are allowed for the order.
    /// </summary>
    /// <returns>
    /// A packed <c>PurchTableCanBeUpdatedContract</c> class with the values of whether the order can do a posting of a given type.
    /// </returns>
    public container checkIfUpdate_IN()
    {
        return this.type().checkIfUpdate_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntrastatFulfillDate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates Intrastat fulfillment date.
    /// </summary>
    /// <returns>
    /// ture if Intrastat fulfillment date is valid; otherwise, false.
    /// </returns>
    public boolean checkIntrastatFulfillDate_HU()
    {
        VendTable                       vendTable;
        LogisticsAddressCountryRegionId country;
        IntrastatParameters             intrastatParameters;

        vendTable           = VendTable::find(this.OrderAccount);
        country             = vendTable.invoiceAddress().CountryRegionId;
        intrastatParameters = IntrastatParameters::find();

        if (! country)
        {
            return checkFailed("@GLS107637");
        }

        if (! IntrastatCountryRegionParameters::isInEU(country))
        {
            return true;
        }

        if (intrastatParameters.IntrastatFulfillmentDateEmptyWarning_HU && ! this.IntrastatFulfillmentDate_HU)
        {
            return checkFailed(strFmt("@SYS4080009", fieldPName(PurchTable, IntrastatFulfillmentDate_HU)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventOwner_RU</Name>
				<Source><![CDATA[
    boolean checkInventOwner_RU()
    {
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;
        boolean             ok = true;
        PurchTable          purchTableOrig = this.orig();
        PurchTable_RU       purchTable_RU = this.purchTable_RU();

        if (purchTableOrig &&
            (this.OrderAccount          != purchTableOrig.OrderAccount  ||
             purchTable_RU.AgreementHeaderExt_RU != purchTable_RU.orig().AgreementHeaderExt_RU))
        {
            select firstonly RecId from inventTransOrigin
                where inventTransOrigin.ReferenceCategory == InventTransType::Purch
                   && inventTransOrigin.ReferenceId       == this.PurchId
            join TableId from inventDim
                where inventDim.InventDimId     == inventTransOrigin.ItemInventDimId
                   && inventDim.InventOwnerId_RU;

            if (inventTransOrigin.RecId)
            {
                ok = checkFailed(strFmt("@GLS115695", fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfile_RU</Name>
				<Source><![CDATA[
    boolean checkInventProfile_RU(boolean _checkProfileId = false)
    {
        PurchTable          purchTableTmp;
        PurchTable_RU       purchTableTmp_RU;
        PurchLine           purchLine;
        InventDim           inventDim;
        InventProfile_RU    inventProfile;
        boolean             ok = true;
        PurchTable_RU       purchTable_RU = this.purchTable_RU();

        purchTableTmp.data(this);
        purchTableTmp_RU = purchTableTmp.purchTable_RU();

        purchTable_RU.setInventProfileId_RU();
        this.packPurchTable_RU(purchTable_RU);

        if (purchTable_RU.InventProfileType_RU != InventProfileType_RU::NotSpecified)
        {
            select firstonly purchLine
                where purchLine.PurchId                 == this.PurchId
            join inventDim
                where inventDim.InventDimId             == purchLine.InventDimId
            join inventProfile
                where inventProfile.InventProfileId     == inventDim.InventProfileId_RU
                   && inventProfile.InventProfileType   != purchTable_RU.InventProfileType_RU;

            if (purchLine)
            {
                ok = checkFailed(strFmt("@GLS113728",
                                        inventDim.InventProfileId_RU,
                                        purchTable_RU.InventProfileType_RU));
            }

            if (purchTable_RU.InventProfileType_RU != InventProfileType_RU::General)
            {
                select firstonly RecId from purchLine
                    where purchLine.PurchId == this.PurchId &&
                         (purchLine.StockedProduct == NoYes::No ||
                         (purchLine.ProcurementCategory         &&
                         !purchLine.ItemId));

                if (purchLine.RecId)
                {
                    ok = checkFailed(
                        strFmt("@GLS220092",
                            purchTable_RU.InventProfileType_RU));
                }
            }
            else if (InventProfile_RU::find(purchTableTmp_RU.InventProfileId_RU).StockInTransit ==StockInTransit_RU::BoughtInTransit)
            {
                select firstonly RecId from purchLine
                    where purchLine.PurchId == this.PurchId     &&
                         (purchLine.StockedProduct == NoYes::No ||
                         (purchLine.ProcurementCategory         &&
                         !purchLine.ItemId));

                if (purchLine.RecId)
                {
                    ok = checkFailed(
                        strFmt("@GLS220091",
                            purchTable_RU.InventProfileId_RU));
                }
            }
        }

        if (! _checkProfileId &&
            PurchTable2LineParameters::find(
                PurchTable::fieldIdToInternalFieldId_W(
                    fieldNum(PurchTable_RU, InventProfileId_RU),
                    tableNum(PurchTable_RU))).Table2LineUpdate == TradeTable2LineUpdate::Never)
        {
            // force check for consistent
            _checkProfileId = true;
        }

        if (_checkProfileId &&  purchTableTmp_RU.InventProfileId_RU)
        {
            select firstonly RecId from purchLine
                where purchLine.PurchId             == this.PurchId
            join InventProfileId_RU from inventDim
                where inventDim.InventDimId         == purchLine.InventDimId
            join TableId from inventProfile
                where inventProfile.InventProfileId == inventDim.InventProfileId_RU
                   && inventProfile.InventProfileId != purchTableTmp_RU.InventProfileId_RU;

            if (purchLine.RecId)
            {
                ok = checkFailed(strFmt("@GLS113727",
                                        inventDim.InventProfileId_RU,
                                        purchTableTmp_RU.InventProfileId_RU));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the purchase order is invoice matched it checks whether there were no field changes that would require distribution update.
    /// </summary>
    /// <param name = "_purchTableOrig">
    /// The original purchase order which is updated.
    /// </param>
    protected void checkInvoiceConstraints(PurchTable _purchTableOrig)
    {
        if (this.isInvoiceMatched())
        {
            if (this.InclTax           != _purchTableOrig.InclTax
             || this.DiscPercent       != _purchTableOrig.DiscPercent
             || this.CurrencyCode      != _purchTableOrig.CurrencyCode
             || this.MultiLineDisc     != _purchTableOrig.MultiLineDisc
             || this.EndDisc           != _purchTableOrig.EndDisc
             || this.MarkupGroup       != _purchTableOrig.MarkupGroup
             || this.DefaultDimension  != _purchTableOrig.DefaultDimension)
            {
                throw error("@SYS327634");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupTrans</Name>
				<Source><![CDATA[
    boolean checkMarkupTrans(boolean _warningOnly = true)
    {
        return MarkupTrans::checkMarkupTrans(this.TableId, this.RecId, _warningOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPayment</Name>
				<Source><![CDATA[
    boolean checkPayment()
    {
        #ISOCountryRegionCodes

        if (this.PaymentSched && this.FixedDueDate)
        {
            return checkFailed("@SYS69828");
        }

        if (this.Payment                                                    &&
            !this.DeliveryDate                                              &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES])    &&
            this.payment().UseDeliveryDateForDueDate_ES)
        {
            return checkFailed(strFmt("@SYS4000477", this.Payment));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if it is allowed to modify purchase order.
    /// </summary>
    /// <param name="_useWarning">
    /// A Boolean value that indicates whether to to display Yes/No message box when safety level of invoiced order is set to Warning; optional.
    /// </param>
    /// <param name="_interCompanyCheck">
    /// A Boolean value that indicates whether to also perform check on related intercompany orders; optional.
    /// </param>
    /// <param name = "_treatInvoicedOrderUpdateWarningAsError">
    /// A Boolean value that indicates whether the "Warning" access level must be treated as "Locked"; optional.
    /// </param>
    /// <returns>
    /// true, if the purchase order can be modified; otherwise, false.
    /// </returns>
    boolean  checkUpdate(boolean  _useWarning           = true,
                         boolean _interCompanyCheck     = true,
                         boolean _treatInvoicedOrderUpdateWarningAsError    = false)
    {
        boolean     ok = (this ? true : false);
        SalesTable  salesTable;

        if (this.ChangeRequestRequired && this.DocumentState >= VersioningDocumentState::Approved)
        {
            return false;
        }

        if (this.isFinalized())
        {
            return false;
        }

        if (this && this.isInvoiced())
        {
            switch (PurchParameters::find().accesLevelInvoiced(_treatInvoicedOrderUpdateWarningAsError))
            {
                case SalesPurchAccesLevel::Warning:
                    if (_useWarning && Box::yesNo("@SYS27044", DialogButton::Yes) != DialogButton::Yes)
                    {
                        ok = false;
                    }
                    break;

                case SalesPurchAccesLevel::Locked:
                    if (_useWarning)
                    {
                        warning(strFmt("@SCM:PurchOrderIsFullyInvoiced", this.PurchId, enum2Str(SalesPurchAccesLevel::Locked)));
                    }
                    ok = false;
                    break;
            }
        }

        if (_interCompanyCheck)
        {
            if (!ok
            &&  this.isInterCompanyOrder())
            {
                warning("@SYS106306");
            }

            if (ok
            &&  this.SkipUpdate != InterCompanySkipUpdate::InterCompany
            &&  this.SkipUpdate != InterCompanySkipUpdate::Both
            &&  this.isInterCompanyOrder())
            {
                changecompany(this.InterCompanyCompanyId)
                {
                    salesTable = null;
                    salesTable = SalesTable::find(this.InterCompanySalesId);
                    if (salesTable)
                    {
                        salesTable.SkipUpdate = InterCompanySkipUpdate::InterCompany;
                        ok = SalesTableType::construct(salesTable).checkUpdate(false,_interCompanyCheck);
                        if (!ok)
                        {
                            error("@SYS106306");
                        }
                    }
                }
            }

            if (ok
            &&  this.SkipUpdate != InterCompanySkipUpdate::Internal
            &&  this.SkipUpdate != InterCompanySkipUpdate::Both
            &&  this.isInterCompanyOrder())
            {
                salesTable = null;
                salesTable = SalesTable::find(this.InterCompanyOriginalSalesId);
                if (salesTable && salesTable.isInterCompanyOrder())
                {
                    salesTable.SkipUpdate = InterCompanySkipUpdate::Internal;
                    ok = SalesTableType::construct(salesTable).checkUpdate(false,_interCompanyCheck);
                    if (!ok)
                    {
                        error("@SYS106306");
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendorOnAllPurchLineCommitments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that there are no purchase order lines associated with a commitment that has a different vendor than the current order account.
    /// </summary>
    /// <returns>
    /// true if there are no purchase order lines for the current purchase order that are associated with a
    /// commitment that has a different vendor account than the current order account; otherwise, false.
    /// </returns>
    public boolean checkVendorOnAllPurchLineCommitments()
    {
        PurchLine                   purchLine;
        PurchCommitmentLine_PSN     purchCommitmentLine_PSN;
        PurchCommitmentHeader_PSN   purchCommitmentHeader_PSN;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            select firstonly RecId from purchLine
                where purchLine.PurchId == this.PurchId
            join firstonly RecId from purchCommitmentLine_PSN
                where purchCommitmentLine_PSN.RecId == purchLine.PurchCommitmentLine_PSN
            join firstonly RecId from purchCommitmentHeader_PSN
                where purchCommitmentHeader_PSN.RecId   == purchCommitmentLine_PSN.PurchCommitmentHeader_PSN
                   && purchCommitmentHeader_PSN.VendorAccount != ''
                   && purchCommitmentHeader_PSN.VendorAccount != this.OrderAccount;

            return purchCommitmentHeader_PSN.RecId == 0;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    display ClearingPeriod clearingPeriod()
    {
        return this.payer().clearingPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPerson</Name>
				<Source><![CDATA[
    ContactPerson contactPerson(boolean update = false)
    {
        return ContactPerson::find(this.ContactPersonId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName  contactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonPhone</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the phone for the contact person.
    /// </summary>
    /// <returns>
    ///    The phone for the contact person.
    /// </returns>
    public display ContactPersonPhone contactPersonPhone()
    {
        return this.contactPerson().phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode currencyCode, TradeCurencyConversion tradeCurrencyConversion = TradeCurencyConversion::ExchRate, TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PurchLine                   purchLine;
        MarkupTrans                 markupTrans;
        // <GIN>
        #isoCountryRegionCodes
        boolean                     isCountryRegionIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        ttsbegin;

        VersioningPurchaseOrder::newPurchaseOrder(this,true).change(this,this.orig());

        while select forupdate purchLine
            where purchLine.PurchId         == this.PurchId
               && !purchLine.IsDeleted
        {
            purchLine.convertCurrencyCode(currencyCode, tradeCurrencyConversion,_exchRateDate);
            purchLine.IsModified = NoYes::Yes;
            purchLine.doUpdate();
            // <GIN>
            if (isCountryRegionIN)
            {
                purchLine.sysExtensionSerializerMap::PostUpdate();
            }
            // </GIN>

            if (purchLine.MatchingAgreementLine && !AgreementLine::find(purchLine.MatchingAgreementLine).isLinkValid(purchLine,false))
            {
                purchLine.unLinkAgreementLine();
                info(strFmt("@SYS306907", this.PurchId, purchLine.ItemId));
            }

            if (purchLine.ProjId && (purchLine.RemainPurchFinancial+purchLine.RemainPurchPhysical)!=0) //Committed cost updated since vender conrency changes
            {
                this.projCostControlUpdate(purchLine,ProjCommittedCostUpdateAction::UpdateReverse);
            }
        }

        while select forupdate markupTrans
              where markupTrans.TransTableId  == this.TableId
                &&  markupTrans.TransRecId    == this.RecId
                &&  !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(currencyCode,_exchRateDate);
            markupTrans.IsModified = NoYes::Yes;
            markupTrans.doUpdate();
        }

        if (PurchPrepayTable::exist(this.PurchId))
        {
            PurchPrepayTable::convertCurrencyCode(this.PurchId, currencyCode, _exchRateDate);
        }

        VendPaymSched::deleteVendPaymSched(this.TableId, this.RecId);

        this.CurrencyCode = currencyCode;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    void  copyAddressToLine(DialogButton                 _copyAddress,
                                   LogisticsPostalAddressRecId  _originalDeliveryPostalAddress)
    {
        PurchLine  purchLine;
        // <GIN>
        PurchLine_IN                                purchLineIN;
        LogisticsLocationRecId                      companyLocationRecId;
        TaxInformationRefRecId_IN                   taxInformationRefRecId;
        TransitDocumentTransTaxInfoRelation_IN      relation;
        TransTaxInformation                         transTaxInformation;
        // </GIN>

        if (_copyAddress == DialogButton::Cancel)
        {
            return;
        }

        ttsbegin;
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            while select forupdate purchLine
                where purchLine.PurchId         == this.PurchId
                   && !purchLine.IsInvoiceMatched
                   && !purchLine.IsDeleted
                   &&
                    (_copyAddress                     == DialogButton::YesToAll ||
                     purchLine.DeliveryPostalAddress  == _originalDeliveryPostalAddress)
                   &&
                    (!purchLine.mcrDropShipment                      
                        || purchLine.PurchStatus == PurchStatus::Backorder 
                        || purchLine.PurchStatus == PurchStatus::Canceled
                        || purchLine.PurchStatus == PurchStatus::None)

            {
                purchLine.setAddressFromPurchTable(this);
                purchLine.onDeliveryPostalAddressChange_BR();
                purchLine.write();
            }
        }
        else
        {
            // </GBR>
            // <GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {
                companyLocationRecId   = LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
                taxInformationRefRecId = TaxInformation_IN::findDefaultbyLocation(companyLocationRecId).RecId;

                update_recordset transTaxInformation
                    setting CompanyLocation = companyLocationRecId,
                            TaxInformation  = taxInformationRefRecId
                    exists join relation
                         where relation.TransTaxInformationRecId == transTaxInformation.RecId
                    exists join purchLine
                        where purchLine.PurchId == this.PurchId
                            && !purchLine.IsInvoiceMatched
                            && !purchLine.IsDeleted
                            && purchLine.TableId == relation.TransactionTableId
                            && purchLine.RecId == relation.TransactionRecId
                            && (_copyAddress == DialogButton::YesToAll
                                || purchLine.DeliveryPostalAddress == _originalDeliveryPostalAddress);
            }
            // </GIN>

            if (!this.isInterCompanyOrder())
            {
                purchLine.skipDataMethods(true);
            }
            update_recordset purchLine
                setting DeliveryPostalAddress = this.DeliveryPostalAddress,
                        DeliveryName          = this.DeliveryName,
                        AddressRefRecId       = this.AddressRefRecId,
                        AddressRefTableId     = this.AddressRefTableId
                where purchLine.PurchId         == this.PurchId
                   && !purchLine.IsInvoiceMatched
                   && !purchLine.IsDeleted
                   &&
                    (_copyAddress                     == DialogButton::YesToAll ||
                     purchLine.DeliveryPostalAddress  == _originalDeliveryPostalAddress);
            // <GBR>
        }
        // </GBR>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public
    DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, CompanyInfo::findDataArea(curext()).RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromPurchTableHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from a <c>PurchTableHistory</c> record.
    /// </summary>
    /// <param name="_purchTableHistory">
    /// A <c>PurchTableHistory</c> record to copy data from.
    /// </param>
    void copyFromPurchTableHistory(PurchTableHistory _purchTableHistory)
    {
        // <GEEU>
        #ISOCountryRegionCodes
        // </GEEU>

        this.DlvTerm                = _purchTableHistory.DlvTerm;
        this.DlvMode                = _purchTableHistory.DlvMode;
        this.LanguageId             = _purchTableHistory.LanguageId;
        this.Payment                = _purchTableHistory.Payment;
        this.CashDisc               = _purchTableHistory.CashDisc;
        this.CurrencyCode           = _purchTableHistory.CurrencyCode;
        this.DefaultDimension       = this.copyDimension(_purchTableHistory.DefaultDimension);
        this.InclTax                = _purchTableHistory.InclTax;
        this.AccountingDistributionTemplate   = _purchTableHistory.AccountingDistributionTemplate;

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(_purchTableHistory, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentSched</Name>
				<Source><![CDATA[
    void  copyPaymentSched(VendInvoiceJour vendInvoiceJour)
    {
        VendPaymSched       vendorPaymSched;
        VendPaymSchedLine   vendPaymSchedLine;

        VendPaymSched       newVendPaymSched;
        VendPaymSchedLine   newVendPaymSchedLine;

        ttsbegin;

        select firstonly vendorPaymSched
            where vendorPaymSched.ExtTableId    == this.TableId &&
                  vendorPaymSched.ExtRecId      == this.RecId;

        if (vendorPaymSched)
        {
            newVendPaymSched            = vendorPaymSched.data();
            newVendPaymSched.ExtTableId = vendInvoiceJour.TableId;
            newVendPaymSched.ExtRecId   = vendInvoiceJour.RecId;
            newVendPaymSched.insert();

            while select vendPaymSchedLine
                where vendPaymSchedLine.FatherRecID == vendorPaymSched.RecId
                &&   !vendPaymSchedLine.IsDeleted
            {
                newVendPaymSchedLine                = vendPaymSchedLine.data();
                newVendPaymSchedLine.FatherRecID    = newVendPaymSched.RecId;
                newVendPaymSchedLine.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the creation date of the current records.
    /// </summary>
    /// <returns>
    /// The creation date of the current records.
    /// </returns>
    /// <remarks>
    /// This method returns only the date. It is used in fact boxes.
    /// </remarks>
    display CreationDate  createDate()
    {
        return DateTimeUtil::date(this.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the invoice will create inventory transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
    /// </summary>
    /// <returns>
    /// Returns true is operation type is not set on <c>PurchTable</c> or the operation type is configured to inventory transactions.
    /// </returns>
    public boolean createInventTrans_BR()
    {
        PurchTable_BR   purchTable_BR = this.purchTable_BR();

        return BrazilParameters::isEnabled() == false
            || purchTable_BR.SalesPurchOperationType_BR == false
            || SalesPurchOperationType_BR::find(purchTable_BR.SalesPurchOperationType_BR).CreateInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    void  createMarkupTrans(
        boolean _deleteExistingMarkupTrans = true
    )
    {
        if (this.SkipCreateMarkup == NoYes::No)
        {
            Markup::insertMarkupTrans(HeadingLine::Heading,
                                     MarkupModuleType::Vend,
                                     this,
                                     this.OrderAccount,
                                     this.MarkupGroup,
                                     this.CurrencyCode,
                                     this.LanguageId,
                                     '',
                                     this.MarkupGroup
                                    ,false
                                    ,_deleteExistingMarkupTrans
                                    );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneTimeAccount</Name>
				<Source><![CDATA[
    void  createOneTimeAccount()
    {
        boolean resetTmpVendorName;

        if (!this.PurchName)
        {
            //PurchName is used as vendor name and is mandatory.
            //The vendor name is updated again in transferToOnetimeVendor which is called as soon as the purchase order is being created.
            this.PurchName = "@SYS130384";
            resetTmpVendorName = true;
        }

        this.OrderAccount       = VendTable::createOneTimeAccount(this);
        this.initFromVendTable();

        if (resetTmpVendorName)
        {
            this.PurchName = '';
        }

        if (!this.InvoiceAccount)
        {
            this.InvoiceAccount = this.OrderAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    void  createPaymentSched()
    {
        CustVendPaymSched   custVendPaymSched;
        PurchTotals         purchTotals = PurchTotals::newPurchTable(this, PurchUpdate::All);

        purchTotals.calc();

        custVendPaymSched = CustVendPaymSched::construct(SysModule::Vend,this);
        custVendPaymSched.setPurchTotals(purchTotals);
        custVendPaymSched.createPaymSched(PaymSched::find(this.PaymentSched));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the corresponding fiscal document will create vendor transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
    /// </summary>
    /// <returns>
    ///     Returns true if operation type is not set on <c>PurchTable</c> or the operation type is configured to create vendor transactions.
    /// </returns>
    public boolean createVendTrans_BR()
    {
        PurchTable_BR purchTable_BR;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            purchTable_BR = this.purchTable_BR();
        }

        return BrazilParameters::isEnabled() == false
            || purchTable_BR.SalesPurchOperationType_BR == 0
            || SalesPurchOperationType_BR::find(purchTable_BR.SalesPurchOperationType_BR).CreateFinancialTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void  delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        #ISOCountryRegionCodes

        this.type().deleting();

        PurchTableType purchTableType = this.type();

        if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
        &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
        {
            purchTableType.interCompanyDelete();
        }

        if (BankLCImportFeatureChecker::checkBankLCImportEnabled())
        {
            BankLCImport bankLCImport = BankLCImport::findByPurchTable(this.PurchId, true);

            if (bankLCImport && bankLCImport.RecId != 0)
            {
                if (bankLCImport.validateDelete())
                {
                    bankLCImport.delete();
                }
            }
        }

        PurchLine               purchLine;
        PurchDeliverySchedule   purchDeliverySchedule;
        boolean                 isPurchLineDeleted = false;

        // first delete order lines not to recalculate them when deleting the delivery lines.
        while select forupdate purchLine
            where purchLine.PurchId == this.PurchId
                && !purchLine.IsDeleted
            exists join purchDeliverySchedule
                where purchDeliverySchedule.OrderLine == purchLine.InventTransId
                    && !purchDeliverySchedule.IsDeleted
        {
            if (purchLine.validateDelete(true))
            {
                purchLine.delete();
                isPurchLineDeleted = true;
            }
        }

        boolean firstDropShipment = true;
        
        while select forupdate purchLine
            where purchLine.PurchId == this.PurchId
                && !purchLine.IsDeleted
        {
            if (this.mcrDropShipment && firstDropShipment)
            {
                //Create drop ship PO order event entry
                MCROrderEventTable      mcrOrderEventTable;
                mcrOrderEventTable.insertFromDropShipment(purchLine.InventRefId , this.PurchId, MCROrderEventType::CancelDropShipPO);
                firstDropShipment = false;
            }

            if (purchLine.validateDelete(true))
            {
                purchLine.delete();
                isPurchLineDeleted = true;
            }
        }

        if (this.SkipUpdate != InterCompanySkipUpdate::Internal
        &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
        {
            purchTableType.deleteSalesTable();
        }

        SpecTransManager::construct(this).deleteAll();

        if (PurchTable::exist(this.PurchId))
        {
            if (isPurchLineDeleted) // Purchlines update the status of purchase order so we need to reread to avoid update conflicts
            {
                this.reread();
            }
            
            purchTableType.deleteTaxUncommitted();
            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                purchTableType.deleteTaxWithholdUncommitted_IN();
            }
            // </GIN>

            // <GIN> <GTE>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) || TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.TransitDocumentTransactionMap_IN::deleteTransitDocumentsForHeader();
            }
            // </GIN> </GTE>

            PurchTableLinks purchTableLinks = PurchTableLinks::find(this.PurchId,true);
            if (purchTableLinks)
            {
                purchTableLinks.delete();
            }

            SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader,true);

            VersioningPurchaseOrder::newPurchaseOrder(this).delete();
            
            super();

            sourceDocumentHeader.delete();
        }

        TradeBLWIJournalPurposeCodes::deleteRecord(this.RecId, TradeBLWITypeOfForm::PurchTable);

        this.type().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressing</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddressing()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCNPJCPFNUM_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery CNPJ or CPF for the current record.
    /// </summary>
    /// <returns>
    /// Returns the CNPJ or CPF of the vendor if the adddress is a primary address.
    /// Returns the CNPJ or CPF related to delivery <c>logisticsPostalAddress</c> if the adddress is not a primary address.
    /// </returns>
    public display CNPJCPFNum_BR deliveryCNPJCPFNUM_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
            return '';

        select firstonly dirPartyLocation where dirPartyLocation.Location == this.deliveryLocation();

        return DirPartyLocationEx::cnpjCPFNum_BR(dirPartyLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateDisplay</Name>
				<Source><![CDATA[
    display DlvDate deliveryDateDisplay(DlvDate blankDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.DeliveryDate)
            return this.DeliveryDate;

        return blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryIENum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery IE for the current record.
    /// </summary>
    /// <returns>
    /// Returns the IE of the vendor if the adddress is a primary address.
    /// Returns the IE related to delivery <c>logisticsPostalAddress</c> if the adddress is not a primary address.
    /// </returns>
    public display IENum_BR deliveryIENum_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
            return '';

        select firstonly dirPartyLocation where dirPartyLocation.Location == this.deliveryLocation();

        return DirPartyLocationEx::ieNum_BR(dirPartyLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>RecId</c> field of the <c>LogisticsLocation</c> record that is associated with the
    /// specified <c>DeliveryPostalAddress</c> record.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> field of the <c>LogisticsLocation</c> record that is associated with the specified
    /// <c>DeliveryPostalAddress</c> record.
    /// </returns>
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispLastConsDate_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the latest consolidation date for this purchase order.
    /// </summary>
    /// <returns>
    /// Consolidation date.
    /// </returns>
    public display CustVendConsDate_JP dispLastConsDate_JP()
    {
        return this.salesPurchTableInterface().getLastConsDate_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispLastConsId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets latest consolidation invoice Id for this purchase order.
    /// </summary>
    /// <returns>
    /// Consolidation invoice Id.
    /// </returns>
    public display VendConsId_JP dispLastConsId_JP()
    {
        return this.salesPurchTableInterface().getLastConsId_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBankDocumentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane on the BankLCImportListPage form.
    /// </summary>
    /// <returns>
    /// Title field of the preview pane.
    /// </returns>
    public display Caption displayBankDocumentInfo()
    {
        return strFmt("@SYS327590", this.PurchId, this.BankDocumentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget check result value for the record.
    /// </summary>
    /// <returns>
    /// The budget check result value for the record.
    /// </returns>
    public display BudgetCheckResult displayBudgetCheckResult()
    {
        return this.getBudgetCheckResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResultWithLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget check result value for the purchase order including lines.
    /// </summary>
    /// <returns>
    /// The budget check result value for the record.
    /// </returns>
    public display BudgetCheckResult displayBudgetCheckResultWithLines()
    {
        return this.getBudgetCheckResult(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the label text for the current value in the document status field.
    /// </summary>
    /// <returns>
    /// A label text for the current document status.
    /// </returns>
    /// <remarks>
    /// The label for the packing slip value on the enumeration is packing slip, but it should be product receipt for purchase.
    /// </remarks>
    display PurchDocumentStatusDisplay displayDocumentStatus()
    {
        SysDictEnum                 dictEnum;
        PurchDocumentStatusDisplay  documentStatusTxt;

        if (this.DocumentStatus == DocumentStatus::PackingSlip)
        {
            documentStatusTxt = "@SYS333836";
        }
        else if (this.DocumentStatus == DocumentStatus::ConfirmationRequest &&
                 this.findLatestConfirmationRequest().VendVendorCollaborationType != VendVendorCollaborationType::Disabled)
        {
            documentStatusTxt = "@SCM:PurchaseOrderBindingConfirmationRequest";
        }
        else
        {
            dictEnum = SysDictEnum::newName(enumStr(DocumentStatus));
            documentStatusTxt = dictEnum.value2Label(enum2int(this.DocumentStatus));
        }

        return documentStatusTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLatestConfirmationRequest</Name>
				<Source><![CDATA[
    private PurchConfirmationRequestJour findLatestConfirmationRequest()
    {
        PurchConfirmationRequestJour request;
        PurchTableVersion            purchTableVersion;

        select firstonly request
            join TableId from purchTableVersion
            order by purchTableVersion.VersionDateTime desc
                where purchTableVersion.PurchId == this.PurchId
                   && purchTableVersion.PurchIdDataAreaId == this.DataAreaId
                   && purchTableVersion.RecId == request.PurchTableVersion;

        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProformaAmountForBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total proforma invoice amount of the purchase order.
    /// </summary>
    /// <returns>
    /// The total proforma invoice amount.
    /// </returns>
    display AmountCur displayProformaAmountForBankLC()
    {
        return BankLCImport::amountProformaTotalInclTax(this.PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the record in the <c>PurchTable</c> table should update the
    /// associated <c>AccountingDistribution</c> table.
    /// </summary>
    /// <param name = "_purchTableOrig">
    /// The original purchase order which is updated.
    /// </param>
    /// <returns>
    /// true if the <c>AccountingDistribution</c> table has to be updated; otherwise, false.
    /// </returns>
    [Hookable]
    protected boolean distributionUpdateNeeded(PurchTable _purchTableOrig)
    {
        return ((this.OrderAccount                      != _purchTableOrig.OrderAccount)                    ||
                (this.InclTax                           != _purchTableOrig.InclTax)                         ||
                (this.CurrencyCode                      != _purchTableOrig.CurrencyCode)                    ||
                (this.LineDisc                          != _purchTableOrig.LineDisc)                        ||
                (this.PriceGroupId                      != _purchTableOrig.PriceGroupId)                    ||
                (this.MultiLineDisc                     != _purchTableOrig.MultiLineDisc)                   ||
                (this.EndDisc                           != _purchTableOrig.EndDisc)                         ||
                (this.DiscPercent                       != _purchTableOrig.DiscPercent)                     ||
                (this.MarkupGroup                       != _purchTableOrig.MarkupGroup)                     ||
                (this.AccountingDistributionTemplate    != _purchTableOrig.AccountingDistributionTemplate)  ||
                (this.DefaultDimension                  != _purchTableOrig.DefaultDimension)                ||
                (this.CashDisc                          != _purchTableOrig.CashDisc && TaxParameters::find().TaxLessCashDisc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editableInWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the user can modify the record when an active workflow is running.
    /// </summary>
    /// <returns>
    /// true if the user has rights to modify the record; false.
    /// </returns>
    public boolean  editableInWorkflow()
    {
        WorkflowElementTable    workflowElementTable;
        WorkflowWorkItemTable   workflowWorkItemTable;

        select firstonly ElementId from workflowWorkItemTable
                    where   workflowWorkItemTable.RefTableId == this.TableId
                      &&    workflowWorkItemTable.RefRecId   == this.RecId
                      &&    workflowWorkItemTable.UserId     == curUserId()
                      &&    workflowWorkItemTable.Status     == WorkflowWorkItemStatus::Pending
                join ElementId, ElementType from workflowElementTable
                    where   workflowElementTable.ElementId   == workflowWorkItemTable.ElementId
                       &&   (workflowElementTable.ElementName == workFlowApprovalStr(PurchTableApprovalEdit)
                            || workflowElementTable.ElementName == workFlowTaskStr(PurchTableTaskEdit));

        return workflowWorkItemTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the purchase order can be edited.
    /// </summary>
    /// <param name="checkLines">
    ///     Check if any purchase order lines has editable work item assigned.
    /// </param>
    /// <returns>
    ///     true when the purchase order can be edited; otherwise, false.
    /// </returns>
    boolean  editAllowed(boolean checkLines = false)
    {
        boolean     editHeader = true;
        boolean     editLine = false;
        PurchLine   purchLine;

        if (!this.checkUpdate(false,false))
            editHeader = false;

        if (editHeader)
        {
            // Check if the record is in an active running workflow
            if (this.DocumentState == VersioningDocumentState::InReview)
            {
                editHeader = this.editableInWorkflow();

                if (!editHeader && checkLines)
                {
                    // Check if the line record is in an active running workflow
                    while select purchLine
                        where  purchLine.PurchId == this.PurchId
                            && purchLine.IsDeleted == NoYes::No
                    {
                        if (purchLine.editableInWorkflow())
                        {
                            editLine = true;
                            break;
                        }
                    }
                }
            }
        }

        return editHeader || editLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    edit ContactPersonName  editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPersonName   name = _name;
        ContactPerson       contactPerson;
        ContactPersonId     contactPersonId;
        DirPartyTable       partyTable;
        VendTable           vendTable;
        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId;
                contactPerson = ContactPerson::find(_name);
                this.ContactPersonId = contactPerson.ContactPersonId;
                if (this.ContactPersonId)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    select firstonly contactPerson join AccountNum, Party from vendTable
                            where vendTable.AccountNum ==   this.OrderAccount
                            && vendTable.Party == contactPerson.ContactForParty
                        join Name from partyTable
                            where partyTable.RecId == contactPerson.Party &&
                                  partyTable.Name        like name;

                    if (contactPerson)
                    {
                        this.ContactPersonId=contactPerson.ContactPersonId;
                        name=partyTable.Name;
                    }
                }
                if (contactPersonId != this.ContactPersonId)
                {
                    if (this.checkContactPerson())
                    {
                        this.initFromContactInfo();
                        if (FormDataUtil::getFormDataSource(this))
                        {
                            FormDataUtil::getFormDataSource(this).refresh();
                        }
                    }
                    else
                    {
                        this.ContactPersonId = contactPersonId;
                    }
                }
            }
            else
            {
                this.ContactPersonId = '';
            }
        }
        else
        {
            name = this.contactPersonName();
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code by using the <c>ReasonCodeMap</c> map.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>

    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        if (_set && this.RecId && this.ReasonTableRef && PurchTableHistory::find(this.PurchId).ReasonTableRef == this.ReasonTableRef)
        {
            this.ReasonTableRef = 0;
        }
        return this.ReasonCodeMap::editReasonCode(_set, _reasonCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment using the <c>ReasonCodeMap</c>.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        if (_set && this.RecId && this.ReasonTableRef && PurchTableHistory::find(this.PurchId).ReasonTableRef == this.ReasonTableRef)
        {
            this.ReasonTableRef = 0;
        }
        return this.ReasonCodeMap::editReasonComment(_set, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDataSourceFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the <c>PurchTable.SalesPurchOperationType_BR</c> field is editable, if the data source is a form.
    /// </summary>
    public void enableDataSourceFields_BR()
    {
        FormDataObject  formDataObject;
        PurchTable_BR   purchTable_BR = this.purchTable_BR();

        if (FormDataUtil::isFormDataSource(purchTable_BR))
        {
            formDataObject = FormDataUtil::getFormDataSource(purchTable_BR).object(fieldNum(PurchTable_BR, SalesPurchOperationType_BR));
            formDataObject.allowEdit(this.type().canEditSalesPurchOperationType_BR());

            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(PurchTable, Port));
            formDataObject.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a purchase order is selected for posting of any kind.
    /// </summary>
    /// <returns>
    /// true if the purchase order is selected for posting; otherwise, false.
    /// </returns>
    public boolean existActivity()
    {
        PurchParmTable      purchParmTable;
        PurchParmSubTable   purchParmSubTable;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        select firstonly RecId from purchParmTable
            where  purchParmTable.ParmJobStatus == ParmJobStatus::Waiting
        exists join purchParmSubTable
            where  purchParmSubTable.OrigPurchId == this.PurchId &&
                   purchParmSubTable.ParmId      == purchParmTable.ParmId &&
                   purchParmSubTable.TableRefId  == purchParmTable.TableRefId;

        if (purchParmTable.RecId != 0)
        {
            return true;
        }

        select firstonly RecId from vendInvoiceInfoTable
            where  vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
        exists join vendInvoiceInfoSubTable
            where  vendInvoiceInfoSubTable.OrigPurchId == this.PurchId &&
                   vendInvoiceInfoSubTable.ParmId      == vendInvoiceInfoTable.ParmId &&
                   vendInvoiceInfoSubTable.TableRefId  == vendInvoiceInfoTable.TableRefId;

        if (vendInvoiceInfoSubTable.RecId != 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingJournals</Name>
				<Source><![CDATA[
    container existingJournals()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return[this.lastPurchaseOrder(),
                   this.lastReceiptsList(),
                   this.lastPackingSlip(),
                   this.lastInvoice(),
                   this.lastInvoice4Paym_RU(),
                   this.lastFacture_RU()];
        }
        // </GEERU>
        // <GEEPL>
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            return[this.lastPurchaseOrder(),
                    this.lastReceiptsList(),
                    this.lastPackingSlip(),
                    this.lastInvoice()];
        }
        else
        {
            // </GEEPL>
            return[this.lastPurchaseOrder(),
                   this.lastReceiptsList(),
                   this.lastPackingSlip(),
                   this.lastInvoice()];
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInterCompanyPurchSalesReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether InterCompany Purchase/Sales reference exists.
    /// </summary>
    /// <returns>
    /// true if InterCompany Purchace/Sales reference exists; otherwise, false.
    /// </returns>
    public boolean existInterCompanyPurchSalesReference()
    {
        InterCompanyPurchSalesReference interCompanyPurchSalesReference;

        select firstonly RecId from interCompanyPurchSalesReference
            where interCompanyPurchSalesReference.PurchId == this.PurchId;

        return interCompanyPurchSalesReference.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any unposted invoices exist for the current record.
    /// </summary>
    /// <param name = "_includeNew">
    /// Indicates whether invoices with a status of New should be included; optional.
    /// </param>
    /// <returns>
    /// true if a pending invoice exists for this purchase order; otherwise, false.
    /// </returns>
    /// <remarks>
    /// It includes unposted invoices saved in batches or in the process of being edited. Additionally it
    /// includes those invoices actually saved as pending.
    /// </remarks>
    public boolean existInvoice(boolean _includeNew = true)
    {
        VendInvoiceInfoLine  vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (this.isOpenOrder() || this.isReceived())
        {
            select firstonly RecId from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.OrigPurchId == this.PurchId
                    exists join vendInvoiceInfoTable
                    where  (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                            vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors) &&
                           (_includeNew || vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending) &&
                            vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                            vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId;

            if (vendInvoiceInfoLine.RecId != 0)
            {
                return true;
            }

            // If there are no lines for this PO, check invoice headers
            select firstonly RecId from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.PurchId == this.PurchId &&
                         (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting ||
                          vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors) &&
                         (_includeNew || vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending);

            if (vendInvoiceInfoTable.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMarkedSettlement</Name>
				<Source><![CDATA[
    boolean existMarkedSettlement(FieldId _fieldId)
    {
        if (this.SettleVoucher && SpecTrans::getSpecTransCount(this.DataAreaId, this.TableId, this.RecId))
        {
            switch (_fieldId)
            {
                case fieldNum(PurchTable, OrderAccount):    error("@SYS99930");
                    break;

                case fieldNum(PurchTable, InvoiceAccount):  error("@SYS100000");
                    break;

                default:                                    return false;
            }
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurchLine</Name>
				<Source><![CDATA[
    boolean existPurchLine()
    {
        Query       query;
        QueryRun    queryRun;
        PurchLine   purchLine;

        query = this.queryPurchLine();
        query.dataSourceTable(tableNum(PurchLine)).firstOnly(true);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(PurchLine)))
            {
                purchLine = queryRun.get(tableNum(PurchLine));
                if (purchLine.RecId)
                {
                    break;
                }
            }
        }

        return purchLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnallocatedMiscCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are unallocated miscellaneous charges for the current purchase order.
    /// </summary>
    /// <returns>
    /// true if there are unallocated miscellaneous charges for the current purchase order; otherwise, false.
    /// </returns>
    public boolean existUnallocatedMiscCharge()
    {
        MarkupTrans markupTrans;

        select firstonly RecId from markupTrans
            where markupTrans.TransTableId == this.TableId
               && markupTrans.TransRecId == this.RecId;

        return markupTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureJourSortedList_RU</Name>
				<Source><![CDATA[
    // Returns all factures created on this purch order
    [Hookable(false), Wrappable(false)]
    public RecordSortedList factureJourSortedList_RU()
    {
        return this.salesPurchTableInterface().factureJourSortedList_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    boolean  fieldChanged(FieldId  fieldId)
    {
        boolean  ok = false;

        if (!this.RecId)
            ok = true;

        if (this.orig().(fieldId) != this.(fieldId))
            ok = true;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPackingSlipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first delivery date for the packing slip.
    /// </summary>
    /// <returns>
    /// The delivery date.
    /// </returns>
    display TransDate firstPackingSlipDate()
    {
        VendPackingSlipPurchLink    vendPackingSlipPurchLink;

        return (select minof(DeliveryDate) from vendPackingSlipPurchLink
                    where vendPackingSlipPurchLink.OrigPurchId == this.PurchId).DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>BudgetCheckResult</c> value for the given <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_includeLines">
    /// A boolean value to determine whether it is needed to include lines to result or not.
    /// </param>
    /// <returns>
    /// A <c>BudgetCheckResult</c> value which is calculated using the query.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult(boolean _includeLines = false)
    {
        BudgetSourceSourceDocumentHeader budgetSourceSourceDocumentHeader;

        // Get the budget check result for the header only, exclude the line results
        budgetSourceSourceDocumentHeader = BudgetSourceSourceDocumentHeader::newBudgetSourceSourceDocumentHeader(this.SourceDocumentHeader);

        return budgetSourceSourceDocumentHeader.getHeaderBudgetCheckResult(_includeLines ? 0 : tableNum(PurchLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the delivery entity record based on the postal address.
    /// </summary>
    /// <returns>
    ///    A <c>CompanyInfo</c>, <c>InventLocation</c> or <c>InventSite</c> record.
    /// </returns>
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalDiscPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the date for which the total discount should be calculated according to the price date
    /// type setting.
    /// </summary>
    /// <returns>
    /// The date for which the total discount must be calculated.
    /// </returns>
    /// <remarks>
    /// The price date type can be set up to use today or the delivery date as the price date.
    /// </remarks>
    PriceDate getFinalDiscPriceDate()
    {
        PurchParameters         purchParameters;
        // <GEERU>
        #ISOCountryRegionCodes
        PurchLine               purchLine;
        PurchLine_W             purchLine_W;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            PriceAgreementDate_RU priceAgreementDate = this.salesPurchTableInterface().getPriceAgreementDate();
            if (! priceAgreementDate)
            {
                select minof(PriceAgreementDate_RU) from purchLine_W
                    exists join purchLine
                        where purchLine.RecId    == purchLine_W.PurchLine
                            && purchLine.PurchId == this.PurchId;

                priceAgreementDate = purchLine_W.PriceAgreementDate_RU;
            }

            if (priceAgreementDate)
            {
                return priceAgreementDate;
            }
        }
        // </GEERU>

        purchParameters = PurchParameters::find();

        switch (purchParameters.PriceDateType)
        {
            case PurchPriceDateType::DeliveryDate:
                return (select minof(DeliveryDate) from purchLine
                    where purchLine.PurchId         == this.PurchId
                       && !purchLine.IsDeleted).DeliveryDate;

            case PurchPriceDateType::Today:
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.getFinalDiscPriceDateDelegate(purchParameters.PriceDateType, result);

                if (result.hasResult())
                {
                    return result.result();
                }
                else
                {
                    throw error(strFmt("@SCM:PurchPriceDateNotFound", purchParameters.PriceDateType));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalDiscPriceDateDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the date for which to calculate the price.
    /// </summary>
    /// <param name = "_purchPriceDateType">An <c>PurchPriceDateType</c> value.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    delegate void getFinalDiscPriceDateDelegate(
        PurchPriceDateType          _purchPriceDateType,
        EventHandlerResult          _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastAccountingEventDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the accounting date of the last accounting event for the purchase order.
    /// </summary>
    /// <returns>
    /// The accounting date of the last accounting event for the purchase order.
    /// </returns>
    public AccountingDate getLastAccountingEventDate()
    {
        return this.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIssueFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether an incoming fiscal document should be generated at invoice posting.
    /// </summary>
    /// <returns>
    ///     true if an incoming fiscal document should be generated; Otherwise, false.
    /// </returns>
    public boolean hasIssueFiscalDocument()
    {
        if (this.PurchaseType == PurchaseType::ReturnItem)
        {
            return true;
        }
        else
        {
            return this.vendTable_OrderAccount().NonTaxable_BR == NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithoutRefrence_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if any line has no original invoice.
    /// </summary>
    /// <returns>
    /// true if any lines don't have original invoice; otherwise, false.
    /// </returns>
    public boolean hasLinesWithoutRefrence_MY()
    {
        PurchLine           purchLine;
        PurchLine_W         purchLine_W;

        select firstOnly purchLine
            where purchLine.PurchId             == this.PurchId
            notexists join purchLine_W
            where purchLine_W.PurchLine         == purchLine.RecId
               && purchLine_W.RefInvoiceId_MY   != "";
        if (purchLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithRefrence_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if any line has original invoice.
    /// </summary>
    /// <returns>
    /// true if any lines have original invoice; otherwise, false.
    /// </returns>
    public boolean hasLinesWithRefrence_MY()
    {
        PurchLine           purchLine;
        PurchLine_W         purchLine_W;

        select firstOnly purchLine
            where purchLine.PurchId             == this.PurchId
            exists join purchLine_W
            where purchLine_W.PurchLine         == purchLine.RecId
               && purchLine_W.RefInvoiceId_MY   != "";
        if (purchLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>icCheckUpdateHeaderDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if prices and disounts can be updated in the context of intercompany.
    /// </summary>
    /// <returns>
    ///     true if the context is not intercompany or if the context is intercompany and prices and discounts can be updated; otherwise, false.
    /// </returns>
    public boolean icCheckUpdateHeaderDiscounts()
    {
        return !this.isInterCompanyOrder()
            || (this.PurchaseType != PurchaseType::ReturnItem
                && this.interCompanyEndpointActionPolicy().PriceDiscountSearch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocumentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fiscal document type; implemented in derived classes.
    /// </summary>
    public void initFiscalDocumentType_BR()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContactInfo</Name>
				<Source><![CDATA[
    public void initFromContactInfo()
    {
        ContactPerson contactPerson = this.contactPerson();

        if (contactPerson)
        {
            this.url = contactPerson.url();
            this.Email = contactPerson.email();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayment</Name>
				<Source><![CDATA[
    public void initFromPayment()
    {
        // <GEERU><GEEU>
        PurchTable_W       purchTable_W;
        #EECountryRegionCodes
        // </GEERU></GEEU>

        this.PaymentSched = this.payment().PaymSched;
        this.FixedDueDate = dateNull();

        // <GEERU><GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            if (! PaymTerm::isEmplAccountUsed_RU(this.Payment))
            {
                purchTable_W = this.purchTable_W();
                purchTable_W.EmplAccount_RU =  "";
                this.packPurchTable_W(purchTable_W);
            }
        }
        else
        {
            this.CashDisc = "";
        }
        // </GEERU></GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceTable</Name>
				<Source><![CDATA[
    public void initFromProjInvoiceTable()
    {
        ProjTable           projTable;
        ProjInvoiceTable    projInvoiceTable;
        #ISOCountryRegionCodes

        projTable               = this.projTable();
        projInvoiceTable        = projTable.projInvoice();

        this.TransactionCode    = projInvoiceTable.TransactionCodeId;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            this.BankCentralBankPurposeCode = projInvoiceTable.BankCentralBankPurposeCode;
            this.BankCentralBankPurposeText = projInvoiceTable.BankcentralBankPurposeText;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a <c>PurchTable</c> record with values based on <c>PurchAgreementHeader</c> record.
    /// </summary>
    /// <param name="_purchAgreementHeader">
    /// A record of the table <c>PurchAgreementHeader</c>.
    /// </param>
    /// <param name="_copyDeliveryLocation">
    /// When set to true delivery location is copyed from <c>PurchAgreementHeader</c>.
    /// Default is true.
    /// </param>
    /// <param name="_copyCurrencyCode">
    /// When set to true Currency code is copyed from <c>PurchAgreementHeader</c>.
    /// Default is false.
    /// </param>
    public void initFromPurchAgreementHeader(PurchAgreementHeader _purchAgreementHeader, boolean _copyDeliveryLocation = true, boolean _copyCurrencyCode = false)
    {
        AgreementHeaderDefault      agreementHeaderDefault;
        PurchAgreementHeaderDefault purchAgreementHeaderDefault;
        CashDisc                    cashDisc;
        // <GEERU>
        #ISOCountryRegionCodes
        PurchAgreementHeaderExt_RU  purchAgreementHeaderExt;
        PurchTable_RU               purchTable_RU;
        // </GEERU>

        select firstonly DeliveryPostalAddress, DeliveryName, Project, ContactPerson,
                         CashDiscountCode, MiscChargeGroup, DeliveryTerm, DeliveryMode,
                         PaymentSchedule, PaymentTerms
            from agreementHeaderDefault
            where agreementHeaderDefault.AgreementHeader == _purchAgreementHeader.RecId
            join firstonly    MethodOfPayment
                            , PaymentSpecification
                            , BuyerGroup
                            , VendorInvoiceAccount
                            , PurchasePool
                from purchAgreementHeaderDefault
                where purchAgreementHeaderDefault.PurchaseAgreementHeader == _purchAgreementHeader.RecId
            // <GEERU>
            outer join firstonly RecId,
                                 InventProfileType,
                                 InventProfileId,
                                 VendPostingProfile,
                                 vatOperationCode,
                                 vatChargeSource
            from purchAgreementHeaderExt
            where purchAgreementHeaderExt.AgreementHeader == _purchAgreementHeader.RecId
            // </GEERU>
            ;

        this.MatchingAgreement = _purchAgreementHeader.RecId;

        // <SCM>
        // Merge dimension from AgeementHeader and currently set on the PurchTable record
        this.DefaultDimension = this.mergeDimension(_purchAgreementHeader.DefaultDimension, this.DefaultDimension);
        //</SCM>

        if (_copyDeliveryLocation)
        {
            this.DeliveryPostalAddress = agreementHeaderDefault.DeliveryPostalAddress;
            this.DeliveryName = agreementHeaderDefault.DeliveryName;
        }

        if (_copyCurrencyCode)
        {
            this.CurrencyCode = _purchAgreementHeader.Currency;
        }

        if (agreementHeaderDefault.Project)
        {
            this.ProjId = agreementHeaderDefault.Project;
        }

        if (agreementHeaderDefault.ContactPerson)
        {
            this.ContactPersonId = agreementHeaderDefault.ContactPerson;
        }

        if (agreementHeaderDefault.MiscChargeGroup)
        {
            this.MarkupGroup = agreementHeaderDefault.MiscChargeGroup;
        }

        if (agreementHeaderDefault.DeliveryTerm)
        {
            this.DlvTerm = agreementHeaderDefault.DeliveryTerm;
        }

        if (agreementHeaderDefault.DeliveryMode)
        {
            this.DlvMode = agreementHeaderDefault.DeliveryMode;
        }

        if (agreementHeaderDefault.PaymentSchedule)
        {
            this.PaymentSched = agreementHeaderDefault.PaymentSchedule;
        }

        if (agreementHeaderDefault.PaymentTerms)
        {
            this.Payment = agreementHeaderDefault.PaymentTerms;
        }

        if (agreementHeaderDefault.CashDiscountCode)
        {
            // If CashDiscountCode is set for agreement header, query cash discount record and set proper CashDiscPercent value from it.
            cashDisc = CashDisc::find(agreementHeaderDefault.CashDiscountCode);
            this.CashDiscPercent = (cashDisc.RecId) ? cashDisc.Percent : 0.0;
            this.CashDisc = agreementHeaderDefault.CashDiscountCode;
        }

        if (purchAgreementHeaderDefault.MethodOfPayment)
        {
            this.PaymMode = purchAgreementHeaderDefault.MethodOfPayment;
        }

        if (purchAgreementHeaderDefault.PaymentSpecification)
        {
            this.PaymSpec = purchAgreementHeaderDefault.PaymentSpecification;
        }

        if (purchAgreementHeaderDefault.BuyerGroup)
        {
            this.ItemBuyerGroupId = purchAgreementHeaderDefault.BuyerGroup;
        }

        if (purchAgreementHeaderDefault.PurchasePool)
        {
            this.PurchPoolId = purchAgreementHeaderDefault.PurchasePool;
        }

        if (purchAgreementHeaderDefault.VendorInvoiceAccount)
        {
            // Copy VendorInvoiceAccount from Agreement ONLY if it is not-empty.
            this.InvoiceAccount = purchAgreementHeaderDefault.VendorInvoiceAccount;
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = this.purchTable_RU();

            this.CurrencyCode     = _purchAgreementHeader.Currency;
            this.LanguageId       = _purchAgreementHeader.Language;

            purchTable_RU.AgreementHeaderExt_RU = purchAgreementHeaderExt.RecId;

            this.DefaultDimension = this.copyDimension(_purchAgreementHeader.DefaultDimension);

            if (purchAgreementHeaderExt.InventProfileType || purchAgreementHeaderExt.InventProfileId)
            {
                purchTable_RU.InventProfileType_RU = purchAgreementHeaderExt.InventProfileType;
                purchTable_RU.InventProfileId_RU   = purchAgreementHeaderExt.InventProfileId;
            }

            if (purchAgreementHeaderExt.VendPostingProfile)
            {
                this.PostingProfile = purchAgreementHeaderExt.VendPostingProfile;
            }

            purchTable_RU.vatOperationCode_RU = purchAgreementHeaderExt.vatOperationCode;
            purchTable_RU.vatChargeSource_RU  = purchAgreementHeaderExt.vatChargeSource;

            this.packPurchTable_RU(purchTable_RU);

            if (this.PaymentSched)
            {
                this.FixedDueDate = dateNull();
            }

            if (purchAgreementHeaderExt.VendPostingProfile)
            {
                this.PostingProfile = purchAgreementHeaderExt.VendPostingProfile;
            }
        }
        // </GEERU>

        TMSPurchTable::initFromTMSPurchAgreement(this.PurchId, _purchAgreementHeader.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQReplyTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>PurchTable</c> table buffer based on an <c>PurchRFQReplyTable</c> table buffer.
    /// </summary>
    /// <param name="_purchRFQReplyTable">
    ///    The <c>PurchRFQReplyTable</c> table buffer that is to initialize <c>PurchTable</c> table buffer from.
    /// </param>
    public void initFromPurchRFQReplyTable(PurchRFQReplyTable    _purchRFQReplyTable)
    {
        this.Payment        = _purchRFQReplyTable.Payment;
        this.CurrencyCode   = _purchRFQReplyTable.CurrencyCode;
        this.DlvTerm        = _purchRFQReplyTable.DlvTerm;
        this.DlvMode        = _purchRFQReplyTable.DlvMode;
        this.DiscPercent    = _purchRFQReplyTable.DiscPercent;
        this.DeliveryDate   = _purchRFQReplyTable.DeliveryDate;
        this.VendorRef      = _purchRFQReplyTable.VendRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchTable</c> record from a <c>PurchRFQTable</c> record.
    /// </summary>
    /// <param name="_purchRFQTable">
    ///    The <c>PurchRFQTable</c> record from which to initialize.
    /// </param>
    public void initFromPurchRFQTable(PurchRFQTable    _purchRFQTable)
    {
        // <GBR>
        PurchTable_BR       purchTable_BR;
        // </GBR>

        this.PurchaseType               = PurchaseType::Purch;
        this.LanguageId                 = _purchRFQTable.LanguageId;
        this.Payment                    = _purchRFQTable.Payment;
        this.PaymMode                   = _purchRFQTable.PaymMode;
        this.PaymSpec                   = _purchRFQTable.PaymSpec;
        this.PaymentSched               = _purchRFQTable.PaymentSched;
        if (_purchRFQTable.NumberSequenceGroup)
        {
            this.NumberSequenceGroup    =  _purchRFQTable.NumberSequenceGroup;
        }
        this.CashDisc                   = _purchRFQTable.CashDisc;
        if (this.CashDisc)
        {
            this.CashDiscPercent        = CashDisc::find(_purchRFQTable.CashDisc).Percent;
        }
        this.EndDisc                    = _purchRFQTable.EndDisc;

        this.CurrencyCode               = _purchRFQTable.CurrencyCode;
        this.DlvTerm                    = _purchRFQTable.DlvTerm;
        this.DlvMode                    = _purchRFQTable.DlvMode;
        this.DefaultDimension           =  this.copyDimension(_purchRFQTable.DefaultDimension);
        this.TaxGroup                   = _purchRFQTable.TaxGroup;
        this.InclTax                    = _purchRFQTable.InclTax;

        this.DeliveryPostalAddress      = _purchRFQTable.DeliveryPostalAddress;
        this.AddressRefRecId            = _purchRFQTable.AddressRefRecId;
        this.AddressRefTableId          = _purchRFQTable.AddressRefTableId;
        this.InventSiteId               = _purchRFQTable.InventSiteId;
        this.InventLocationId           = _purchRFQTable.InventLocationId;

        this.ProjId                     = _purchRFQTable.ProjId;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            purchTable_BR = this.purchTable_BR();
            purchTable_BR.VendFinalUser_BR           = _purchRFQTable.VendFinalUser_BR;
            purchTable_BR.ServiceCodeOnDlvAddress_BR = _purchRFQTable.ServiceCodeOnDlvAddress_BR;
            purchTable_BR.SalesPurchOperationType_BR = _purchRFQTable.SalesPurchOperationType_BR;
            this.packPurchTable_BR(purchTable_BR);

            this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchTable</c> record from another purchase order record.
    /// </summary>
    /// <param name="_purchTable">
    ///    The purchase order from which to initialize.
    /// </param>
    public void initFromPurchTable(PurchTable _purchTable)
    {
        PurchTable_BR                       purchTable_BR, fromPurchTable_BR;
        // <GMY>
        PurchTable_W                        purchTable_W;
        // </GMY>

        this.LanguageId                 = _purchTable.LanguageId;
        this.Payment                    = _purchTable.Payment;
        this.PaymMode                   = _purchTable.PaymMode;
        this.PaymSpec                   = _purchTable.PaymSpec;
        this.NumberSequenceGroup        = _purchTable.NumberSequenceGroup;
        this.CashDisc                   = _purchTable.CashDisc;
        this.CashDiscPercent            = _purchTable.CashDiscPercent;
        this.DiscPercent                = _purchTable.DiscPercent;
        this.CurrencyCode               = _purchTable.CurrencyCode;
        this.DlvTerm                    = _purchTable.DlvTerm;
        this.DlvMode                    = _purchTable.DlvMode;
        this.DefaultDimension           = this.copyDimension(_purchTable.DefaultDimension);
        this.TaxGroup                   = _purchTable.TaxGroup;
        this.InclTax                    = _purchTable.InclTax;
        this.Transport                  = _purchTable.Transport;
        this.Port                       = _purchTable.Port;
        this.StatProcId                 = _purchTable.StatProcId;
        this.AccountingDistributionTemplate = _purchTable.AccountingDistributionTemplate;

        if (!this.RecId || !this.skipAddressFields())
        {
            this.DeliveryPostalAddress      = _purchTable.DeliveryPostalAddress;
            this.AddressRefRecId            = _purchTable.AddressRefRecId;
            this.AddressRefTableId          = _purchTable.AddressRefTableId;
        }

        if (BrazilParameters::isEnabled())
        {
            fromPurchTable_BR = _purchTable.purchTable_BR();

            purchTable_BR = this.purchTable_BR();

            purchTable_BR.CFPSId_BR                     = fromPurchTable_BR.CFPSId_BR;
            purchTable_BR.PresenceType                  = fromPurchTable_BR.PresenceType;
            purchTable_BR.SalesPurchOperationType_BR    = fromPurchTable_BR.SalesPurchOperationType_BR;
            purchTable_BR.ServiceCodeOnDlvAddress_BR    = fromPurchTable_BR.ServiceCodeOnDlvAddress_BR;
            purchTable_BR.VendFinalUser_BR              = fromPurchTable_BR.VendFinalUser_BR;
            purchTable_BR.VendFineSetup_BR              = fromPurchTable_BR.VendFineSetup_BR;
            purchTable_BR.VendInterestSetup_BR          = fromPurchTable_BR.VendInterestSetup_BR;

            this.packPurchTable_BR(purchTable_BR);
        }

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            purchTable_W                = this.purchTable_W();
            purchTable_W.InvoiceType_MY = _purchTable.purchTable_W().InvoiceType_MY;
            this.packPurchTable_W(purchTable_W);
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTableHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the history record that is based on the specified <c>PurchTableHistory</c> record.
    /// </summary>
    /// <param name="_purchTableHistory">
    /// A <c>PurchTableHistory</c> record on which to base initialization.
    /// </param>
    public void initFromPurchTableHistory(PurchTableHistory _purchTableHistory)
    {
        // <GEEU>
        #ISOCountryRegionCodes
        // </GEEU>
        // <GEERU>
        PurchTableMap_RU        purchTableMap_RU;
        PurchTable_RU           purchTable_RU;
        // </GEERU>
        PurchTableMap_W         purchTableMap_W;
        PurchTable_W            purchTable_W;
        // <GBR>
        PurchTableMap_BR        purchTableMap_BR;
        PurchTable_BR           purchTable_BR;
        // </GBR>

        this.purchTableVersioning().copyVersion(_purchTableHistory.purchTableVersioning());

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            // Reset and copy the TransportationDocument reference as it is required to be unique.
            this.TransportationDocument = 0;
            TransportationDocument::copy(_purchTableHistory, this);
        }

        // <GEERU>
        if (PurchTable_RU::isExtensionEnabled())
        {
            purchTableMap_RU.data(_purchTableHistory.purchTableHistory_RU());
            purchTable_RU.data(purchTableMap_RU.data());
            this.SysExtensionSerializerMap::packExtensionTable(purchTable_RU);
        }
        // </GEERU>
        // <GBR>
        if (PurchTable_BR::isExtensionEnabled())
        {
            purchTableMap_BR.data(_purchTableHistory.purchTableHistory_BR());
            purchTable_BR.data(purchTableMap_BR.data());
            this.SysExtensionSerializerMap::packExtensionTable(purchTable_BR);
        }
        // </GBR>
        if (PurchTable_W::isExtensionEnabled())
        {
            purchTableMap_W.data(_purchTableHistory.purchTableHistory_W());
            purchTable_W.data(purchTableMap_W.data());
            this.SysExtensionSerializerMap::packExtensionTable(purchTable_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchTable</c> record from a <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_salesTable">
    ///    The <c>SalesTable</c> record from which to initialize.
    /// </param>
    public void initFromSalesTable(SalesTable _salesTable)
    {
        this.InterCompanyOriginalSalesId        = _salesTable.SalesId;
        this.InterCompanyOriginalCustAccount    = _salesTable.CustAccount;
        this.InterCompanyDirectDelivery         = _salesTable.InterCompanyDirectDelivery;
        this.VendorRef                          = _salesTable.CustomerRef;
        this.PurchOrderFormNum                  = _salesTable.PurchOrderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>PurchTable</c> table buffer based on an <c>VendInvoiceJour</c> table buffer.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    ///    The <c>VendInvoiceJour</c> table buffer that is to initialize <c>PurchTable</c> table buffer from.
    /// </param>
    public void initFromVendInvoiceJour(VendInvoiceJour _vendInvoiceJour)
    {
        // <GMY>
        PurchTable_W                        purchTable_W;
        // </GMY>

        this.Payment                    = _vendInvoiceJour.Payment;
        this.NumberSequenceGroup        = _vendInvoiceJour.NumberSequenceGroup;
        this.CashDisc                   = _vendInvoiceJour.CashDiscCode;
        this.CashDiscPercent            = _vendInvoiceJour.CashDiscPercent;

        this.CurrencyCode               = _vendInvoiceJour.CurrencyCode;
        this.DefaultDimension           = this.copyDimension(_vendInvoiceJour.DefaultDimension);
        this.InclTax                    = _vendInvoiceJour.InclTax;

        // <GEELV>
        this.IntrastatAddValue_LV       = _vendInvoiceJour.IntrastatAddValue_LV;
        // </GEELV>

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            purchTable_W                = this.purchTable_W();
            purchTable_W.InvoiceType_MY = _vendInvoiceJour.vendInvoiceJour_W().InvoiceType_MY;
            this.packPurchTable_W(purchTable_W);
        }
        // </GMY>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.PostingProfile                   = _vendInvoiceJour.PostingProfile;
            this.NumberSequenceGroup              = _vendInvoiceJour.NumberSequenceGroup;

            PurchTable_BR purchTable_BR = this.purchTable_BR();
            purchTable_BR.ServiceCodeOnDlvAddress_BR    = _vendInvoiceJour.ServiceCodeOnDlvAddress_BR;
            purchTable_BR.SalesPurchOperationType_BR    = _vendInvoiceJour.SalesPurchOperationType_BR;
            purchTable_BR.CFPSId_BR                     = _vendInvoiceJour.fiscalDocument_BR().CFPSId;
            purchTable_BR.VendFinalUser_BR              = _vendInvoiceJour.VendFinalUser_BR;
            this.packPurchTable_BR(purchTable_BR);
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>PurchTable</c> table buffer based on an <c>VendPackingSlipJour</c> table buffer.
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    ///    The <c>VendPackingSlipJour</c> table buffer that is to initialize <c>PurchTable</c> table buffer from.
    /// </param>
    public void  initFromVendPackingSlipJour(VendPackingSlipJour _vendPackingSlipJour)
    {
        this.DlvTerm                = _vendPackingSlipJour.DlvTerm;
        this.DlvMode                = _vendPackingSlipJour.DlvMode;
        this.DefaultDimension       = this.copyDimension(_vendPackingSlipJour.DefaultDimension);

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(_vendPackingSlipJour, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchTable</c> record from a <c>VendTable</c> record.
    /// </summary>
    /// <param name="_vendTable">
    ///    The vendor record from which to initialize; optional.
    /// </param>
    public void  initFromVendTable(VendTable _vendTable = this.vendTable_OrderAccount())
    {
        container               purchTableContainer;
        PaymTerm                paymTerm;
        #ISOCountryRegionCodes

        purchTableContainer = PurchTable::initFromVendTableIL([buf2Con(this, true), buf2Con(_vendTable, true)]);

        this.con2buf(purchTableContainer);

        if (PublicSectorUtils::isFrenchRegulatoryEnabled() && !this.Payment)
        {
            paymTerm = PaymTerm::getDefaultPaymTerm();

            if (paymTerm.RecId)
            {
                this.Payment = paymTerm.PaymTermId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTableMandatoryFields</Name>
				<Source><![CDATA[
    public void  initFromVendTableMandatoryFields()
    {
        VendTable  vendTable = this.vendTable_OrderAccount();
        // <GEERU>
        PurchTable_RU   purchTable_RU;
        #isoCountryRegionCodes
        // </GEERU>

        this.VendGroup                  = vendTable.VendGroup;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = this.purchTable_RU();
            purchTable_RU.vatOperationCode_RU   = vendTable.vatOperationCode_RU;
            this.packPurchTable_RU(purchTable_RU);
        }
        // </GEERU>
        this.ChangeRequestRequired      = (PurchParameters::find().ChangeRequestAllowOverride && vendTable.ChangeRequestOverride) ? vendTable.ChangeRequestEnabled : PurchParameters::find().ChangeRequestEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventProfileId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes <c>InventProfileId_RU</c> fields for purchase order.
    /// </summary>
    public void initInventProfileId_RU()
    {
        PurchTable_RU purchTable_RU = this.purchTable_RU();

        purchTable_RU.InventProfileId_RU   = PurchParameters::find().InventProfileId_RU;
        purchTable_RU.InventProfileType_RU = InventProfile_RU::find(purchTable_RU.InventProfileId_RU).InventProfileType;
        this.packPurchTable_RU(purchTable_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceAccount</Name>
				<Source><![CDATA[
    void  initInvoiceAccount()
    {
        VendTable   vendTable       = this.vendTable_InvoiceAccount();
        // <GEEU>
        #ISOCountryRegionCodes
        // </GEEU>
        ;

        this.NumberSequenceGroup    = vendTable.NumberSequenceGroup;
        this.Payment                = vendTable.PaymTermId;

        this.initFromPayment();

        if (vendTable.PaymSched)
            this.PaymentSched       = vendTable.PaymSched;

        this.PaymMode               = vendTable.PaymMode;
        this.PaymSpec               = vendTable.PaymSpec;

        this.CashDisc               = vendTable.CashDisc;
        this.setListCode();

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV, #isoLT]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00005, funcName());

            this.InvoiceAutoNumbering_LT         = LtInvoiceAutoNumberingGroups::autoNumberingForPurchInvoice(this.InvoiceAccount);
            this.PackingSlipAutoNumbering_LT     = LtInvoiceAutoNumberingGroups::autoNumberingForPurchPackingSlip(this.InvoiceAccount);
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxDefaultsFromInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies fiscal data fields from the invoice account.
    /// </summary>
    private void initTaxDefaultsFromInvoiceAccount()
    {
        VendTable vendTable = this.vendTable_InvoiceAccount();

        this.vatNum = vendTable.vatNum;
        this.setTaxGroup(vendTable.TaxGroup);
        this.VendGroup = vendTable.VendGroup;
        VendParameters vendParameters = VendParameters::find();
        if (vendParameters.VendNameFromVATNum)
        {
            LogisticsPostalAddress logisticsPostalAddress = DirParty::primaryPostalAddress(vendTable.Party,
                DateTimeUtil::newDateTime(this.DeliveryDate, 0, DateTimeUtil::getCompanyTimeZone()));

            this.setNameUsingVATNum(vendTable.vatNum, logisticsPostalAddress.CountryRegionId, vendTable.name(), vendParameters);
        }
        else
        {
            this.PurchName = vendTable.name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue(PurchaseType  _purchaseType = PurchParameters::find().PurchaseType)
    {
        PurchTableType  purchTableType;

        this.PurchaseType   = _purchaseType;

        super();

        purchTableType = this.type();
        purchTableType.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void  insert(boolean _interCompanySilent = false,
                 AccountingDate _accountingDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone())))
    {
        if (!this.PurchId)
        {
            throw(error(strFmt("@SYS26332", fieldPName(PurchTable, PurchId))));
        }

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        this.type().inserting();

        PurchTableType purchTableType = this.type();

        if (this.ProjId &&
            !this.InterCompanyOriginalSalesId &&
            ProjParameters::find().CreateItemReqForPO == NoYes::Yes)
        {
            ProjTable   projTable = this.projTable();
            SalesTable  salesTable = projTable.salesTable_ItemReq(projTable.currencyId());

            if (!salesTable && (ProjFundingSource::findCustAccount(projTable.ProjInvoiceProjId) || projTable.CustAccount))
            {
                salesTable = projTable.createSalesTable_ItemReq(projTable.currencyId());
            }
            if (salesTable)
            {
                this.initFromSalesTable(salesTable);
            }
        }

        if (this.DlvMode)
        {
            purchTableType.tmsModifiedDlvMode(true);
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setInventProfileId_RU();
            this.initInventProfileId_RU();
        }
        // </GEERU>

        this.IsModified = NoYes::Yes;
        this.ExchangeRateDate = this.AccountingDate;
        VersioningPurchaseOrder::newPurchaseOrder(this).initiate();

        if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
        &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
        {
            InterCompanySyncPurchTableType syncEngine = purchTableType.interCompanySyncEngine();
            syncEngine.parmShowSyncCompletedMessage(!_interCompanySilent);
            syncEngine.synchronize();
        }

        this.SourceDocumentHeader = 0;
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);

        this.SourceDocumentLine = 0;
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        super();

        this.SysExtensionSerializerMap::postInsert();

        if (this.OneTimeVendor  && !this.OrderAccount)
        {
            this.createOneTimeAccount();
        }
        else
        {
            this.transferToOneTimeVendor();
        }

        if (this.PurchaseType != PurchaseType::ReturnItem
        || (this.PurchaseType == PurchaseType::ReturnItem &&
            this.SkipUpdate   == InterCompanySkipUpdate::No))
        {    
            this.createMarkupTrans(false);
        }
        if (this.InterCompanyOriginalSalesId)
        {
            this.interCompanyPurchSalesReferenceCreate();
        }

        if (this.InterCompanySalesId)
        {
            purchTableType.forceIntercompanyLineSynchronization();
        }

        if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
        &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
        {
            purchTableType.interCompanyMarkupMirror();
        }

        this.SkipUpdate = InterCompanySkipUpdate::No;
        this.doUpdate();

        if (BrazilParameters::isEnabled())
        {
            purchTableType.updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CustVend);
        }

        TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Vendor, this.RecId, this.InvoiceAccount, TradeBLWITypeOfForm::PurchTable);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            PurchTotalsSummaryController::onInsert(this);
        }

        this.type().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyAllowIndirectCreationOrig</Name>
				<Source><![CDATA[
    display InterCompanyAllowIndirectCreationTxt interCompanyAllowIndirectCreationOrig()
    {
        InterCompanyAllowIndirectCreationTxt interCompanyAllowIndirectCreationTxt;

        if (this.InterCompanyDirectDelivery
        && !this.InterCompanyAllowIndirectCreation)
        {
            interCompanyAllowIndirectCreationTxt = "@SYS95179";
        }
        return interCompanyAllowIndirectCreationTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCheckCurrency</Name>
				<Source><![CDATA[
    boolean interCompanyCheckCurrency()
    {
        MarkupTrans     markupTrans;

        if (this.isInterCompanyOrder()
        &&  this.CurrencyCode != this.orig().CurrencyCode)
        {
            if (PurchLine::exist(this.PurchId))
                return checkFailed("@SYS105402");

            select firstonly markupTrans
                   index hint TableRecIdIdx
                   where markupTrans.TransTableId == this.TableId
                   &&    markupTrans.TransRecId   == this.RecId
                   &&   !markupTrans.IsDeleted;
            if (markupTrans)
            {
                return checkFailed("@SYS105402");
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyEndpointActionPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany trading policy for the current <c>PurchTable</c> table record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyEndpointActionPolicy</c> table; otherwise, an empty record.
    /// </returns>
    public InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy(boolean   _forUpdate = false)
    {
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy;

        changecompany (
                       this.company()
                       )
        {
            interCompanyEndpointActionPolicy = VendTable::find(this.OrderAccount).interCompanyTradingPartner().interCompanyEndpointActionPolicy(_forUpdate);
        }
        return interCompanyEndpointActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyOriginDisplay</Name>
				<Source><![CDATA[
    display InterCompanyOriginDisplay interCompanyOriginDisplay()
    {
        InterCompanyOriginDisplay   interCompanyOriginDisplay;
        DictEnum                    dictEnum = new DictEnum(enumNum(InterCompanyOrigin));

        if (this.InterCompanyOrder)
        {
            interCompanyOriginDisplay = dictEnum.value2Name(this.InterCompanyOrigin);
        }
        return interCompanyOriginDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPurchSalesReferenceCreate</Name>
				<Source><![CDATA[
    void interCompanyPurchSalesReferenceCreate(SalesId _origSalesId = this.InterCompanyOriginalSalesId)
    {
        InterCompanyPurchSalesReference     interCompanyPurchSalesReference;

        if (this.PurchId
        &&  _origSalesId)
        {
            ttsbegin;
            select firstonly interCompanyPurchSalesReference
                   index hint SalesPurchIdx
                   where interCompanyPurchSalesReference.SalesId == _origSalesId
                   &&    interCompanyPurchSalesReference.PurchId == this.PurchId;

            if (!interCompanyPurchSalesReference)
            {
                interCompanyPurchSalesReference.clear();
                interCompanyPurchSalesReference.SalesId = _origSalesId;
                interCompanyPurchSalesReference.PurchId = this.PurchId;
                interCompanyPurchSalesReference.insert();
            }
            ttscommit;
        }

        if (this.PurchId
        &&  this.InterCompanyOriginalSalesId
        &&  this.InterCompanyOriginalSalesId != _origSalesId)
        {
            this.InterCompanyOriginalSalesId     = '';
            this.InterCompanyOriginalCustAccount = '';
            this.InterCompanyOrigin              = InterCompanyOrigin::Source;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesInfo</Name>
				<Source><![CDATA[
    public container interCompanySalesInfo()
    {
        SalesTable              salesTable;
        InterCompanySalesType   salesType;
        SalesStatus             salesStatus;
        DocumentStatus          documentStatus;
        date                    documentDate;
        Num                     documentNum;
        
        if (this.InterCompanyOrder
        &&  this.InterCompanyCompanyId)
        {
            changecompany(this.InterCompanyCompanyId)
            {
                select firstonly SalesId, SalesType, SalesStatus, DocumentStatus, QuotationId from salesTable
                       index hint SalesIdx
                       where salesTable.SalesId == this.InterCompanySalesId;

                if (salesTable.RecId)
                {
                    salesType = enum2Str(salesTable.SalesType);
                }

                salesStatus    = salesTable.SalesStatus;
                documentStatus = salesTable.DocumentStatus;

                switch (salesTable.DocumentStatus)
                {
                    case DocumentStatus::Quotation:
                        documentDate = salesTable.lastQuotationDate();
                        documentNum  = salesTable.lastQuotation();
                        break;
                    case DocumentStatus::Confirmation:
                        documentDate = salesTable.lastConfirmDate();
                        documentNum  = salesTable.lastConfirm();
                        break;
                    case DocumentStatus::PickingList:
                        documentDate = salesTable.lastPickingListDate();
                        documentNum  = salesTable.lastPickingList();
                        break;
                    case DocumentStatus::PackingSlip:
                        documentDate = salesTable.lastPackingSlipDate();
                        documentNum  = salesTable.lastPackingSlip();
                        break;
                    case DocumentStatus::Invoice:
                        documentDate = salesTable.lastInvoiceDate();
                        documentNum  = salesTable.lastInvoice();
                        break;
                }
            }
        }
        return [salesType,salesStatus,documentStatus,documentDate,documentNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the intercompany sales order header record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Specifies whether the intercompany sales order header record should be selected for update.
    /// </param>
    /// <returns>
    ///    The intercompany sales order header record.
    /// </returns>
    public SalesTable  interCompanySalesTable(boolean  _forUpdate = false)
    {
        SalesTable  salesTable;

        if (this.InterCompanyOrder
        &&  this.InterCompanyCompanyId
        &&  TradeInterCompany::checkDataAreaAccess(this.InterCompanyCompanyId,false))
        {
            changecompany(this.InterCompanyCompanyId)
            {
                salesTable = SalesTable::find(this.InterCompanySalesId, _forUpdate);
            }
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySalesTableOriginal</Name>
				<Source><![CDATA[
    SalesTable  interCompanySalesTableOriginal(boolean  _forUpdate = false)
    {
        SalesTable  salesTable;
        if (this.InterCompanyOriginalSalesId)
        {
            changecompany (
                           this.company()
                           )
            {
                salesTable = SalesTable::find(this.InterCompanyOriginalSalesId, _forUpdate);
            }
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingValueMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany trading value mapping for the current <c>PurchTable</c> table record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingValueMap</c> table; otherwise, an empty record.
    /// </returns>
    public InterCompanyTradingValueMap interCompanyTradingValueMap(boolean   _forUpdate = false)
    {
        InterCompanyTradingValueMap     interCompanyTradingValueMap;

        changecompany (
                       this.company()
                       )
        {
            interCompanyTradingValueMap = VendTable::find(this.OrderAccount).interCompanyTradingPartner().interCompanyTradingValueMap(_forUpdate);
        }
        return interCompanyTradingValueMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdateNow</Name>
				<Source><![CDATA[
    boolean  interCompanyUpdateNow()
    {
        boolean  ok;
        // <GEERU>
        #isoCountryRegionCodes
        boolean         isCountryRegionRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        PurchTable_RU   purchTable_RU;
        // </GEERU>

        if (!this.RecId)
        {
            ok = true;
        }

        // <GEERU>
        if (isCountryRegionRU)
        {
            purchTable_RU = this.purchTable_RU();
        }
        // </GEERU>

        if (this.orig().PurchaseType                      != this.PurchaseType
        ||  this.orig().CurrencyCode                      != this.CurrencyCode
        ||  this.orig().DlvTerm                           != this.DlvTerm
        ||  this.orig().DlvMode                           != this.DlvMode
        ||  this.orig().DeliveryDate                      != this.DeliveryDate
        ||  this.orig().ReceiptDateConfirmed              != this.ReceiptDateConfirmed
        ||  this.orig().ShippingDateRequested             != this.ShippingDateRequested
        ||  this.orig().ShippingDateConfirmed             != this.ShippingDateConfirmed
        ||  this.orig().DeliveryPostalAddress             != this.DeliveryPostalAddress
        ||  this.orig().InterCompanyOriginalSalesId       != this.InterCompanyOriginalSalesId
        ||  this.orig().InterCompanyOriginalCustAccount   != this.InterCompanyOriginalCustAccount
        ||  this.orig().InterCompanyDirectDelivery        != this.InterCompanyDirectDelivery
        ||  this.orig().DefaultDimension                  != this.DefaultDimension
        ||  this.orig().InterCompanyCustPurchOrderFormNum != this.InterCompanyCustPurchOrderFormNum
        ||  this.orig().VendorRef                         != this.VendorRef
        ||  this.orig().ReturnItemNum                     != this.ReturnItemNum
        ||  this.orig().DiscPercent                       != this.DiscPercent
        // <GEERU>
        ||  (isCountryRegionRU
            && purchTable_RU.orig().InventProfileId_RU    != purchTable_RU.InventProfileId_RU)
        // </GEERU>
        ||  this.orig().MatchingAgreement                 != this.MatchingAgreement)
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceName</Name>
				<Source><![CDATA[
    display VendName invoiceName()
    {
        return this.vendTable_InvoiceAccount().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankDocumentCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the bank document has been created for this order.
    /// </summary>
    /// <returns>
    /// true if it is created; otherwise, false.
    /// </returns>
    public boolean isBankDocumentCreated()
    {
        return this.isBankLCCreated()
            || this.isBankLGCreated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankLCCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the bank LC has been created for this order.
    /// </summary>
    /// <returns>
    /// true if it is created; otherwise, false.
    /// </returns>
    public boolean isBankLCCreated()
    {
        boolean ret = false;

        if (this.isMarkedForBankLC())
        {
            ret = BankLCImport::existByPurchTable(this.PurchId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankLGCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the Bank LG has been created for this order.
    /// </summary>
    /// <returns>
    /// true if it is created; otherwise, false.
    /// </returns>
    public boolean isBankLGCreated()
    {
        boolean     ret = false;

        if (this.isMarkedForBankLG() && this.BankLGDocumentMap::isLinkedToGuarantee())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancellingFiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the purchase order is for cancelling a fiscal document issued by current fiscal establisment.
    /// </summary>
    /// <returns>
    /// Returns true if the purchase order is for cancelling an original fiscal document issued by current FE; false otherwise.
    /// </returns>
    public boolean isCancellingFiscalDocument_BR()
    {
        PurchTable_BR       purchTable_BR;

        purchTable_BR = this.purchTable_BR();

        return purchTable_BR.isCancellingOrReversingFiscalDocument() && purchTable_BR.isRelatedFiscalDocIssuedByFiscalEstab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancellingPurchaseReturn_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether the purchase order is for cancelling a purchase return previously entered.
    /// </summary>
    /// <returns>
    ///     true if the purchase order is for cancelling a purchase return; false otherwise.
    /// </returns>
    public boolean isCancellingPurchaseReturn_BR()
    {
        PurchTable_BR       purchTable_BR;
        FiscalDocument_BR   fiscalDocumentBeingCancelled;

        purchTable_BR = this.purchTable_BR();

        if (!purchTable_BR.isCancellingOrReversingFiscalDocument())
        {
            return false;
        }

        fiscalDocumentBeingCancelled = FiscalDocument_BR::findByRef(tableNum(VendInvoiceJour), purchTable_BR.InvoiceRefRecId_BR);

        if (fiscalDocumentBeingCancelled.Direction == FiscalDocDirection_BR::Outgoing)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomsImportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the table is in customs import order.
    /// </summary>
    /// <returns>
    /// Returns true if the table is in customs import order.
    /// </returns>
    public boolean isCustomsImportOrder_IN()
    {
        return this.purchTable_W().CustomsImportOrder_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDirectImport_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether a purchase order is a direct import order by checking its CFOP.
    /// </summary>
    /// <returns>
    ///     true if the CFOP is for foreign operations; otherwise false.
    /// </returns>
    public boolean isDirectImport_BR()
    {
        PurchLine purchLine;

        select firstonly cfopTable_BR
            from purchLine
            where purchLine.PurchId == this.PurchId;

        return CFOPTable_BR::find(purchLine.cfopTable_BR).CustVendLocation == CustVendLocation_BR::OutsideCountry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a purchase order is created as a direct delivery order.
    /// </summary>
    /// <returns>
    ///    true if there are direct delivery lines for the purchase order; otherwise, false.
    /// </returns>
    boolean isDropShipment()
    {
        PurchLine   purchLine;

        select firstonly RecId from purchLine
            where purchLine.PurchId         == this.PurchId
               && purchLine.DeliveryType    == TradeLineDlvType::DropShip
               && !purchLine.IsDeleted;

        return purchLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcisable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks to see if any of the lines associated with the current header is a excise type.
    /// </summary>
    /// <returns>
    ///     True, if at least one line is of excise type.
    /// </returns>
    public boolean isExcisable_IN()
    {
        PurchLine                                   purchLine;
        PurchLine_IN                                purchLine_IN;
        TaxOnItem                                   taxOnItem;
        TaxTable                                    taxTable;
        TransitDocumentTransTaxInfoRelation_IN      relation;
        TransTaxInformation                         transTaxInformation;

        select firstOnly RecId, PurchId, PurchQty, PurchaseType from purchLine
            where purchLine.PurchId == this.PurchId
        exists join relation
            where relation.TransactionTableId == purchLine.TableId
                && relation.TransactionRecId == purchLine.RecId
        exists join transTaxInformation
            where transTaxInformation.RecId == relation.TransTaxInformationRecId
                && transTaxInformation.ExciseType == ExciseType_IN::Manufacturer
        exists join taxOnItem
            where taxOnItem.TaxItemGroup == purchLine.TaxItemGroup
        exists join taxTable
            where taxTable.TaxCode == taxOnItem.TaxCode &&
                taxTable.TaxType_IN == TaxType_IN::Excise;

        return (purchLine.RecId && (purchLine.PurchaseType == PurchaseType::ReturnItem || purchLine.creditNoteLine()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinalized</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the purchase order is finalized.
    /// </summary>
    /// <returns>
    ///     True if the purchase order is finalized; oterwise, false
    /// </returns>
    public boolean isFinalized()
    {
        return this.DocumentState == VersioningDocumentState::Finalized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullyInvoicedIncludingPendingInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current purchase order is fully invoiced by either posted invoices or active
    /// invoices.
    /// </summary>
    /// <returns>
    /// true if the purchase order is fully invoiced; otherwise, false.
    /// </returns>
    public boolean isFullyInvoicedIncludingPendingInvoice()
    {
        PurchLine   purchLine;

        //if this is already invoiced fully by a posted PO, it is less expensive to check the purchStatus field and short-circuit everything else.
        if (this.isInvoiced())
        {
            return true;
        }

        //For each purchLine record, make sure that the line is fully invoiced.  If it is not return false.
        while select purchLine
            where purchLine.PurchId == this.PurchId &&
                    purchLine.IsDeleted == NoYes::No
        {
            //if the line is not fully invoiced, then return false
            if (purchLine.RemainPurchFinancial + purchLine.RemainPurchPhysical - purchLine.calcPendingQtyPurch() != 0)
            {
                return false;
            }
        }

        //if we have made it this far then the PO is fully invoiced
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyOrder</Name>
				<Source><![CDATA[
    boolean  isInterCompanyOrder()
    {
        return (this.InterCompanyOrder
            &&  this.InterCompanyCompanyId != ''
            &&  this.SkipUpdate            != InterCompanySkipUpdate::InterCompany
            &&  this.SkipUpdate            != InterCompanySkipUpdate::Both);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase order was partially of fully invoiced.
    /// </summary>
    /// <returns>
    /// true if the order was partially of fully invoiced; otherwise, false.
    /// </returns>
    public boolean isInvoiceMatched()
    {
        if (this.DocumentStatus == DocumentStatus::None ||
            this.DocumentStatus == DocumentStatus::Quotation ||
            this.DocumentStatus == DocumentStatus::PurchaseOrder ||
            this.DocumentStatus == DocumentStatus::Confirmation ||
            this.DocumentStatus == DocumentStatus::PickingList ||
            this.DocumentStatus == DocumentStatus::PackingSlip ||
            this.DocumentStatus == DocumentStatus::ReceiptsList ||
            this.DocumentStatus == DocumentStatus::ConfirmationRequest)
        {
            return false;
        }

        return (select firstonly RecId from vendInvoicePurchLink
            where vendInvoicePurchLink.OrigPurchId == this.PurchId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBackOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order is a back order.
    /// </summary>
    /// <returns>true if the purchase order is a back order; otherwise, false.</returns>
    public boolean isBackOrder()
    {
        return (this.PurchStatus == PurchStatus::BackOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order is invoiced.
    /// </summary>
    /// <returns>true if the purchase order is invoiced; otherwise, false.</returns>
    public boolean isInvoiced()
    {
        return (this.PurchStatus == PurchStatus::Invoiced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order is received.
    /// </summary>
    /// <returns>true if the purchase order is received; otherwise, false.</returns>
    public boolean isReceived()
    {
        return (this.PurchStatus == PurchStatus::Received);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpenOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order is an open order.
    /// </summary>
    /// <returns>true if the purchase order is an open order; otherwise, false.</returns>
    public boolean isOpenOrder()
    {
        return (this.PurchStatus == PurchStatus::Backorder || this.PurchStatus == PurchStatus::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase order is canceled.
    /// </summary>
    /// <returns>true if the purchase order is canceled; otherwise, false.</returns>
    public boolean isCanceled()
    {
        return (this.PurchStatus == PurchStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedForBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase order is marked for letter of credit.
    /// </summary>
    /// <returns>
    /// true if the purchase order is marked for letter of credit; otherwise, false.
    /// </returns>
    public boolean isMarkedForBankLC()
    {
        return this.BankDocumentType == BankDocumentType::LetterOfCredit
            || this.BankDocumentType == BankDocumentType::ImportCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedForBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase order is marked for letter of guarantee.
    /// </summary>
    /// <returns>
    /// true if the purchase order is marked for letter of guarantee; otherwise, false.
    /// </returns>
    public boolean isMarkedForBankLG()
    {
        return this.BankDocumentType == BankDocumentType::LetterOfGuarantee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPartiallyDistributed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a check whether any lines that are partially distributed exist.
    /// </summary>
    /// <returns>
    ///    True, if there are partially distributed lines; otherwise false.
    /// </returns>
    /// <remarks>
    ///     A line is either not distributed, partially distributed, or fully distributed.
    ///     This method will return true if any lines that have distributions, but aren't fully
    ///     distributed exist.
    /// </remarks>
    public boolean isPartiallyDistributed()
    {
        PurchLine   purchLine;
        SourceDocumentLine sourceDocumentLine;
        AccountingDistribution accountingDistribution;
        boolean     ret;

        while select purchLine
            where purchLine.PurchId == this.PurchId
                && !purchLine.IsDeleted
            join sourceDocumentLine
                where sourceDocumentLine.RecId == purchLine.SourceDocumentLine
                exists join accountingDistribution
                    where accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
        {
            ret = !purchLine.isFullyDistributed(sourceDocumentLine);
            if (ret)
            {
                //break the loop as soon as one partially distributed line is found.
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsignmentOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if order originates from consignment.
    /// </summary>
    /// <returns>
    /// true if order originates from consignment; otherwise, false.
    /// </returns>
    public boolean isConsignmentOrder()
    {
        return this.PurchaseOrderHeaderCreationMethod == PurchPurchaseOrderCreationMethod::Consignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectSalesItemReqPO</Name>
				<Source><![CDATA[
    public boolean isProjectSalesItemReqPO()
    {
        InterCompanyPurchSalesReference     interCompanyPurchSalesReference;
        SalesTable                          salesTable;

        if (!this.ProjId)
        {
            return false;
        }

        select firstonly RecId from interCompanyPurchSalesReference
            where interCompanyPurchSalesReference.PurchId == this.PurchId
                exists join salesTable
                    where salesTable.SalesId == interCompanyPurchSalesReference.SalesId
                        && salesTable.ProjId == this.ProjId;

        return (interCompanyPurchSalesReference.RecId == 0 ? false : true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReversingFiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the purchase order is for reversing a fiscal document issued by third party
    /// </summary>
    /// <returns>
    /// Returns true if the purchase order is for reversing an original fiscal document issued by third party; false otherwise.
    /// </returns>
    public boolean isReversingFiscalDocument_BR()
    {
        PurchTable_BR       purchTable_BR;

        purchTable_BR = this.purchTable_BR();

        return purchTable_BR.isCancellingOrReversingFiscalDocument() && purchTable_BR.isRelatedFiscalDocIssuedByThirdParty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersioned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the order has been versioned, i.e. whether it has been confirmed or approved with change management enabled.
    /// </summary>
    /// <returns>true if the order has been versioned; otherwise, false.</returns>
    public boolean isVersioned()
    {
        if (this.IsModified)
        {
            // If the header is modified then it is either new or modified with history.
            return VersioningPurchaseOrder::checkHistoryExist(this);
        }
        else
        {
            // If the header is not modified then it is versioned.
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefIntercompanySalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Jump reference for the intercompany sales order relating to the purchase order.
    /// </summary>
    /// <param name="_caller">
    ///    The object that is calling the <c>jumpRefIntercompanySalesOrder</c> method; optional.
    /// </param>
    public void jumpRefIntercompanySalesOrder(Object _caller = null)
    {
        if (this.PurchaseType == PurchaseType::ReturnItem)
        {
            TradeInterCompany::construct(this).formRun(formStr(ReturnTable),_caller);
        }
        else
        {
            TradeInterCompany::construct(this).formRun(formStr(SalesTable),_caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastConfirmationRequestJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last entry in the <c>PurchConfirmationRequestJour</c> table.
    /// </summary>
    /// <returns>
    /// The last record created in the <c>PurchConfirmationRequestJour</c> table.
    /// </returns>
    public PurchConfirmationRequestJour lastConfirmationRequestJournal()
    {
        PurchConfirmationRequestJour      purchConfirmationRequestJour;
        PurchTableVersion                 purchTableVersion;

        select firstonly * from purchConfirmationRequestJour
        join TableId from purchTableVersion
            order by purchTableVersion.VersionDateTime desc
            where   purchTableVersion.PurchId                      == this.PurchId
                &&  purchTableVersion.PurchIdDataAreaId            == this.DataAreaId
                &&  purchConfirmationRequestJour.PurchTableVersion == purchTableVersion.RecId
                &&  purchConfirmationRequestJour.VendVendorCollaborationType == VendVendorCollaborationType::Disabled;

        return purchConfirmationRequestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastBindingConfirmationRequestJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last entry in the <c>PurchConfirmationRequestJour</c> table related to binding confirmation request.
    /// </summary>
    /// <returns>
    /// The last record created in the <c>PurchConfirmationRequestJour</c> table for the binding confirmation request.
    /// </returns>
    public PurchConfirmationRequestJour lastBindingConfirmationRequestJournal()
    {
        PurchConfirmationRequestJour      purchConfirmationRequestJour;
        PurchTableVersion                 purchTableVersion;

        select firstonly * from purchConfirmationRequestJour
        join TableId from purchTableVersion
            order by purchTableVersion.VersionDateTime desc
            where   purchTableVersion.PurchId                      == this.PurchId
                &&  purchTableVersion.PurchIdDataAreaId            == this.DataAreaId
                &&  purchConfirmationRequestJour.PurchTableVersion == purchTableVersion.RecId
                &&  purchConfirmationRequestJour.VendVendorCollaborationType != VendVendorCollaborationType::Disabled;

        return purchConfirmationRequestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastFacture_RU</Name>
				<Source><![CDATA[
    #define.FactureNumPosition(1)
    public FactureExternalId_RU lastFacture_RU()
    {
        return conPeek(this.lastFactureNumDate_RU(), #FactureNumPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastFactureNumDate_RU</Name>
				<Source><![CDATA[
    private container lastFactureNumDate_RU()
    {
        FactureJour_RU          jour;
        VendInvoicePurchLink    invoicePurchLink;
        VendInvoiceJour         invoiceJour;
        RecordSortedList        list = new RecordSortedList(tableNum(FactureJour_RU)),
                                tmpList;

        // to avoid BP warning
        void dummy()
        {
        }

        select firstonly RecId from jour;
        if (! jour.RecId)
            return ["", dateNull()];

        list.sortOrder(fieldNum(FactureJour_RU, FactureDate),
                       fieldNum(FactureJour_RU, FactureId),
                       fieldNum(FactureJour_RU, ModifiedDateTime),
                       fieldNum(FactureJour_RU, RecId));

        while select RecId from invoicePurchLink
            index hint origPurchIdx
            where invoicePurchLink.OrigPurchId == this.PurchId
        join invoiceJour
            where invoiceJour.PurchId     == invoicePurchLink.PurchId   &&
                  invoiceJour.InvoiceId   == invoicePurchLink.InvoiceId &&
                  invoiceJour.InvoiceDate == invoicePurchLink.InvoiceDate
        {
            tmpList = invoiceJour.factureJourSortedList_RU();
            tmpList.first(jour);
            if (jour)
            {
                while (tmpList.next(jour))
                {
                    dummy();
                }
                // last element
                if (! list.find(jour))
                {
                    list.ins(jour);
                }
            }
        }

        list.first(jour);
        while (list.next(jour))
        {
            dummy();
        }
        // last element

        return [ jour.FactureExternalId, jour.FactureDate ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoice</Name>
				<Source><![CDATA[
    display LastInvoiceId  lastInvoice()
    {
        return (select firstonly InvoiceId from vendInvoicePurchLink
                    index hint origPurchIdx
                    order by InvoiceDate desc, InvoiceId desc
                    where vendInvoicePurchLink.OrigPurchId == this.PurchId).InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoice4Paym_RU</Name>
				<Source><![CDATA[
    #define.Invoice4PaymNumPosition(1)
    display Invoice4PaymId_RU lastInvoice4Paym_RU()
    {
        return conPeek(this.lastInvoice4PaymNumDate_RU(), #Invoice4PaymNumPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoice4PaymDate_RU</Name>
				<Source><![CDATA[
    #define.Invoice4PaymDatePosition(2)
    display TransDate lastInvoice4PaymDate_RU()
    {
        return conPeek(this.lastInvoice4PaymNumDate_RU(), #Invoice4PaymDatePosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoice4PaymNumDate_RU</Name>
				<Source><![CDATA[
    private container lastInvoice4PaymNumDate_RU()
    {
        VendInvoice4PaymPurchLink_RU invoice4PaymPurchLink;

        select firstonly Invoice4PaymId, Invoice4PaymDate from invoice4PaymPurchLink
            index hint OrigPurchIdx
            order by Invoice4PaymDate desc
            where invoice4PaymPurchLink.OrigPurchId == this.PurchId;

        return [ invoice4PaymPurchLink.Invoice4PaymId, invoice4PaymPurchLink.Invoice4PaymDate ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceDate</Name>
				<Source><![CDATA[
    display LastInvoiceDate lastInvoiceDate()
    {
        return (select maxof(InvoiceDate) from vendInvoicePurchLink
                    index hint origPurchIdx
                    where vendInvoicePurchLink.OrigPurchId == this.PurchId).InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastJournals</Name>
				<Source><![CDATA[
    container  lastJournals()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        container  c;

        c = conIns(c, PurchTableType::posPurchaseOrder(),   [this.lastPurchaseOrder(),  this.lastPurchaseOrderDate()]);
        c = conIns(c, PurchTableType::posReceiptsList(),    [this.lastReceiptsList(),   this.lastReceiptsListDate()]);
        c = conIns(c, PurchTableType::posPackingSlip(),     [this.lastPackingSlip(),    this.lastPackingSlipDate()]);
        c = conIns(c, PurchTableType::posInvoice(),         [this.lastInvoice(),        this.lastInvoiceDate()]);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            c = conIns(c, PurchTableType::posInvoice4Paym_RU(), this.lastInvoice4PaymNumDate_RU());
            c = conIns(c, PurchTableType::posFacture_RU(),      this.lastFactureNumDate_RU());
        }
        // </GEERU>

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPackingSlip</Name>
				<Source><![CDATA[
    display LastPackingSlipId  lastPackingSlip()
    {
        return (select firstonly PackingSlipId from vendPackingSlipPurchLink
                    index hint origPurchIdx
                    order by DeliveryDate desc, PackingSlipId desc
                    where vendPackingSlipPurchLink.OrigPurchId == this.PurchId).PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPackingSlipDate</Name>
				<Source><![CDATA[
    display LastPackingSlipDate lastPackingSlipDate()
    {
        return (select maxof(DeliveryDate) from vendPackingSlipPurchLink
                    index hint origPurchIdx
                    where vendPackingSlipPurchLink.OrigPurchId == this.PurchId).DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPurchaseOrder</Name>
				<Source><![CDATA[
    display LastPurchaseOrderId  lastPurchaseOrder()
    {
        VendPurchOrderJour      vendPurchOrderJour;

        select firstonly PurchOrderDocNum from vendPurchOrderJour
                order by PurchOrderDate desc, PurchaseOrderId desc
                where vendPurchOrderJour.PurchId == this.PurchId;

        return vendPurchOrderJour.PurchOrderDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPurchaseOrderDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display LastPurchaseOrderDate lastPurchaseOrderDate()
    {
        return (select maxof(PurchOrderDate) from vendPurchOrderJour
                    where vendPurchOrderJour.PurchId == this.PurchId).PurchOrderDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPurchConfirmationRequestJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the <c>DocumentNumber</c> for the last <c>PurchConfirmationRequestJour</c> record.
    /// </summary>
    /// <returns>
    /// The <c>DocumentNumber</c> of the last <c>PurchConfirmationRequestJour</c> record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PurchLastConfirmationRequestId lastPurchConfirmationRequestJour()
    {
        return this.lastConfirmationRequestJournal().DocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPurchConfirmationRequestJourDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the <c>DocumentDate</c> field value for the last <c>PurchConfirmationRequestJour</c> record.
    /// </summary>
    /// <returns>
    /// The <c>DocumentDate</c> field value of the last <c>PurchConfirmationRequestJour</c> record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PurchLastConfirmationRequestDate  lastPurchConfirmationRequestJourDate()
    {
        return this.lastConfirmationRequestJournal().DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastReceiptsList</Name>
				<Source><![CDATA[
    display LastReceiptsListId  lastReceiptsList()
    {
        return (select firstonly ReceiptsListId from vendReceiptsListPurchLink
                    index hint origPurchIdx
                    order by ReceiptsListDate desc, ReceiptsListId desc
                    where vendReceiptsListPurchLink.OrigPurchId == this.PurchId).ReceiptsListId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastReceiptsListDate</Name>
				<Source><![CDATA[
    display LastReceiptsListDate lastReceiptsListDate()
    {
        return (select maxof(ReceiptsListDate) from vendReceiptsListPurchLink
                    index hint origPurchIdx
                    where vendReceiptsListPurchLink.OrigPurchId == this.PurchId).ReceiptsListDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the table that is considered to be the line table.
    /// </summary>
    /// <returns>
    /// The ID of the <c>PurchLine</c> table.
    /// </returns>
    public RefTableId lineMapping()
    {
        return tableNum(PurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether <c>TaxUncommitted</c> records should be maintained or flushed.
    /// </summary>
    /// <returns>true if <c>TaxUncommitted</c> records should be maintained; otherwise, false.</returns>
    public boolean maintainTaxUncommitted()
    {
        return VersioningPurchaseOrder::checkHistoryExist(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBankDocumentTypeBeBankLCImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the bank document type can be set to bank LC import.
    /// </summary>
    /// <returns>
    /// true if the document type can be set; otherwise, false.
    /// </returns>
    public boolean mayBankDocumentTypeBeBankLCImport()
    {
        return this.PurchaseType        == PurchaseType::Purch
            && this.DocumentState       != VersioningDocumentState::Confirmed
            && this.PurchStatus         == PurchStatus::Backorder
            && this.InterCompanyOrder   == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBankDocumentTypeBeBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Bank document type can be set to the types of Bank LG.
    /// </summary>
    /// <returns>
    /// true if allowed; otherwise, false.
    /// </returns>
    public boolean mayBankDocumentTypeBeBankLG()
    {
        // It is not allowed to create LG on purchase order if
        // the related project's bank document type is set to LG.
        return !(this.ProjId && ProjTable::find(this.ProjId).isMarkedForBankLG());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInterCompanyBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an intercompany order can be updated.
    /// </summary>
    /// <returns>
    /// true if the intercompany order can be updated; otherwise, false.
    /// </returns>
    public boolean mayInterCompanyBeUpdated()
    {
        return this.type().interCompanyCanBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoice4PaymBeUpdated_RU</Name>
				<Source><![CDATA[
    public boolean mayInvoice4PaymBeUpdated_RU()
    {
        return this.type().mayInvoice4PaymBeUpdated_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoiceBeUpdated</Name>
				<Source><![CDATA[
    boolean  mayInvoiceBeUpdated()
    {
        return this.type().mayInvoiceBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    public boolean mayPackingSlipBeUpdated(VersioningUpdateType _updateType = VersioningUpdateType::Initial)
    {
        return this.type().mayPackingSlipBeUpdated(_updateType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPurchaseOrderBeUpdated</Name>
				<Source><![CDATA[
    boolean  mayPurchaseOrderBeUpdated()
    {
        return this.type().mayPurchaseOrderBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayReceiptsListBeUpdated</Name>
				<Source><![CDATA[
    boolean  mayReceiptsListBeUpdated()
    {
        return this.type().mayReceiptsListBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not to return a on hold icon.
    /// </summary>
    /// <returns>
    /// The defined on hold icon which is set in the resAppl macro.
    /// </returns>
    public display MCRDisplayOnHold mcrDisplayOnHold()
    {
        #MCRresAppl
        int image = 0;

        if (MCRHoldCodeTrans::findActiveOrderHolds(this.PurchId))
        {
            image = #MCRImage_OnHold;
        }
        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that contains the merged combination of the current
    /// <c>defaultDimension</c> field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that contains the merged combination of the current <c>defaultDimension</c> field
    /// on this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>modifiedField</c> event for the specified field.
    /// </summary>
    /// <param name = "_fieldId">The field ID.</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        this.modifiedFieldWithUserInput(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldWithUserInput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>modifiedField</c> event for the specified field.
    /// </summary>
    /// <param name="_fieldId">The field ID.</param>
    /// <param name="_isFieldSetExplicitlyByUser">A boolean value indicating whether the change happened as a result of direct user input; optional.</param>
    public void modifiedFieldWithUserInput(
        FieldId _fieldId,
        boolean _isFieldSetExplicitlyByUser = true)
    {
        // !Important! Whenever you add a modified field handler for a new field you need to make sure to add it to the PurchTableType.defaultingFields method

        // <GEERU>
        #ISOCountryRegionCodes
        PurchTable_RU   purchTable_RU;
        // </GEERU>
        // <GIN>
        PurchTable_W    purchTable_W;
        PurchLine       purchLine;
        PurchLine_IN    purchLineIN;
        // </GIN>

        switch (_fieldId)
        {
            case fieldNum(PurchTable, ContactPersonId):
                this.initFromContactInfo();
                break;
            case fieldNum(PurchTable, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                this.setAddressFromInventLocationId(this.InventLocationId);
                break;

            case fieldNum(PurchTable, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                this.setAddressFromInventSiteId(this.InventSiteId);
                this.modifiedInventSiteFromParent();
                break;

            case fieldNum(PurchTable, InterCompanyOrder):
                if (this.InterCompanyOrder)
                {
                    this.InterCompanyCompanyId = this.vendTable_OrderAccount().interCompanyTradingPartnerCompanyID();
                    if (this.isMarkedForBankLC())
                    {
                        this.BankDocumentType = BankDocumentType::None;
                    }
                }
                else
                    this.InterCompanyCompanyId = '';
                break;

            case fieldNum(PurchTable, BankDocumentType):
                this.type().modifiedBankDocumentType();
                break;

            case fieldNum(PurchTable, InvoiceAccount):
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    if (this.RecId && this.MatchingAgreement && this.InvoiceAccount != this.orig().InvoiceAccount )
                    {
                        if (!this.unlinkAgreementPrompt())
                        {
                            this.InvoiceAccount = this.orig().InvoiceAccount;
                            break;
                        }
                    }
                }
                // </GEERU>
                if (!this.existMarkedSettlement(_fieldId))
                    this.transferInvoiceAccount();
                else
                    this.reread();
                break;

            case fieldNum(PurchTable, OrderAccount):
                if (this.RecId && this.MatchingAgreement && this.OrderAccount != this.orig().OrderAccount )
                {
                    if (!this.unlinkAgreementPrompt(
                                                    false
                                                    ))
                    {
                        this.OrderAccount = this.orig().OrderAccount;
                        break;
                    }
                }

                // <GIN>
                if (TaxParameters::isCustomsEnable_IN()
                    && this.OrderAccount)
                {
                    purchTable_W = this.purchTable_W();
                    purchTable_W.CustomsImportOrder_IN = VendTable::find(this.OrderAccount).isForeign();
                    this.packPurchTable_W(purchTable_W);
                }
                // </GIN>
                // <GSA>
                if (LedgerParameters::find().IsZakatEnabled_SA)
                {
                    this.ContractNum_SA = '';
                }
                // </GSA>

                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    this.type().setDefaultDeliveryAddress();
                    this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CustVend);
                }
                // </GBR>

                if (!this.existMarkedSettlement(_fieldId))
                    this.transferOrderAccount();
                else
                    this.reread();

                this.DefaultDimension = this.copyDimension(this.DefaultDimension);
                break;

            case fieldNum(PurchTable, Payment):
                this.initFromPayment();
                break;

            case fieldNum(PurchTable, PaymMode):
                this.paymModeModified();
                break;

            case fieldNum(PurchTable, BankCentralBankPurposeCode):
                this.BankCentralBankPurposeText = BankCentralBankPurpose::find(this.BankCentralBankPurposeCode).Text;
                break;

            case fieldNum(PurchTable, Requester):
                this.ReqAttention = HcmWorkerTitle::findByWorker(this.Requester).OfficeLocation;
                break;

            case fieldNum(PurchTable, DiscPercent):
                if (_isFieldSetExplicitlyByUser)
                {
                    this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, _fieldId);
                }
                break;

            case fieldNum(PurchTable, ProjId):
                this.DefaultDimension = this.copyDimension(this.DefaultDimension);
                break;

            // <GEERU>
            case fieldNum(PurchTable, MatchingAgreement):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    purchTable_RU = this.purchTable_RU();
                    purchTable_RU.AgreementHeaderExt_RU = PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(this.MatchingAgreement).RecId;
                    this.packPurchTable_RU(purchTable_RU);

                    this.setAgreement_RU();
                }
                break;
            // </GEERU>

            case fieldNum(PurchTable, PurchaseType):
                this.setDefaultDeliveryAddress();
                if (this.PurchaseType != PurchaseType::Purch && this.isMarkedForBankLC())
                {
                    this.BankDocumentType = BankDocumentType::None;
                }

                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    this.initFiscalDocumentType_BR();
                    this.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CustVend);
                }
                // </GBR>
                break;

            case fieldNum(PurchTable, DeliveryPostalAddress):
                LogisticsLocationSelectForm_PurchTable::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(),
                    this.DeliveryPostalAddress);
                break;

            case fieldNum(PurchTable, DlvMode):
                this.updateTransport();
                break;

            // <GIN>
            case fieldNum(PurchTable, AccountingDate):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    while select RecId, CurrencyCode, PurchId from purchLine where purchLine.PurchId == this.PurchId
                    {
                        purchLineIN = purchLine.purchLine_IN();
                        purchLineIN.AssessableValueAccountingCurrency = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(purchLineIN.AssessableValueTransactionCurrency, purchLine.CurrencyCode, this.AccountingDate);
                        purchLine.packPurchLine_IN(purchLineIN);
                        purchLine.SysExtensionSerializerMap::PostUpdate();
                    }
                }
                break;
            // </GIN>

            case fieldNum(PurchTable, FixedDueDate):
                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                {
                    var paymCalendarAdjustedDate = PaymCalendarSourcePurchaseOrder::getAdjustedDate(this);

                    this.FixedDueDate = PaymCalendarProcessor::getAdjustedDueDate(this.FixedDueDate, this.orig().FixedDueDate, paymCalendarAdjustedDate);
                }
                break;

            case fieldNum(PurchTable, CashDisc):
                this.CashDiscPercent = CashDisc::find(this.CashDisc).Percent;
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventSiteFromParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values on the current or parent record because the <c>InventSiteId</c> field is modified.
    /// </summary>
    /// <param name="_parent">
    ///    The parent record buffer that is joined to the <c>PurchTable</c> record buffer; optional.
    /// </param>
    public void modifiedInventSiteFromParent(Common _parent = this)
    {
        this.InventStorageDimMap::modifiedInventSiteFromParent(_parent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifieMarkupGroup</Name>
				<Source><![CDATA[
    void modifieMarkupGroup()
    {
        PurchLine  purchLine;

        while select purchLine
            index hint PurchLineIdx
            where purchLine.PurchId         == this.PurchId
               && !purchLine.IsDeleted
        {
            purchLine.createMarkupTrans(this, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCovPlanned</Name>
				<Source><![CDATA[
    boolean  mustBeCovPlanned()
    {
        PurchTableType purchTableType;

        purchTableType = this.type();
        return purchTableType.mustBeCovPlanned();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_sysExtensionSerializerExtensionTableMap">
    /// The extension table record.
    /// </param>
    /// <returns>
    /// true if success; otherwise false.
    /// </returns>
    public boolean packExtensionTable(SysExtensionSerializerExtensionMap _sysExtensionSerializerExtensionTableMap)
    {
        return this.SysExtensionSerializerMap::packExtensionTable(_sysExtensionSerializerExtensionTableMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_purchTable_BR">
    /// The extension table record.
    /// </param>
    public void packPurchTable_BR(PurchTable_BR _purchTable_BR)
    {
        _purchTable_BR.PurchTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchTable_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_purchTable_RU">
    /// The extension table record.
    /// </param>
    public void packPurchTable_RU(PurchTable_RU _purchTable_RU)
    {
        _purchTable_RU.PurchTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchTable_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchTable_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_purchTable_Intrastat">
    /// The extension table record.
    /// </param>
    public void packPurchTable_Intrastat(PurchTable_Intrastat _purchTable_Intrastat)
    {
        _purchTable_Intrastat.PurchTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchTable_Intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_purchTable_W">
    /// The extension table record.
    /// </param>
    public void packPurchTable_W(PurchTable_W _purchTable_W)
    {
        _purchTable_W.PurchTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchTable_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.ExchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumstr(SourceDocument_ProductOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_ProductOrder::PurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumstr(SourceDocumentLine_ProductOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_ProductOrder::PurchaseOrderTotalsLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        return SourceDocumentHeader::find(this.SourceDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>party</Name>
				<Source><![CDATA[
    public DirPartyRecId party()
    {
        return VendTable::find(this.OrderAccount).Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTable_OrderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>DirPartyTable</c> record for the order account of the purchase order.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The <c>DirPartyTable</c> record for the order account of the purchase order.
    /// </returns>
    DirPartyTable partyTable_OrderAccount(boolean _forUpdate = false)
    {
        DirPartyTable   partyTable;
        VendTable       vendTable;

        if (this.OrderAccount)
        {
            if (_forUpdate)
                partyTable.selectForUpdate(_forUpdate);

            select firstonly partyTable
                exists join vendTable
                where vendTable.Party      == partyTable.RecId
                   && vendTable.AccountNum == this.OrderAccount;
        }
        return partyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payer</Name>
				<Source><![CDATA[
    VendTable payer(boolean  update = false)
    {
        return this.vendTable_InvoiceAccount(update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDayId</Name>
				<Source><![CDATA[
    VendPaymDayId paymDayId()
    {
        VendPaymDayId    paymDayId;

        paymDayId = this.vendTable_InvoiceAccount().PaymDayId;

        if (!paymDayId)
            paymDayId = this.payment().PaymDayId;

        return paymDayId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment</Name>
				<Source><![CDATA[
    PaymTerm payment(boolean _update = false)
    {
        return PaymTerm::find(this.Payment, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeModified</Name>
				<Source><![CDATA[
    void paymModeModified()
    {
        this.PaymModeMap::modifiedPaymMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method validates if the corresponding purchase lines have valid approved vendor list entry if controlled by AVL functionality.
    /// </summary>
    /// <param name="_orderAcct">Vendor account number</param>
    /// <returns>true if allowed ; otherwise false</returns>
    /// <remarks>
    /// <syntax>
    /// public Enum pdsCheckApprovedVendorList(VendAccount _orderAcct)
    /// </syntax>
    /// </remarks>
    public boolean pdsCheckApprovedVendorList(VendAccount _orderAcct = '')
    {
        PdsApprovedVendorListCheck  tableCheck;
        boolean                     ret = true;

        tableCheck = this.type().pdsApprovedVendorListCheck();
        if (_orderAcct != '')
        {
            tableCheck.parmVendAccount(_orderAcct);
        }
        ret = tableCheck.validateCheck();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMRCLineCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check each of the order line for MRC compliance
    /// </summary>
    /// <remarks>
    /// Check if the vendor account number has been changed and check the
    /// regulatory requirements
    /// </remarks>
    public void pdsMRCLineCheck()
    {
        PurchLine   purchLine;

        if (this.RecId
            && this.orig().OrderAccount != this.OrderAccount
            && PdsMRCParameters::find().RegulationWarningOnPurchase)
        {
            while select purchLine
                where purchLine.PurchId == this.PurchId
            {
                PdsMRCRegulated::checkRegulatedFromBuffer(purchLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// Title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS330566", this.PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscChangePolicyExistOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a line record that is related to the current record has a price discount policy.
    /// </summary>
    /// <returns>
    /// true if a line with a price discount policy exists; otherwise, false
    /// </returns>
    public boolean priceDiscChangePolicyExistOnLine()
    {
        PurchLine purchLine;

        select firstonly RecId from purchLine
            where purchLine.PurchId == this.PurchId
               && !purchLine.IsDeleted
               && (purchLine.SystemEntryChangePolicy
               || purchLine.ManualEntryChangepolicy);

        return purchLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscChangePolicyUpdateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the price discount policy fields on a set of purchase line records that are related to the
    /// current PurchTable record.
    /// </summary>
    /// <param name="_priceDiscChangePoliciesTmp">
    /// A buffer of the temporary <c>PriceDiscChangePoliciesTmp</c> table.
    /// </param>
    public void priceDiscChangePolicyUpdateLine(PriceDiscChangePoliciesTmp  _priceDiscChangePoliciesTmp)
    {
        PurchLine purchLine;

        purchLine.skipDataMethods(true);
        update_recordset purchLine
        setting ManualEntryChangepolicy = _priceDiscChangePoliciesTmp.ManualEntryChangepolicy,
                SystemEntryChangePolicy = _priceDiscChangePoliciesTmp.SystemEntryChangePolicy,
                SystemEntrySource       = _priceDiscChangePoliciesTmp.SystemEntrySource
        join _priceDiscChangePoliciesTmp
            where _priceDiscChangePoliciesTmp.RefRecId == purchLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostControlUpdate</Name>
				<Source><![CDATA[
    public void projCostControlUpdate(PurchLine _purchLine,ProjCommittedCostUpdateAction _action=ProjCommittedCostUpdateAction::Unknown)
    {
        InventMov_Purch                     movement;
        InventMov_Virtuel                   movement_Virtuel;
        CostControlPostingItemPurchOrder    costControlPostingItemPurchOrder;

        movement=InventMovement::construct(_purchLine);
        movement_Virtuel= InventMov_Virtuel::construct();
        movement_Virtuel.parmInventMovReference(movement);

        if (movement_Virtuel.mustBeCostControlled()  && movement_Virtuel.canCommittedCostBeReversed())
        {
            costControlPostingItemPurchOrder=CostControlPosting::newCostControlPostingItem(movement_Virtuel);
            costControlPostingItemPurchOrder.run(_action);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    ProjTable projTable(boolean update = false)
    {
        return ProjTable::find(this.ProjId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>PurchTable_BR</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>PurchTable_BR</c> associated with the current record.
    /// </returns>
    public PurchTable_BR purchTable_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchTable_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>PurchTable_Intrastat</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public PurchTable_Intrastat purchTable_Intrastat()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchTable_Intrastat));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>PurchTable_RU</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>PurchTable_RU</c> associated with the current record.
    /// </returns>
    public PurchTable_RU purchTable_RU()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchTable_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>PurchTable_W</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>PurchTable_W</c> associated with the current record.
    /// </returns>
    public PurchTable_W purchTable_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchTable_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the status of the associated quality orders.
    /// </summary>
    /// <returns>
    /// The current quality order status.
    /// </returns>

    display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        InventQualityOrderTable orderTable = InventQualityOrderTable::findLastQualityOrder(InventTestReferenceType::Purch, this.PurchId);

        return orderTable ? orderTable.statusDisplay() : InventTestOrderStatusDisplay::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPurchLine</Name>
				<Source><![CDATA[
    Query queryPurchLine(boolean _update = false)
    {
        DictRelation    dictRelation;
        DictField       externdictField;
        DictField       dictField;
        Query           query = new Query();
        Counter         c;

        query.addDataSource(tableNum(PurchLine));

        dictRelation = new DictRelation(tableNum(PurchLine));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField   = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField   = new DictField(tableNum(PurchLine),dictRelation.lineTableValue(c));
                query.dataSourceTable(tableNum(PurchLine)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }

        query.dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine,IsDeleted)).value(queryValue(NoYes::No));

        query.dataSourceTable(tableNum(PurchLine)).update(_update);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateTaxForChangedLineOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be recalculated for changed lines only or for all lines.
    /// </summary>
    /// <returns>
    /// true if tax should be recalculated for changed lines only; otherwise, false.
    /// </returns>
    public boolean recalculateTaxForChangedLineOnly()
    {
        // If Product receipt or invoicing posting has started on the PO, then don't recalculate for all lines
        return this.DocumentStatus == DocumentStatus::PackingSlip || this.DocumentStatus == DocumentStatus::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the reference sales table record.
    /// </summary>
    /// <returns>
    ///    The reference sales table record.
    /// </returns>
    /// <remarks>
    ///    Used for finding the reference sales table in the same legal entity in 3-leged intercompany scenarios.
    /// </remarks>
    public SalesTable referenceSalesTable()
    {
        InterCompanyPurchSalesReference     interCompanyPurchSalesReference;
        SalesTable                          referenceSalesTable;

        select firstonly referenceSalesTable
            exists join interCompanyPurchSalesReference
            where interCompanyPurchSalesReference.SalesId == referenceSalesTable.SalesId
            &&    interCompanyPurchSalesReference.PurchId == this.PurchId;

        return referenceSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeInvoiceRefRecId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// removes the reference to cancelled fiscal document for Brazil Localization.
    /// </summary>
    public void removeInvoiceRefRecId_BR()
    {
        PurchTable_BR purchTable_BR;

        ttsBegin;

        purchTable_BR = this.purchTable_BR();
        purchTable_BR.selectForUpdate(true);
        purchTable_BR.InvoiceRefRecId_BR = 0;
        purchTable_BR.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLinePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the price discount policies on lines that are related to the current record.
    /// </summary>
    public void resetLinePolicies()
    {
        PurchLine purchLine;

        update_recordset purchLine
            setting SystemEntrySource       = PriceDiscSystemSource::None,
                    SystemEntryChangePolicy = 0,
                    ManualEntryChangepolicy = 0
        where purchLine.PurchId == this.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventLocationId</Name>
				<Source><![CDATA[
    public boolean setAddressFromInventLocationId(InventLocationId _inventLocationId)
    {
        LogisticsLocationRecId          inventLocationAddress;
        InventLocation                  inventLocation;
        boolean                         addressSet;

        if (this.PurchaseType == PurchaseType::ReturnItem)
        {
            //Never set the address from the location if the purchase order is of type return.
            return false;
        }

        if (_inventLocationId)
        {
            inventLocation          = InventLocation::find(_inventLocationId);
            inventLocationAddress   = LogisticsLocationDefault::findSimpleDefault(inventLocation,
                                        LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;

            if (inventLocationAddress)
            {
                this.setLocation(inventLocationAddress, inventLocation);
                addressSet = true;
            }

            else if (inventLocation.VendAccount)
            {
                this.setAddressFromVendTable(VendTable::find(inventLocation.VendAccount));
                addressSet = true;
            }
        }

        if (!addressSet)
        {
            addressSet = this.setAddressFromInventSiteId(this.InventSiteId);
        }

        return addressSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventSiteId</Name>
				<Source><![CDATA[
    public boolean setAddressFromInventSiteId(InventSiteId _inventSiteId)
    {
        LogisticsLocationRecId      location;
        InventSite                  inventSite;
        boolean                     addressSet = false;
        CompanyInfo                 companyInfo;
        LogisticsLocationRole       role = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery);

        if (this.PurchaseType == PurchaseType::ReturnItem)
        {
            //Never set the address from the site if the purchase order is of type return order.
            return false;
        }

        if (this.isDropShipment())
        {
            addressSet = true;
        }

        if (!addressSet && _inventSiteId
        && !this.InterCompanyDirectDelivery)
        {
            inventSite = InventSite::find(_inventSiteId);
            location   = LogisticsLocationDefault::findSimpleDefault(InventSite::find(_inventSiteId), role).RecId;

            if (location)
            {
                this.setLocation(location, inventSite);
                addressSet = true;
            }
        }

        if (!addressSet)
        {
            companyInfo = CompanyInfo::find();

            location = LogisticsLocationDefault::findSimpleDefault(companyInfo,role).RecId;
            if (location)
            {
                this.setLocation(location, companyInfo);
                addressSet = true;
            }
        }

        return addressSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromVendTable</Name>
				<Source><![CDATA[
    void  setAddressFromVendTable(VendTable _vendTable)
    {
        LogisticsLocation location;
        LogisticsPostalAddress postalAddress = DirParty::primaryPostalAddress(_vendTable.Party);

        this.DeliveryName = _vendTable.name();
        if (postalAddress)
        {
            this.DeliveryPostalAddress  = postalAddress.RecId;
            location = LogisticsLocation::find(postalAddress.Location);
            if (location.Description)
            {
                this.DeliveryName = location.Description;
            }
        }
        else
        {
            this.DeliveryPostalAddress = 0;
        }
        this.AddressRefRecId            = _vendTable.RecId;
        this.AddressRefTableId          = _vendTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes purchase order from the agreement.
    /// </summary>
    public void setAgreement_RU()
    {
        PurchAgreementHeaderExt_RU  purchAgreementHeaderExt;
        PurchAgreementHeader        purchAgreementHeader;
        PurchTable_RU               purchTable_RU = this.purchTable_RU();

        if (purchTable_RU.AgreementHeaderExt_RU)
        {
            purchAgreementHeaderExt = PurchAgreementHeaderExt_RU::find(purchTable_RU.AgreementHeaderExt_RU);

            purchAgreementHeader = PurchAgreementHeader::find(purchAgreementHeaderExt.AgreementHeader);

            if (Box::yesNo("@SYS311926",DialogButton::Yes) == DialogButton::Yes)
            {
                // Transfer default settings from Agreement to PurchTable buffer...
                this.initFromPurchAgreementHeader(purchAgreementHeader);
            }
            else
            {
                this.DefaultDimension = this.copyDimension(purchAgreementHeader.DefaultDimension);
            }
        }
        else
        {
            this.MatchingAgreement = 0;
            this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
            this.initFromVendTable();
            this.initInvoiceAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default delivery address for the <c>purchTable</c> record.
    /// </summary>
    public void setDefaultDeliveryAddress()
    {
        this.type().setDefaultDeliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    ///     A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEndDiscFromVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     On the PurchTable the DiscPercent is a percentage while on the VendInvoiceJour the EndDisc is an amount.
    ///     The algorithm to calculate the percentage based on enddisc and salesbalance from the vendinvoicejour and subsequently compare the result to that of the original PurchTable,
    ///     if the difference is less than 0.1% then the original Purchtable's discpercent is utilized in order to mitigate from potential rounding issues.
    ///     If the original PurchTable is not available the calculated and rounded amount is used.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    ///    The <c>VendInvoiceJour</c> table buffer that is to calculate the <c>PurchTable.DiscPercent</c> field from.
    /// </param>
    void setEndDiscFromVendInvoiceJour(VendInvoiceJour _vendInvoiceJour)
    {
        PurchTable  purchTableLocal;

        if (_vendInvoiceJour.EndDisc != 0 && _vendInvoiceJour.SalesBalance != 0)
        {
            this.DiscPercent = round(_vendInvoiceJour.EndDisc * 100 / _vendInvoiceJour.SalesBalance, 0.01);
            purchTableLocal = _vendInvoiceJour.purchTable();
            if (purchTableLocal && abs(purchTableLocal.DiscPercent - this.DiscPercent) < 0.1)
            {
                this.DiscPercent = purchTableLocal.DiscPercent;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId_RU</Name>
				<Source><![CDATA[
    void setInventProfileId_RU()
    {
        PurchTable_RU       purchTable_RU = this.purchTable_RU();

        if (purchTable_RU.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
            purchTable_RU.InventProfileType_RU != InventProfile_RU::find(purchTable_RU.InventProfileId_RU).InventProfileType)
        {
            purchTable_RU.InventProfileId_RU = '';
            this.packPurchTable_RU(purchTable_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    public void setInventSiteId(InventSiteId _inventSiteId)
    {
        this.InventSiteId = _inventSiteId;
        this.modifiedInventSiteFromParent();
        this.setAddressFromInventSiteId(_inventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the list code based on the location of the payer and vendor.
    /// </summary>
    void setListCode()
    {
        this.ListCode = EUSalesList::resolveListCode(this.vendTable_OrderAccount().postalAddress().CountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets delivery address information and related information.
    /// </summary>
    /// <param name="_locationRecId">
    ///    The record ID of the logistics location.
    /// </param>
    /// <param name="_source">
    ///    The record that has an associated address.
    /// </param>
    /// <remarks>
    ///    If <c>_source</c> parameter is not specified, the address related information will be set based on the logistics location.
    /// </remarks>
    public void  setLocation(LogisticsLocationRecId  _locationRecId, Common _source = null)
    {
        LogisticsLocation location = LogisticsLocation::find(_locationRecId);

        this.DeliveryPostalAddress  = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);

        if (_source)
        {
            LogisticsLocationSelectForm_PurchTable::construct(this).copyAddressToCaller(_source,
                this.DeliveryPostalAddress);
        }
        else
        {
            LogisticsLocationSelectForm_PurchTable::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(),
                this.DeliveryPostalAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the price disc change policy.
    /// </summary>
    /// <param name="_policySource">
    /// A <c>PriceDiscSystemSource</c> enumeration value that indicates the source of the policy.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field.
    /// </param>
    void setPriceDiscChangePolicy(PriceDiscSystemSource _policySource, RefFieldId _fieldId = 0)
    {
        if (!this.isInterCompanyOrder())
        {
            this.PriceDiscResultFields::createPriceDiscChangePolicy(ModuleSalesPurch::Purch, _policySource, _fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicyMultiLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceDiscChangePolicy</c> method with fixed price discount change parameters for
    /// the multiline discount fields.
    /// </summary>
    public void setPriceDiscChangePolicyMultiLine()
    {
        this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(PurchTable, MultiLineDisc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup _taxGroup)
    {
        PurchTableType purchTableType;

        purchTableType = this.type();
        purchTableType.setTaxGroup(_taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupChangeManagmentFieldsForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets change management specific fields depending on the vendor or company settings.
    /// </summary>
    /// <param name="_vendTable">
    /// The <c>VendTable</c> record.
    /// </param>
    public void setupChangeManagmentFieldsForVendor(VendTable _vendTable)
    {
        if (_vendTable.canAutoCreatePurchOrder())
        {
            this.ChangeRequestRequired = NoYes::No;
            this.DocumentState         = VersioningDocumentState::Approved;
        }
        else
        {
            this.ChangeRequestRequired = NoYes::Yes;
            this.DocumentState         = VersioningDocumentState::Draft;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAddressFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether address fields should be skipped.
    /// </summary>
    /// <returns>
    /// true if address field should be skipped; otherwise, false.
    /// </returns>
    boolean skipAddressFields()
    {
        return ((this.InterCompanyCompanyId && this.InterCompanyOriginalSalesId && this.InterCompanyDirectDelivery)
              || this.isDropShipment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates purchase order workflow.
    /// </summary>
    /// <param name="_workflowTemplateName">
    /// The AOT name of the workflow template the purchase order will be submittet to.
    /// </param>
    /// <param name="_workflowComment">
    /// The reason for submitting.
    /// </param>
    /// <param name="_activatingFromWeb">
    /// A Boolean value that indicates whether the workflow framework if the submission is coming from the
    /// enterprise portal.
    /// </param>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>ActivateWorkflowTemplate</c> method
    /// on the <c>Workflow</c> class that has information about the purchase order record.
    /// </remarks>
    public void  submitToWorkflow(WorkflowTypeName	     _workflowTemplateName,
                                  WorkflowComment       _workflowComment,
                                  boolean               _activatingFromWeb = false)
    {
        ttsbegin;

        Workflow::activateFromWorkflowType(_workflowTemplateName,
                                               this.RecId,
                                               _workflowComment,
                                               _activatingFromWeb,
                                               curUserId());

        VersioningPurchaseOrder::newPurchaseOrder(this).submitChangeRequest();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    TaxModuleType taxModuleType()
    {
        return TaxModuleType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to display the route code tied to a purchase order.
    /// </summary>
    /// <returns>
    /// The route code tied to a purchase order.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display TMSRouteCode tmsDisplayRoute()
    {
        PurchLine                   purchLine;
        TMSRouteSegmentLoadLine     segmentLine;
        TMSRouteCode                ret;
        int                         counter = 0;

        while select RouteCode from segmentLine
            group by RouteCode
            join InventTransId, PurchId from purchLine
                where purchLine.InventTransId   == segmentLine.InventTransId &&
                      purchLine.PurchId         == this.PurchId
        {
            ret = segmentLine.RouteCode;
            ++counter;

            if (counter > 1)
            {
                break;
            }
        }

        switch (counter)
        {
            case 0:
                ret = "";
                break;
            case 1:
                break;
            default:
                ret = "@SYS78137";
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWeightAndVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total weight and volume aggregated over all purchase order lines.
    /// </summary>
    /// <returns>
    /// Container with two elements: total wieght and total volume.
    /// </returns>
    public container totalWeightAndVolume()
    {
        Volume      totalVolume;
        Weight      totalWeight;
        PurchLine   purchLine;

        while select ItemId, QtyOrdered from purchLine
            where purchLine.PurchId == this.PurchId
        {
            totalWeight += purchLine.tmsWeight();
            totalVolume += purchLine.tmsVolume();
        }

        return [totalWeight, totalVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers invoice account related information based on vendor data.
    /// </summary>
    public void transferInvoiceAccount()
    {
        if (PurchParameters::find().PromptTransfer)
        {
            if (!FormDataUtil::isFormDataSource(this)
                || !PurchParameters::find().PromptTransfer
                || Box::yesNo("@SYS19435" + '\n\n' + this.InvoiceAccount, DialogButton::Yes) == DialogButton::Yes)
            {
                this.initInvoiceAccount();
            }
        }
        else
        {
            this.initInvoiceAccount();
        }

        if (this.transferTaxDefaultsFromInvoiceAcc())
        {
            this.initTaxDefaultsFromInvoiceAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferOrderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers order account related information based on vendor data.
    /// </summary>
    public void transferOrderAccount()
    {
        boolean initFromVendTable = true;

        if (this.OrderAccount)
        {
            if (FormDataUtil::isFormDataSource(this)
                && PurchParameters::find().PromptTransfer
                && Box::yesNo("@SYS22099"+'\n\n'+this.vendTable_OrderAccount().name(), DialogButton::Yes) != DialogButton::Yes)
            {
                initFromVendTable = false;
            }

            if (PurchTable::hasExensionTableEnabled())
            {
                this.SysExtensionSerializerMap::packAll();
            }

            this.transferOrderAccount_server(initFromVendTable);

            if (PurchTable::hasExensionTableEnabled())
            {
                this.SysExtensionSerializerMap::unpackAll();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferOrderAccount_server</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes order account related information based on vendor data.
    /// </summary>
    /// <param name="_initFromVendTable">
    /// true if the purchase order should be initialized based on vendor data; false if only mandatory order fields should be set.
    /// </param>
    public void transferOrderAccount_server(boolean _initFromVendTable)
    {
        if (_initFromVendTable)
        {
            this.initFromVendTable();

            if (this.OrderAccount != this.InvoiceAccount)
            {
                this.transferInvoiceAccount();
            }
        }
        else
        {
            this.initFromVendTableMandatoryFields();
            if (!this.RecId || !this.isDropShipment())
            {
                this.setDefaultDeliveryAddress();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToOneTimeVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related one time vendor entity based on the purchase order.
    /// </summary>
    void transferToOneTimeVendor()
    {
        VendorEntity        vendorEntity;
        if (this.OneTimeVendor)
        {
            ttsbegin;
            vendorEntity = DirParty::constructFromCommon(this.vendTable_OrderAccount(),
                                                         DateTimeUtil::getSystemDateTime(),
                                                         DirPartyType::None,
                                                         true,
                                                         false);
            vendorEntity.initFromPurchTable(this);
            vendorEntity.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    PurchTableType type()
    {
        return PurchTableType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkAgreement</Name>
				<Source><![CDATA[
    private void unlinkAgreement(boolean _unlinkLines      = false,
                                        boolean _recalculatePrice = false
                                        ,boolean _doUpdatePurchTable = true
                                        ,boolean _doUpdatePurchLine  = true
                                        )
    {
        AgreementReleaseHeaderMatch agreementReleaseHeaderMatch;
        PurchLine                   purchLine;
        boolean                     restorePriceDiscChagnePolicy = true;
        // <GEERU>
        PurchTable_RU               purchTable_RU;
        #ISOCountryRegionCodes
        // </GEERU>

        if (this.MatchingAgreement)
        {
            ttsbegin;

            if (_unlinkLines)
            {
                while select forupdate purchLine
                        where purchLine.PurchId == this.PurchId
                {
                    if (purchLine.MatchingAgreementLine)
                    {
                        if (_recalculatePrice)
                        {
                            PurchLine::modifyPurchQty(purchLine,purchLine.inventDim());
                            restorePriceDiscChagnePolicy = false;
                        }
                        if (restorePriceDiscChagnePolicy)
                        {
                            // Set Price Discount Change Policy originated by PriceDiscSystemSource::Agreement
                            purchLine.setPriceDiscChangePolicy(PriceDiscSystemSource::Agreement);
                        }

                        purchLine.unLinkAgreementLine(
                                                      _doUpdatePurchLine
                                                      );
                    }
                }
            }

            delete_from agreementReleaseHeaderMatch
            where agreementReleaseHeaderMatch.PurchTablePurchId     == this.PurchId
               && agreementReleaseHeaderMatch.ReferenceRelationType == tableNum(PurchTable)
               && agreementReleaseHeaderMatch.PurchTableDataAreaId  == this.DataAreaId;

            this.MatchingAgreement = 0;

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                purchTable_RU = this.purchTable_RU();
                purchTable_RU.AgreementHeaderExt_RU = 0;
                this.packPurchTable_RU(purchTable_RU);

                this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
            }
            // </GEERU>

            if (_doUpdatePurchTable)
            {
                this.doUpdate();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkAgreementPrompt</Name>
				<Source><![CDATA[
    public boolean unlinkAgreementPrompt(
                                         boolean _doUpdatePurchTable = true
                                         )
    {
        Dialog       dialog;
        DialogField  dialogField;
        boolean      linesExist;

        if (this.MatchingAgreement)
        {
            linesExist = PurchLine::exist(this.PurchId);
            dialog = new Dialog();
            dialog.addText("@SYS306906");
            if (linesExist)
            {
                dialogField = dialog.addField(extendedTypeStr(NoYesId), "@SYS23228", "@SYS305716");
                dialogField.value(NoYes::Yes);
            }
            if (!dialog.run())
            {
                return false;
            }

            if (linesExist)
            {
                this.unlinkAgreement(linesExist, dialogField.value()
                                     , _doUpdatePurchTable
                                     );
            }
            else
            {
                this.unlinkAgreement(linesExist, false
                                     , _doUpdatePurchTable
                                     );
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchTable</c> record.
    /// </summary>
    /// <param name = "_lineDistributionUpdateNeeded">
    /// Boolean determining if line distributions need to be updated; defaults to false; optional
    /// </param>
    public void update(boolean _updateDistributions = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        PurchTable purchTableOrig = this.extensionOrig();

        this.type().updating();

        PurchTotalsSummaryController purchTotalsSummaryController;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            purchTotalsSummaryController = PurchTotalsSummaryController::construct(this.PurchId);
            purchTotalsSummaryController.checkFields(this);
        }

        PurchTableType purchTableType = this.type();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setInventProfileId_RU();
        }

        if (purchTableOrig.DlvMode != this.DlvMode)
        {
            purchTableType.tmsModifiedDlvMode(false);
        }

        // In special situations we need to by-pass versioning change on the purchase order and allow an update without updating document state
        if (this.SkipVersioning
            || this.CovStatus == 2)   // Cash flow is updating its status. Suppress the call to adjust the document state.
        {
            // Don't invoke versioning change
        }
        else
        {
            VersioningPurchaseOrder::newPurchaseOrder(this, true).change(this, purchTableOrig);
        }

        this.checkCurrencyCode();

        this.CovStatus = (this.CovStatus == 2) ? 1 : 0;

        if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
        &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
        {
            purchTableType.interCompanySyncEngine().synchronize();
        }

        if (this.InterCompanyOriginalSalesId
        &&  this.InterCompanyOriginalSalesId != purchTableOrig.InterCompanyOriginalSalesId)
        {
            this.interCompanyPurchSalesReferenceCreate();
        }

        if (this.SkipUpdate != InterCompanySkipUpdate::Internal
        &&  this.SkipUpdate != InterCompanySkipUpdate::Both)
        {
            purchTableType.syncSalesTableSave(this);
        }

        this.SkipUpdate = InterCompanySkipUpdate::No;
        this.IsModified = NoYes::Yes;
        this.updateEchangeRateDate(purchTableOrig);

        this.checkInvoiceConstraints(purchTableOrig);

        super();

        this.SysExtensionSerializerMap::postUpdate();

        if (this.OneTimeVendor)
        {
            VendorEntity vendor = DirParty::constructFromCommon(this.vendTable_OrderAccount(),
                                                                DateTimeUtil::getSystemDateTime(),
                                                                DirPartyType::None,
                                                                true,
                                                                false);
            vendor.initFromPurchTable(this);
            vendor.update();
        }

        if (this.InterCompanySalesId && !purchTableOrig.InterCompanySalesId)
        {
            purchTableType.forceIntercompanyLineSynchronization();
        }

        boolean isUpdateRequiredIndia  =
            TaxParameters::checkTaxParameters_IN() &&
            (purchTableOrig.LineDisc       != this.LineDisc      ||
             purchTableOrig.MultiLineDisc  != this.MultiLineDisc ||
             purchTableOrig.EndDisc        != this.EndDisc);

        boolean isUpdateRequired =
            purchTableOrig.OrderAccount         != this.OrderAccount    ||
            purchTableOrig.VendGroup            != this.VendGroup       ||
            purchTableOrig.PurchaseType         != this.PurchaseType    ||
            purchTableOrig.VendorRef            != this.VendorRef       ||
            purchTableOrig.PurchOrderFormNum    != this.PurchOrderFormNum;

        if (isUpdateRequired || isUpdateRequiredIndia)
        {
            VendTable vendTable = this.vendTable_OrderAccount();
            PurchLine                purchLine;
        
            while select forupdate purchLine
                where purchLine.PurchId == this.PurchId
                    && !purchLine.IsDeleted
            {
                if (isUpdateRequired)
                {
                    purchLine.VendAccount               = this.OrderAccount;
                    purchLine.PurchaseType              = this.PurchaseType;
                    purchLine.VendGroup                 = this.VendGroup;
                    purchLine.CustomerRef               = this.VendorRef;
                    purchLine.CustPurchaseOrderFormNum  = this.PurchOrderFormNum;
                    if (purchLine.isCategoryBased())
                    {
                        purchLine.MatchingPolicy = PurchMatchingPolicyManager::findMatchingPolicy(null, vendTable, purchLine.ProcurementCategory);
                    }
                    else
                    {
                        purchLine.MatchingPolicy = PurchMatchingPolicyManager::findMatchingPolicy(
                                                    purchLine.inventTable(),
                                                    vendTable);
                    }
                }

                if (isUpdateRequiredIndia)
                {
                    purchLine.purchLine_IN().assessableValue();
                }

                purchLine.update();
            }
        }

        if (BrazilParameters::isEnabled() && purchTableOrig.OrderAccount != this.OrderAccount)
        {
            this.purchTable_BR().updatePurchLines();
        }

        if (purchTableOrig.AccountingDate != this.AccountingDate)
        {
            this.updateDistributionAccountingDate(purchTableOrig);
        }

        if (purchTableOrig.PaymentSched &&
            purchTableOrig.PaymentSched != this.PaymentSched)
        {
            VendPaymSched::deleteVendPaymSched(this.TableId, this.RecId);
        }

        if (this.OrderAccount != purchTableOrig.OrderAccount ||
            this.MarkupGroup  != purchTableOrig.MarkupGroup)
        {
            this.createMarkupTrans(true);
        }

        SourceDocumentHeader purchTableSourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        if (purchTableSourceDocumentHeader && purchTableSourceDocumentHeader.SourceRelationType)
        {
            if ((this.distributionUpdateNeeded(purchTableOrig) || _updateDistributions))
            {
                // either something changed on the header or on a line to force an update for the total discount distribution if present.
                purchTableType.updateDistribution();
                purchTableType.deleteTaxUncommitted();

                // <GIN>
                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    purchTableType.deleteTaxWithholdUncommitted_IN();
                }
                // </GIN>
            }

            if (this.updatedLineDistributionNeeded(purchTableOrig) || _updateDistributions)
            {
                if (this.maintainTaxUncommitted())
                {
                    PurchTotals::newPurchTable(PurchTable::findRecId(this.RecId)).calc(false, false, true);
                }

                SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(this, SourceDocumentLineAccountingStatus::FullyDistributed);
            }
        }

        if (purchTotalsSummaryController)
        {
            purchTotalsSummaryController.onUpdate(this);
        }
        this.type().updated(purchTableOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBackStatus</Name>
				<Source><![CDATA[
    void  updateBackStatus()
    {
        PurchTableType purchTableType;

        purchTableType = this.type();
        purchTableType.updateBackStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentStatus</Name>
				<Source><![CDATA[
    void  updateDocumentStatus(DocumentStatus  documentStatus)
    {
        PurchTableType purchTableType;

        purchTableType = this.type();
        purchTableType.updateDocumentStatus(documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the exchange rate date.
    /// </summary>
    /// <param name = "_purchTableOrig">
    /// The original purchase order which is updated.
    /// </param>
    /// <remarks>
    /// The exchange rate data is updated to the accounting date if the purchase order isn't journalized
    /// </remarks>
    protected void updateEchangeRateDate(PurchTable _purchTableOrig)
    {
        if (this.AccountingDate != _purchTableOrig.AccountingDate)
        {
            if (!SourceDocumentHeaderProvider::isJournalized(this.SourceDocumentHeader))
            {
                this.ExchangeRateDate = this.AccountingDate;
                SourceDocumentHeaderProvider::updateExchangeRateDate(this.SourceDocumentHeader, this.ExchangeRateDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinalDisc</Name>
				<Source><![CDATA[
    void  updateFinalDisc()
    {
        PurchLine purchLine;

        // In case the document state differs from confirmed: Final discount should be updated to get the totals right.
        // In case the document state is confirmed: Final discount is already updated and shouldn't be called again, as it'll reset the document state.
        if (this.DocumentState != VersioningDocumentState::Confirmed
            && !this.isInvoiceMatched()
            && this.icCheckUpdateHeaderDiscounts())
        {
            this.PriceDiscHeading::updateFinalDiscount(purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromPurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets values on the purchase order that are depending on purchase order line values.
    /// </summary>
    /// <param name="_updateDistributions">
    /// A Boolean value that specifies whether the <c>AccountingDistribution</c> table record that is
    /// associated with the <c>PurchTable</c> should be updated.
    /// </param>
    public void updateFromPurchLines(boolean _updateDistributions = false)
    {
        PurchTableType purchTableType;

        purchTableType = this.type();
        purchTableType.updateFromPurchLines(_updateDistributions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromPurchReqLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update <c>PurchTable</c> from <c>PurchLine</c> or <c>PurchReqLine</c>.
    /// </summary>
    /// <param name="_listEnumerator">
    /// A list enumerator contains records from <c>PurchLine</c> or <c>PurchReqLine</c>.
    /// </param>
    public void updateFromPurchReqLineMap(ListEnumerator _listEnumerator)
    {
        PurchTableUpdateFromPurchReqLineMap purchTableUpdateFromPurchReqLineMap = PurchTableUpdateFromPurchReqLineMap::construct();
        purchTableUpdateFromPurchReqLineMap.initialize(this, _listEnumerator);
        purchTableUpdateFromPurchReqLineMap.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIsEncumbranceRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the <c>IsEncumbranceProcessEnabled</c> field on the current <c>PurchTable</c>
    /// record to a value that matches the <c>IsEncumbranceProcessEnabled</c> parameter in the
    /// <c>LedgerParameters</c> table.
    /// </summary>
    public void updateIsEncumbranceRequired()
    {
        LedgerParameters    ledgerParameters = LedgerParameters::find();

        if (this.IsEncumbranceRequired == UnknownNoYes::Unknown)
        {
            if (ledgerParameters.IsEncumbranceProcessEnabled == NoYes::Yes)
            {
                this.IsEncumbranceRequired = UnknownNoYes::Yes;
            }
            else
            {
                this.IsEncumbranceRequired = UnknownNoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts for the <c>PurchTable</c> record.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    public void updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        PurchTableType purchTableType;

        if (!this.isFinalized())
        {
            // Exclude finalized purchase orders from the cash flow process.
            purchTableType = this.type();
            purchTableType.updateLedgerCov(_ledgerCoverage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the accounting date on the accounting distributions.
    /// </summary>
    /// <param name = "_purchTableOrig">
    /// The original purchase order which is updated.
    /// </param>
    protected void updateDistributionAccountingDate(PurchTable _purchTableOrig)
    {
        PurchLine           purchLine;
        SourceDocumentLine  sourceDocumentLine;

        // Ship this update - all distributions will be updated
        if (this.updatedLineDistributionNeeded(_purchTableOrig))
        {
            return;
        }

        while select purchLine
        where purchLine.PurchId == this.PurchId
              && !purchLine.IsDeleted
        join AccountingStatus from sourceDocumentLine
        where sourceDocumentLine.RecId == purchLine.SourceDocumentLine
        {
            if (sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Completed)
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(purchLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedLineDistributionNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchTable</c> table should update the record in the
    /// <c>AccountingDistribution</c> table that is associated with <c>PurchLine</c> records.
    /// </summary>
    /// <param name = "_purchTableOrig">
    /// The original purchase order which is updated.
    /// </param>
    /// <returns>
    /// true if the <c>AccountingDistribution</c> table that is associated to <c>PurchLine</c> has to be
    /// updated; otherwise, false.
    /// </returns>
    protected boolean updatedLineDistributionNeeded(PurchTable _purchTableOrig)
    {
        return ((_purchTableOrig.OrderAccount   != this.OrderAccount)   ||
                (_purchTableOrig.CurrencyCode   != this.CurrencyCode)   ||
                (_purchTableOrig.InclTax        != this.InclTax)        ||
                (_purchTableOrig.DiscPercent    != this.DiscPercent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineFieldsBasedOnHeaderChanges_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for updating the PurchLine when fiscal information
    /// on header is changed
    /// </summary>
    public void updateLineFieldsBasedOnHeaderChanges_BR()
    {
        PurchLine           purchLine;
        CFOPValidation_BR   cfopValidation;

        ttsbegin;

        while select forupdate purchLine
                where purchLine.PurchId == this.PurchId
        {
            cfopValidation       = CFOPValidation_BR::construct(this);
            purchLine.cfopTable_BR    = cfopValidation.getDefaultCFOP();

            if (purchLine.cfopTable_BR != purchLine.orig().cfopTable_BR)
            {
                purchLine.setTaxGroupAndTaxItemGroupFields_BR();
                purchLine.update();
                purchLine.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultiLineDisc</Name>
				<Source><![CDATA[
    boolean  updateMultiLineDisc()
    {
        PurchLine purchLine;
        boolean   ret;

        if (!this.isInvoiceMatched())
        {
            ret = this.PriceDiscHeading::updateMultiLineDiscount(purchLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchaseType</Name>
				<Source><![CDATA[
    void  updatePurchaseType()
    {
        PurchTableType purchTableType;

        purchTableType = this.type();
        purchTableType.updatePurchaseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchLineDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Makes <c>PurchLine</c> table deletion related updates to <c>PurchTable</c>.
    /// </summary>
    public void updatePurchLineDelete()
    {
        PurchTableType  purchTableType;

        purchTableType = this.type();
        purchTableType.updatePurchLineDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransport</Name>
				<Source><![CDATA[
    private void updateTransport()
    {
        this.Transport = DlvMode::find(this.DlvMode).Transport;

        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if it is allowed to delete the currecnt <c>PurchTable</c> record
    /// </summary>
    /// <param name = "_intercompanyForce">Determines if check for derived intercompany purchase order should be skipped; optional</param>
    /// <returns>true if deletion is allowed; otherwise, false</returns>
    public boolean validateDelete(boolean _intercompanyForce = false)
    {
        boolean         ok = true;
        PurchTableType  purchTableType;

        ok = super();

        if (ok)
        {
            purchTableType = this.type();
            ok = purchTableType.validateDelete(_intercompanyForce);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean  validateField(FieldId  _fieldId)
    {
        boolean         ok = true;

        ok = super(_fieldId);

        ok = ok && this.validateFieldServer(_fieldId);

        if (ok)
        {
            switch (_fieldId)
            {
                case fieldNum(PurchTable, PurchaseType) :
                case fieldNum(PurchTable, OrderAccount) :
                    if (#PdsApprovedVendorListEnabled)
                    {
                        ok = this.type().pdsApprovedVendorListCheck().validateCheck();
                    }
                    break;

                case fieldNum(PurchTable, AccountingDate) :
                    ok = PurchTable::validateBudgetReservation_PSN(this);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservation_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations on the <c>BudgetReservationLine_PSN</c> field of each <c>PurchLine</c> line record associated
    /// with the specified <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record associated with the <c>PurchLine</c> records to be validated.
    /// </param>
    /// <returns>
    /// true if all validations pass or the budget reservation feature is disabled; otherwise, false.
    /// </returns>
    // <PubSect>
    private static boolean validateBudgetReservation_PSN(PurchTable _purchTable)
    {
        boolean                   isValid = true;

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            PurchLine                 purchLine;
            BudgetReservationLine_PSN budgetReservationLine;

            while select BudgetReservationHeader_PSN from budgetReservationLine
                exists join purchLine
                    group by budgetReservationLine.BudgetReservationHeader_PSN
                where purchLine.PurchId == _purchTable.PurchId
                    && purchLine.BudgetReservationLine_PSN == budgetReservationLine.RecId
                    && purchLine.BudgetReservationLine_PSN != 0
            {
                isValid = isValid && BudgetReservation_PSN::validateBudgetReservationToBeRelieved(
                    _purchTable.AccountingDate,
                    budgetReservationLine.BudgetReservationHeader_PSN,
                    BudgetReservationRelievingDocument_PSN::PurchaseOrder,
                    "@Budgeting_BudgetReservationPS:POAccountingDateNotInFiscalYearError",
                    "@Budgeting_BudgetReservationPS:POAccountingDateNotWithinGBRDatesError");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetReservationBalance_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any of the purchase order lines of the specified purchase order exceed
    /// their referenced budget reservation line's remaining balance.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> of the specified <c>PurchTable</c> record.
    /// </param>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The <c>SourceDocumentHeaderRecId</c> of the specified <c>PurchTable</c> record.
    /// </param>
    // <PubSect>
    public static void checkBudgetReservationBalance_PSN(
        PurchId                     _purchId,
        SourceDocumentHeaderRecId   _sourceDocumentHeaderRecId)
    {
        PurchLine localPurchLine;

        while select BudgetReservationLine_PSN from localPurchLine
            group by BudgetReservationLine_PSN
            where localPurchLine.PurchId == _purchId
                && localPurchLine.BudgetReservationLine_PSN != 0
        {
            // Checks the purchase order line balance against the referenced budget reservation line.
            BudgetReservation_PSN::checkBudgetReservationBalance(localPurchLine.BudgetReservationLine_PSN, _sourceDocumentHeaderRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a changed field on the server side.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that was changed.
    /// </param>
    /// <returns>
    /// true if the validation did not fail; otherwise, false.
    /// </returns>
    boolean validateFieldServer(FieldId  _fieldId)
    {
        boolean         ok;
        PurchTableType  purchTableType;

        purchTableType = this.type();
        ok = purchTableType.validateField(_fieldId);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean  validateWrite()
    {
        boolean         ok = true;

        ok = super();

        if (ok)
        {
            setPrefix(strFmt("@SYS25974", this.PurchId));

            ok = this.validateWriteServer();
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteServer</Name>
				<Source><![CDATA[
    public boolean  validateWriteServer()
    {
        boolean         ok;
        PurchTableType  purchTableType;
        #ISOCountryRegionCodes

        purchTableType = this.type();
        ok = purchTableType.validateWrite();

        if (ok && this.InclTax && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU]))
        {
            ok = this.salesPurchTableInterface().validateExcludeTaxFromInvoice();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorAddress</Name>
				<Source><![CDATA[
    display Addressing vendorAddress()
    {
        return this.vendTable_OrderAccount().postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorEmail</Name>
				<Source><![CDATA[
    display Email vendorEmail()
    {
        return this.vendTable_OrderAccount().email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorName</Name>
				<Source><![CDATA[
    display VendName vendorName()
    {
        return this.vendTable_OrderAccount().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorPhone</Name>
				<Source><![CDATA[
    display VendPhone vendorPhone()
    {
        return this.vendTable_OrderAccount().phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_InvoiceAccount</Name>
				<Source><![CDATA[
    VendTable vendTable_InvoiceAccount(boolean update = false)
    {
        return VendTable::find(this.InvoiceAccount, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_OrderAccount</Name>
				<Source><![CDATA[
    VendTable vendTable_OrderAccount(boolean update = false)
    {
        return VendTable::find(this.OrderAccount, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowInstructions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lates workflow step instructions for this record.
    /// </summary>
    /// <returns>
    /// Returns the instructions for the lates work item for this record.
    /// </returns>

    display public WorkflowStepInstruction  workflowInstructions()
    {
        List                        workItemList;
        ListEnumerator              enumerator;

        WorkflowWorkItemInstanceId  workItemInstanceId;

        WorkflowWorkItemTable       workflowWorkItemTable;
        WorkflowDueDateTime         dueDateTime;
        WorkflowStepInstruction     stepInstruction;

        void getRecord()
        {
            workItemInstanceId = enumerator.current();
            select firstonly DueDateTime, Description from workflowWorkItemTable
                where workflowWorkItemTable.Id == workItemInstanceId;
        }

        workItemList = Workflow::findWorkItemsForCurrentUser(this);

        if (workItemList)
        {
            enumerator   = workItemList.getEnumerator();

            switch (workItemList.elements())
            {
                case    0 : stepInstruction = '';
                    break;

                case    1 : enumerator.moveNext();

                    getRecord();
                    stepInstruction = workflowWorkItemTable.Description;

                    break;

                default   : dueDateTime = DateTimeUtil::minValue();

                            while (enumerator.moveNext())
                    {
                        getRecord();

                        if (workflowWorkItemTable.DueDateTime > dueDateTime)
                        {
                            dueDateTime = workflowWorkItemTable.DueDateTime;
                            stepInstruction = workflowWorkItemTable.Description;
                        }
                    }
            }
        }

        return stepInstruction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowLastComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last workflow comment for this record.
    /// </summary>
    /// <returns>
    /// The last comment entered by any user for this record.
    /// </returns>

    display public server  WorkflowComment  workflowLastComment()
    {
        WorkflowTrackingTable           workflowTrackingTable;
        WorkflowTrackingStatusTable     workflowTrackingStatusTable;
        WorkflowTrackingCommentTable    workflowTrackingCommentTable;

        select firstonly ContextCompanyId, ContextTableId, ContextRecId from workflowTrackingStatusTable
            where workflowTrackingStatusTable.ContextCompanyId    == curext()
               && workflowTrackingStatusTable.ContextTableId      == this.TableId
               && workflowTrackingStatusTable.ContextRecId        == this.RecId
            join firstonly TrackingId, CreatedDateTime from workflowTrackingTable order by CreatedDateTime desc
                where workflowTrackingTable.WorkflowTrackingStatusTable == workflowTrackingStatusTable.RecId
            join Comment from workflowTrackingCommentTable
                where workflowTrackingCommentTable.WorkflowTrackingTable == workflowTrackingTable.RecId;

        return workflowTrackingCommentTable.Comment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowWorkItemDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lates workflow due date for this record.
    /// </summary>
    /// <returns>
    /// The due date for lates work item for this record.
    /// </returns>

    display public WorkflowDueDateTime  workflowWorkItemDueDate()
    {
        List                        workItemList;
        ListEnumerator              enumerator;

        WorkflowWorkItemInstanceId  workItemInstanceId;

        WorkflowWorkItemTable       workflowWorkItemTable;
        WorkflowDueDateTime         dueDateTime;

        void getRecord()
        {
            workItemInstanceId = enumerator.current();
            select firstonly DueDateTime from workflowWorkItemTable
                where workflowWorkItemTable.Id == workItemInstanceId;
        }

        workItemList = Workflow::findWorkItemsForCurrentUser(this);

        if (workItemList)
        {
            enumerator   = workItemList.getEnumerator();

            switch (workItemList.elements())
            {
                case    0 : dueDateTime = DateTimeUtil::minValue();
                    break;

                case    1 : enumerator.moveNext();

                    getRecord();
                    dueDateTime = workflowWorkItemTable.DueDateTime;

                    break;

                default   : dueDateTime = DateTimeUtil::minValue();

                            while (enumerator.moveNext())
                    {
                        getRecord();

                        if (workflowWorkItemTable.DueDateTime > dueDateTime)
                                    dueDateTime = workflowWorkItemTable.DueDateTime;
                    }
            }
        }

        return dueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceAmountDelivered</Name>
				<Source><![CDATA[
    static AmountMST  balanceAmountDelivered(VendAccount _invoiceAccount,
                                                    PurchId          _excludePurchId     = '',
                                                    boolean          _checkAgreementLimit = false,
                                                    AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = 0)
    {
        PurchTable     purchTable;
        PurchTotals    purchTotals;
        AmountMST      amountMST;

        while select purchTable
                where purchTable.InvoiceAccount == _invoiceAccount              &&
                      (purchTable.PurchStatus    == PurchStatus::None       ||
                       purchTable.PurchStatus    == PurchStatus::Backorder  ||
                       purchTable.PurchStatus    == PurchStatus::Received)      &&
                      purchTable.PurchaseType   != PurchaseType::Journal        &&
                      purchTable.PurchId        != _excludePurchId
        {
            // <GEERU>
            if (_checkAgreementLimit
                && purchTable.purchTable_RU().AgreementHeaderExt_RU != _agreementHeaderExtRecId)
            {
                continue;
            }
            // </GEERU>

            purchTotals = PurchTotals::newPurchTable(purchTable, PurchUpdate::PackingSlip);
            purchTotals.calc();
            amountMST += CurrencyExchangeHelper::mstAmount(purchTotals.purchTotalAmount(), purchTable.CurrencyCode);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceAmountNotInvoiced</Name>
				<Source><![CDATA[
    static AmountMST  balanceAmountNotInvoiced(VendAccount _invoiceAccount,
                                                      PurchId          _excludePurchId     = '',
                                                      boolean          _checkAgreementLimit = false,
                                                      AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = 0)
    {
        PurchTable     purchTable;
        PurchTotals    purchTotals;
        AmountMST      amountMST;

        while select purchTable
                where purchTable.InvoiceAccount == _invoiceAccount              &&
                      (purchTable.PurchStatus    == PurchStatus::None       ||
                       purchTable.PurchStatus    == PurchStatus::Backorder  ||
                       purchTable.PurchStatus    == PurchStatus::Received)      &&
                      purchTable.PurchaseType   != PurchaseType::Journal        &&
                      purchTable.PurchId        != _excludePurchId
        {
            // <GEERU>
            if (_checkAgreementLimit
                && purchTable.purchTable_RU().AgreementHeaderExt_RU != _agreementHeaderExtRecId)
            {
                continue;
            }
            // </GEERU>

            purchTotals = PurchTotals::newPurchTable(purchTable, PurchUpdate::All);
            purchTotals.calc();
            amountMST += CurrencyExchangeHelper::mstAmount(purchTotals.purchTotalAmount(), purchTable.CurrencyCode);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomsPurchaseOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks customs purchase order.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase id.
    /// </param>
    /// <returns>
    /// Returns true if the check is succeed.
    /// </returns>
    public static boolean checkCustomsPurchaseOrder_IN(PurchIdBase  _purchId)
    {
        PurchTable      purchTable;
        PurchTable_W    purchTable_W;
        boolean         ret = false;

        if (_purchId)
        {
            select firstonly RecId from purchTable
                where purchTable.PurchId == _purchId
                exists join purchTable_W
                    where purchTable_W.PurchTable                   == purchTable.RecId
                        && purchTable_W.CustomsInvoiceRegistered_IN == NoYes::Yes;

            ret = (purchTable.RecId != 0);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(PurchId purchId)
    {
        if (purchId && !PurchTable::exist(purchId))
            return checkFailed(strFmt(PurchTable::txtNotExist(),purchId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether posting in the ledger period is allowed.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase order number.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to check.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// A check on <c>PurchTable</c> level is unnecessary; If the transaction date for posting is invalid then ledger will either
    /// handle it (e.g. apply a valid date) or throw an error.
    /// </remarks>
    public static boolean checkLedgerPeriod(PurchId _purchId, TransDate _transDate)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeRetailCaseCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the RetailCaseCount for all lines for the specified <c>PurchId</c>
    /// </summary>
    /// <param name="purchId">
    /// A <c>PurchId</c>
    /// </param>
    /// <returns>
    /// The total for all line quantities for the PO (regadless of line item type)
    /// </returns>
    static RetailCaseCount computeRetailCaseCount(PurchId          purchId)
    {
        PurchLine           tPurchLine;

        select sum(PurchQty) from tPurchLine where tPurchLine.PurchId == purchId;

        return tPurchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(PurchId  purchId)
    {
        return (select firstonly RecId from purchTable
                    index hint PurchIdx
                    where purchTable.PurchId    == purchId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVendOpenOrder</Name>
				<Source><![CDATA[
    static boolean existVendOpenOrder(VendAccount vendAccount)
    {
        PurchTable purchTable;

        return (select firstonly RecId from purchTable
                    index hint VendIdx
                    where purchTable.OrderAccount == vendAccount                &&
                          (purchTable.PurchStatus == PurchStatus::None      ||
                           purchTable.PurchStatus == PurchStatus::Backorder ||
                           purchTable.PurchStatus == PurchStatus::Received)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdToInternalFieldId_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a normal field ID to an internal field ID.
    /// </summary>
    /// <param name="_fieldId">
    /// Normal field ID.
    /// </param>
    /// <param name="_tableId">
    /// Table ID of the talbe for the specified field ID. Optional.
    /// </param>
    /// <returns>
    /// Internal field ID.
    /// </returns>
    public static FieldId fieldIdToInternalFieldId_W(FieldId _fieldId, TableId _tableId = tableNum(PurchTable))
    {
        TableId internalTableId = PurchTable::tableIdToInternalTableId_W(_tableId);

        return ((internalTableId << 24) | _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static PurchTable find(PurchId          purchId,
                           boolean          _forUpdate = false,
                           ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchTable purchTable;

        if (purchId)
        {
            if (_forUpdate)
            {
                purchTable.selectForUpdate  (_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                    purchTable.concurrencyModel(_concurrencyModel);
            }
            purchTable.selectLocked     (_forUpdate);

            select firstonly purchTable
                index hint PurchIdx
                where purchTable.PurchId == purchId;
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record that link to a specified <c>BankLGGuarantee</c> record.
    /// </summary>
    /// <param name="_bankLGRefRecId">
    ///     The rec Id of the related <c>BankLGGuarantee</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     If found, returns the record in the <c>PurchTable</c> table; otherwise, returns an empty record.
    /// </returns>
    public static PurchTable findByBankLG(
        BankLGRefRecId   _bankLGRefRecId,
        boolean          _forUpdate = false)
    {
        PurchTable                      purchTable;
        BankLGGuaranteePurchaseOrder    bankLGGuaranteePurchaseOrder;

        purchTable.selectForUpdate(_forUpdate);

        if (_bankLGRefRecId)
        {
            select firstonly purchTable
                exists join bankLGGuaranteePurchaseOrder
                where bankLGGuaranteePurchaseOrder.Guarantee        == _bankLGRefRecId
                    && bankLGGuaranteePurchaseOrder.PurchaseOrder   == purchTable.PurchId;
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchIdLocationPurchType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find Purchaes ID Location Purchase Type
    /// </summary>
    /// <param name="purchId">
    /// Purchase ID
    /// </param>
    /// <param name="location">
    /// Retail Location
    /// </param>
    /// <param name="purchType">
    /// Purchase Type
    /// </param>
    /// <param name="_forUpdate">
    /// for update?
    /// </param>
    /// <returns>
    /// The Purchase Table
    /// </returns>
    static PurchTable findPurchIdLocationPurchType(PurchId  purchId,RetailLocationEx2 location,PurchaseType   purchType,
                           boolean     _forUpdate = false)
    {
        PurchTable  purchTable;

        if (purchId)
        {
            purchTable.selectForUpdate  (_forUpdate);
            purchTable.selectLocked     (_forUpdate);

            select firstonly purchTable
                index hint PurchIdx
                where purchTable.PurchId == purchId
                    && purchTable.PurchaseType == purchType
                    && purchTable.InventLocationId == location;
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchIdPurchaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find purchase ID purchase type
    /// </summary>
    /// <param name="purchId">
    /// Purchase ID
    /// </param>
    /// <param name="purchaseType">
    /// Purchase Type
    /// </param>
    /// <param name="_forUpdate">
    /// for update?
    /// </param>
    /// <returns>
    /// The Purchase Table
    /// </returns>
    static PurchTable findPurchIdPurchaseType(PurchId      purchId,
                                              PurchaseType purchaseType,
                                              boolean     _forUpdate = false)
    {
        PurchTable  purchTable;

        if (purchId)
        {
            purchTable.selectForUpdate  (_forUpdate);
            purchTable.selectLocked     (_forUpdate);

            select firstonly purchTable
                index hint PurchIdx
                where purchTable.PurchId        == purchId  &&
                      purchTable.PurchaseType   == purchaseType;
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static PurchTable findRecId(RecId       _recId,
                                boolean     _forUpdate = false)
    {
        PurchTable purchTable;

        purchTable.selectForUpdate(_forUpdate);

        select purchTable
            where purchTable.RecId == _recId;

        // Due to cache, the non-persistent field PackedExtensions may not have a empty value.
        // This may cause update conflict issue for extension table record. Clear the cached value
        // for this field to make sure it will pack the latest version of extension table record.
        purchTable.PackedExtensions = conNull();

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>PurchTable</c> record by the <c>SourceDocument</c>.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// A <c>SourceDocumentHeader</c> record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>PurchTable</c> record.
    /// </returns>
    public static PurchTable findSourceDocumentHeader(RefRecId    _sourceDocumentHeader,boolean _forUpdate = false)
    {
        PurchTable    purchTable;

        purchTable.selectForUpdate(_forUpdate);

        if (_sourceDocumentHeader)
        {
            select firstonly purchTable
                where purchTable.SourceDocumentHeader == _sourceDocumentHeader;
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>PurchTable</c> record by <c>SourceDocumentLine</c>.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A <c>SourceDocumentLine</c> record id.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update;optional.
    /// </param>
    /// <returns>
    /// A <c>PurchTable</c> record.
    /// </returns>
    public static PurchTable findSourceDocumentLine(RefRecId _sourceDocumentLine,boolean _forUpdate = false)
    {
        PurchTable    purchTable;

        purchTable.selectForUpdate(_forUpdate);

        if (_sourceDocumentLine)
        {
            select firstonly purchTable
            where purchTable.SourceDocumentLine == _sourceDocumentLine;
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasExensionTableEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is there any extension table of table <C>PurchTable</C> is enabled.
    /// </summary>
    /// <returns>
    /// true if there is one or more extension tables are enabled. Otherwise, return false.
    /// </returns>
    public static boolean hasExensionTableEnabled()
    {
        return SysExtensionSerializerMap::hasExensionTableEnabled(tableNum(PurchTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNameUsingVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets purchase order description based on the region id and the tax exempt number requirement.
    /// </summary>
    /// <param name="_vatNum">
    /// Tax exempt number.
    /// </param>
    /// <param name="_countryRegionId">
    /// Country/region.
    /// </param>
    /// <param name="_name">
    /// Vendor name.
    /// </param>
    /// <param name="_vendParameters">
    /// Initialized <c>VendParameters</c> record.
    /// </param>
    private void setNameUsingVATNum(VATNum                              _vatNum,
                                    LogisticsAddressCountryRegionId     _countryRegionId,
                                    Name                                _name,
                                    VendParameters                      _vendParameters = VendParameters::find())
    {
        TaxVATNumTable taxVATNumTable = TaxVATNumTable::find(_vatNum, _countryRegionId);

        CountryRegionType countryRegionType;
        if (taxVATNumTable.Name)
        {
            this.PurchName = taxVATNumTable.Name;
        }
        else
        {
            switch (_vendParameters.MandatoryInvoiceVATNum)
            {
                case TaxVATNumCountryRegionType::None:
                    this.PurchName = _name;
                    break;
                case TaxVATNumCountryRegionType::DomesticEU:
                    countryRegionType = IntrastatCountryRegionParameters::type(_countryRegionId);
                    switch (countryRegionType)
                    {
                        case CountryRegionType::Domestic:
                        case CountryRegionType::EU:
                            this.PurchName = '';
                            break;
                        default:
                            this.PurchName = _name;
                            break;
                    }
                    break;
                case TaxVATNumCountryRegionType::EU:
                    countryRegionType = IntrastatCountryRegionParameters::type(_countryRegionId);
                    switch (countryRegionType)
                    {
                        case CountryRegionType::EU:
                            this.PurchName = '';
                            break;
                        default:
                            this.PurchName = _name;
                            break;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxDefaultsFromInvoiceAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the fiscal data should come to the purchase order from the invoice account rather than from the order account.
    /// </summary>
    /// <returns>
    /// true if the fiscal data should come to the purchase order from the invoice account; otherwise, false.
    /// </returns>
    private boolean transferTaxDefaultsFromInvoiceAcc()
    {
        #ISOCountryRegionCodes
        boolean includeTaxDefaults;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            switch (VendParameters::find().UseFiscalInvoiceAccount)
            {
                case UseFiscalInvoiceAccount::Always:
                    includeTaxDefaults = true;
                    break;
                case UseFiscalInvoiceAccount::Ask:
                    if (Box::yesNo("@SYS112098"+'\n\n'+ this.InvoiceAccount+'\n\n'+ VendTable::promptAddress(this.InvoiceAccount),DialogButton::Yes)==DialogButton::Yes)
                    {
                        includeTaxDefaults = true;
                    }
                    break;
                case UseFiscalInvoiceAccount::Never:
                    break;
            }
        }
        return includeTaxDefaults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTableIL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PurchTable</c> record from a <c>VendTable</c> record.
    /// </summary>
    /// <param name="_inputContract">
    ///    A container with the <c>PurchTable</c> record to initialize and <c>VendTable</c> record from which to initialize.
    /// </param>
    /// <returns>
    ///    Returns a container with the <c>PurchTable</c> record
    /// </returns>
    private static container initFromVendTableIL(container _inputContract)
    {
        PurchTable              purchTable = con2Buf(conPeek(_inputContract, 1));
        VendTable               vendTable = con2Buf(conPeek(_inputContract, 2));

        // <GIN>
        TaxWithholdParameters_IN    taxWithholdParameters;
        TaxInformationVendTable_IN  taxInformationVendTableLoc;
        PurchTable_W                purchTable_W;
        // </GIN>
        RetailServiceCategory       tServiceCategory;
        // <GEERU>
        PurchTable_RU               purchTable_RU;
        // </GEERU>

        #ISOCountryRegionCodes

        purchTable.OrderAccount               = vendTable.AccountNum;

        purchTable.InvoiceAccount             = vendTable.InvoiceAccount  ? vendTable.InvoiceAccount
                                                                    : vendTable.AccountNum;

        VendTable invoiceVendTable            = purchTable.vendTable_InvoiceAccount();
        purchTable.vatNum                     = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID);
        purchTable.EnterpriseNumber           = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
        purchTable.NumberSequenceGroup        = invoiceVendTable.NumberSequenceGroup;

        purchTable.CurrencyCode               = vendTable.Currency;
        if (VendParameters::find().VendNameFromVATNum)
        {
            TaxVATNumTable taxVATNumTable = TaxVATNumTable::find(purchTable.vatNum, vendTable.postalAddress().CountryRegionId);

            if (taxVATNumTable.Name)
            {
                purchTable.PurchName      = taxVATNumTable.Name;
            }
            else
            {
                purchTable.PurchName      = vendTable.name();
            }
        }
        else
        {
            purchTable.PurchName                  = vendTable.name();
        }

        purchTable.ItemBuyerGroupId           = vendTable.ItemBuyerGroupId;
        purchTable.VendGroup                  = vendTable.VendGroup;
        purchTable.PriceGroupId               = vendTable.PriceGroup;
        purchTable.TaxGroup                   = vendTable.TaxGroup;
        purchTable.InclTax                    = vendTable.InclTax;
        purchTable.LineDisc                   = vendTable.LineDisc;
        purchTable.MultiLineDisc              = vendTable.MultiLineDisc;
        purchTable.EndDisc                    = vendTable.EndDisc;

        purchTable.ContactPersonId            = vendTable.ContactPersonId;
 
        if (vendTable.ContactPersonId)
        {
            purchTable.initFromContactInfo();
        }
 
        purchTable.Email                      = purchTable.Email ? purchTable.Email : vendTable.email();
        purchTable.url                        = purchTable.url ? purchTable.url : vendTable.url();

        purchTable.LanguageId                 = DirPartyTable::findRec(vendTable.Party).LanguageId;

        purchTable.DefaultDimension           = purchTable.copyDimension(vendTable.DefaultDimension);
        purchTable.DlvTerm                    = vendTable.DlvTerm;
        purchTable.DlvMode                    = vendTable.DlvMode;

        IntrastatTransport transport          = DlvMode::find(vendTable.DlvMode).Transport;
        if (transport)
        {
            purchTable.Transport              = transport;
        }
        purchTable.MarkupGroup                = vendTable.MarkupGroup;
        purchTable.FreightZone                = vendTable.FreightZone;

        purchTable.Payment                    = vendTable.PaymTermId;
        purchTable.initFromPayment();
        if (vendTable.PaymSched)
        {
            purchTable.PaymentSched           = vendTable.PaymSched;
        }
        purchTable.PaymMode                   = vendTable.PaymMode;
        purchTable.PaymSpec                   = vendTable.PaymSpec;

        purchTable.PostingProfile             = VendParameters::find().PostingProfile;

        purchTable.setInventSiteId(vendTable.InventSiteId);
        purchTable.InventLocationId = vendTable.InventLocation;

        if (!purchTable.RecId || !purchTable.isDropShipment())
        {
            boolean addressSet = purchTable.setAddressFromInventLocationId(purchTable.InventLocationId);

            if (!addressSet)
            {
                purchTable.setDefaultDeliveryAddress();
            }
        }

        purchTable.CashDisc                   = vendTable.CashDisc;

        if (vendTable.CashDisc)
            purchTable.CashDiscPercent        = CashDisc::find(vendTable.CashDisc).Percent;

        purchTable.PurchPoolId                = PurchParameters::find().PurchPoolId;
        if (vendTable.PurchPoolId)
            purchTable.PurchPoolId            = vendTable.PurchPoolId;

        purchTable.InterCompanyOrder          = vendTable.interCompanyTradingRelationActive();
        purchTable.InterCompanyCompanyId      = vendTable.interCompanyTradingPartnerCompanyID();

        //<GEEPL>
        purchTable.TaxPeriodPaymentCode_PL          = vendTable.TaxPeriodPaymentCode_PL;
        //</GEEPL>

        purchTable.tamVendRebateGroupId     = vendTable.tamRebateGroupID;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            purchTable.ServiceCategory            = RetailVendTable::find(vendTable.AccountNum).ServiceCategory;

            if (purchTable.ServiceCategory)
            {
                tServiceCategory                  = RetailServiceCategory::find(purchTable.ServiceCategory);
                purchTable.AvailSalesDate         = tServiceCategory.calcSalesdate(purchTable.DeliveryDate);
                purchTable.LocalDeliveryDate      = tServiceCategory.calcLVMdate(purchTable.DeliveryDate);
                if (tServiceCategory.CrossDockingWarehouse)
                {
                    purchTable.InventLocationId      = tServiceCategory.CrossDockingWarehouse;
                    purchTable.ReplenishmentLocation = tServiceCategory.ReplenishmentLocation;
                }
            }
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            purchTable.BankCentralBankPurposeCode = vendTable.BankCentralBankPurposeCode;
            purchTable.BankCentralBankPurposeText = vendTable.BankCentralBankPurposeText;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIS]))
        {
            purchTable.VendInvoiceDeclaration_IS = vendTable.VendInvoiceDeclaration_IS;
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = purchTable.purchTable_RU();

            purchTable_RU.vatOperationCode_RU = vendTable.vatOperationCode_RU;
            if (vendTable.InventProfileType_RU || vendTable.InventProfileId_RU)
            {
                purchTable_RU.InventProfileType_RU = vendTable.InventProfileType_RU;
                purchTable_RU.InventProfileId_RU   = vendTable.InventProfileId_RU;
            }

            purchTable.packPurchTable_RU(purchTable_RU);
        }
        // </GEERU>
        purchTable.ChangeRequestRequired = vendTable.isChangeManagementEnabled();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            purchTable_W = purchTable.purchTable_W();

            taxWithholdParameters           = TaxWithholdParameters_IN::find();
            taxInformationVendTableLoc      = vendTable.getTaxInformationVendTable_IN();
            if (taxWithholdParameters.tcsInvoice)
            {
                purchTable_W.NatureOfAssessee_IN    = taxInformationVendTableLoc.NatureOfAssessee;
            }
            if (taxWithholdParameters.tdsInvoice)
            {
                purchTable_W.tdsGroup_IN            = taxInformationVendTableLoc.tdsGroup;
                purchTable_W.NatureOfAssessee_IN    = taxInformationVendTableLoc.NatureOfAssessee;
            }

            purchTable_W.CustomsImportOrder_IN = vendTable.isForeign();
            purchTable.packPurchTable_W(purchTable_W);
        }
        // </GIN>

        // <GJP>
        if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            purchTable.ConsTarget_JP = vendTable.ConsDay_JP != 0;
        }
        // </GJP>

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            purchTable.UnitedVATInvoice_LT = vendTable.UnitedVATInvoice_LT;
        }
        // </GEELT>

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV, #isoLT]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00005, funcName());

            purchTable.InvoiceAutoNumbering_LT         = LtInvoiceAutoNumberingGroups::autoNumberingForPurchInvoice(purchTable.OrderAccount);
            purchTable.PackingSlipAutoNumbering_LT     = LtInvoiceAutoNumberingGroups::autoNumberingForPurchPackingSlip(purchTable.OrderAccount);
        }
        // </GEEU>

        purchTable.setListCode();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            PurchTable_BR purchTable_BR = purchTable.purchTable_BR();
            purchTable_BR.VendFinalUser_BR              = vendTable.VendConsumption_BR;
            purchTable_BR.ServiceCodeOnDlvAddress_BR    = vendTable.ServiceCodeOnDlvAddress_BR;
            purchTable_BR.VendFineSetup_BR              = vendTable.FineCode_BR;
            purchTable_BR.VendInterestSetup_BR          = vendTable.InterestCode_BR;
            purchTable_BR.PresenceType                  = vendTable.PresenceType_BR;
            purchTable.packPurchTable_BR(purchTable_BR);
        }
        // </GBR>

        return buf2Con(purchTable, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalFieldIdToFieldId_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an internal field ID to normal field ID.
    /// </summary>
    /// <param name="_internalFieldId">
    /// Internal field ID.
    /// </param>
    /// <returns>
    /// Normal field ID.
    /// </returns>
    /// <remarks>
    /// Internal field ID saves the normal field ID information in the lower 24 bits,
    /// and save the internal table ID information in the upper 8 bits.
    /// Note: internal table ID is a code defined ID, not the normal table ID.
    /// </remarks>
    public static FieldId internalFieldIdToFieldId_W(FieldId _internalFieldId)
    {
        return (_internalFieldId & 0xffffff);
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalFieldIdToTableId_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an internal field ID to normal table ID.
    /// </summary>
    /// <param name="_internalFieldId">
    /// Internal field ID.
    /// </param>
    /// <returns>
    /// Normal table ID.
    /// </returns>
    /// <remarks>
    /// Internal field ID saves the normal field ID information in the lower 24 bits,
    /// and save the internal table ID information in the upper 8 bits.
    /// Note: internal table ID is a code defined ID, not the normal table ID.
    /// </remarks>
    public static TableId internalFieldIdToTableId_W(FieldId _internalFieldId)
    {
        return PurchTable::internalTableIdToTableId_W((_internalFieldId >> 24));
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalTableIdToTableId_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the internal table ID to a normal table ID.
    /// </summary>
    /// <param name="_internalTableId">
    /// The internal table ID.
    /// </param>
    /// <returns>
    /// The normal table ID.
    /// </returns>
    protected static TableId internalTableIdToTableId_W(TableId _internalTableId)
    {
        #define.InternalTableId_PurchTable_BR(1)
        #define.InternalTableId_PurchTable_RU(2)
        #define.InternalTableId_PurchTable_W(3)

        switch (_internalTableId)
        {
            case #InternalTableId_PurchTable_BR:
                return tableNum(PurchTable_BR);

            case #InternalTableId_PurchTable_RU:
                return tableNum(PurchTable_RU);

            case #InternalTableId_PurchTable_W:
                return tableNum(PurchTable_W);
        }

        return tableNum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomsImportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookups customs import order.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    public static void lookupCustomsImportOrder_IN(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(PurchTable), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tableNum(PurchTable));
        queryBuildDataSource    = queryBuildDataSource.addDataSource(tableNum(PurchTable_W));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(PurchTable_W, CustomsImportOrder_IN));
        queryBuildRange.value(queryValue(NoYes::Yes));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(PurchTable_W, CustomsInvoiceRegistered_IN));
        queryBuildRange.value(queryValue(NoYes::No));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchId));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchName));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchStatus));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, OrderAccount));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomsPurchOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays all Purchase Orders where Importe Order is marked.[ Displays all Import Orders]
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    public static void lookupCustomsPurchOrder_IN(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(PurchTable), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tableNum(PurchTable));
        queryBuildDataSource    = queryBuildDataSource.addDataSource(tableNum(PurchTable_W));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(PurchTable_W, CustomsImportOrder_IN));
        queryBuildRange.value(queryValue(NoYes::Yes));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchId));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchName));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchStatus));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, OrderAccount));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOrdersForConfirmationRequestOrConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries for orders that are relevant for requesting confirmation or for confirmation
    /// </summary>
    /// <param name="_formControl">
    /// The control where the lookup was invoked
    /// </param>
    /// <remarks>
    /// Used in the order lookup while processing confirmation request or regular confirmation
    /// </remarks>
    public static void lookupOrdersForConfirmationRequestOrConfirmation(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(PurchTable), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tableNum(PurchTable));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(PurchTable, DocumentState));
        queryBuildRange.value(enum2Value(VersioningDocumentState::Approved));

        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchId));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchName));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, DocumentState));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchStatus));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, OrderAccount));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWMSReception</Name>
				<Source><![CDATA[
    static void lookupWMSReception(FormStringControl ctrl, VendAccount vendAccount)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(PurchTable), ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    dsPurchTable;
        QueryBuildDataSource    dsPurchLine;
        QueryBuildDataSource    dsPurchTableVersion;
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchId));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchName));
        sysTableLookup.addLookupfield(fieldNum(PurchTable, OrderAccount));

        dsPurchTable = query.addDataSource(tableNum(PurchTable));

        if (PurchParameters::find().ChangeRequestEnabled)
        {
            dsPurchTableVersion = dsPurchTable.addDataSource(tableNum(PurchTableVersion));
            dsPurchTableVersion.relations(true);
            dsPurchTableVersion.joinMode(JoinMode::ExistsJoin);
        }

        dsPurchLine = dsPurchTable.addDataSource(tableNum(PurchLine));
        dsPurchLine.relations(true);
        dsPurchLine.joinMode(JoinMode::ExistsJoin);

        if (vendAccount)
        {
            queryBuildRange = dsPurchTable.addRange(fieldNum(PurchTable, OrderAccount));
            queryBuildRange.value(queryValue(vendAccount));
        }

        queryBuildRange = dsPurchTable.addRange(fieldNum(PurchTable, PurchStatus));
        queryBuildRange.value(enum2Value(PurchStatus::Backorder));

        // Direct deliveries are excluded since they can not be received at out warehouse
        queryBuildRange = dsPurchLine.addRange(fieldNum(PurchLine, DeliveryType));
        queryBuildRange.value(SysQuery::valueNot(TradeLineDlvType::DropShip));

        // Exclude purchase orders of type Journal
        queryBuildRange = dsPurchTable.addRange(fieldNum(PurchTable, PurchaseType));
        queryBuildRange.value(SysQuery::valueNot(PurchaseType::Journal));

        dsPurchTable.addSortField(fieldNum(PurchTable, PurchId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateAllAccountsFullyQualified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to validate if all accounts are fully qualified.
    /// </summary>
    /// <returns>
    /// true when validation of if all accounts are fully qualified; otherwise, false.
    /// </returns>
    public static boolean mustValidateAllAccountsFullyQualified()
    {
        return Ledger::isLedgerBudgetControlEnabled()
            || LedgerParameters::find().IsEncumbranceProcessEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWItemLine</Name>
				<Source><![CDATA[
    public static boolean pdsCWItemLine(PurchId _purchId)
    {
        PurchLine           purchLine;
        PdsCatchWeightItem  catchWeightItem;
        boolean             ret = false;

        if (#PdsCatchWeightEnabled)
        {
            select firstonly RecId
                from purchLine
                where purchLine.PurchId         == _purchId
                exists join catchWeightItem
                where catchWeightItem.ItemId    == purchLine.ItemId;

            if (purchLine.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    static container promptConvertCurrencyCode(PurchTable _purchTable = null)
    {
        DialogButton            dialogButton;

        if (!isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            dialogButton = Box::okCancel("@SYS127859", DialogButton::Ok);
            if (dialogButton == DialogButton::Ok)
                return [NoYes::Yes, TradeCurencyConversion::ExchRate];

            return [NoYes::No, TradeCurencyConversion::ExchRate];
        }
        return TradeCurrencyConversionPrompt::newFromParm(_purchTable,
                                                          _purchTable.PurchId,
                                                          _purchTable.priceDiscChangePolicyExistOnLine()
                                                          ).promptConvertCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyDeliveryAddress</Name>
				<Source><![CDATA[
    static DialogButton  promptCopyDeliveryAddress()
    {
        return Box::yesYesAllNoCancel("@SYS89799", DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableIdToInternalTableId_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts normal table ID to internal table ID.
    /// </summary>
    /// <param name="_narmalTableId">
    /// Normal table ID.
    /// </param>
    /// <returns>
    /// Internal table ID.
    /// </returns>
    /// <remarks>
    /// Internal table ID is defined separately for each set of
    /// base table and its extension tables. And the internal table
    /// ID for base table should always be 0.
    /// </remarks>
    public static TableId tableIdToInternalTableId_W(TableId _narmalTableId)
    {
        #define.InternalTableId_PurchTable_BR(1)
        #define.InternalTableId_PurchTable_RU(2)
        #define.InternalTableId_PurchTable_W(3)

        switch (_narmalTableId)
        {
            case tableNum(PurchTable_BR):
                return #InternalTableId_PurchTable_BR;

            case tableNum(PurchTable_RU):
                return #InternalTableId_PurchTable_RU;

            case tableNum(PurchTable_W):
                return #InternalTableId_PurchTable_W;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist  txtNotExist()
    {
        return "@SYS15741";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDlvModeFromCarrierService</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates delivery mode on purchase order.
    /// </summary>
    /// <param name="_purchId">
    ///   The purch order ID.
    /// </param>
    /// <param name="_carrierCode">
    ///   The carrier code.
    /// </param>
    /// <param name="_carrierServiceCode">
    ///   The carrier service code.
    /// </param>
    /// <remarks>
    ///   The delivery mode is assigned based on carrier code and carrier service.
    /// </remarks>
    public static void updateDlvModeFromCarrierService(
        PurchId                 _purchId,
        TMSCarrierCode          _carrierCode,
        TMSCarrierServiceCode   _carrierServiceCode)
    {
        DlvModeId dlvModeId = TMSCarrierService::findDlvModeId(_carrierCode, _carrierServiceCode);

        if (dlvModeId)
        {
            ttsbegin;
            
            PurchTable purchTable = PurchTable::find(_purchId, true);
            purchTable.DlvMode = dlvModeId;
            purchTable.SkipVersioning = NoYes::Yes; // Override versioning; This update on PurchTable should not update its document state
            purchTable.update();     
            
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendOpenOrders</Name>
				<Source><![CDATA[
    static PurchTable vendOpenOrders(VendAccount vendAccount, boolean update = false)
    {
        PurchTable purchTable;

        purchTable.selectForUpdate (update);

        select purchTable
               index hint VendIdx
               where purchTable.OrderAccount == vendAccount                &&
                     (purchTable.PurchStatus == PurchStatus::None      ||
                      purchTable.PurchStatus == PurchStatus::Backorder ||
                      purchTable.PurchStatus == PurchStatus::Received);

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SalesPurchModifiedTableExtension::newNonRecursive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRateDateForCurrencyChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date that should be used for exchange rate calculation when currency changes.
    /// </summary>
    /// <returns></returns>
    public Date exchangeRateDateForCurrencyChange()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(LedgerAdv2BudgetCtrl)) ?
                    this.AccountingDate :
                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>extensionOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchTable</c> record based on the original purchase order record including extension table records.
    /// </summary>
    /// <returns>The original purchase order record including extension table records.</returns>
    [Hookable(false)]
    public PurchTable extensionOrig()
    {
        PurchTable purchTableOrig = this.orig();
        if (PurchTable::hasExensionTableEnabled())
        {
            purchTableOrig.SysExtensionSerializerMap::copyExtensionTableData(this, true);
        }

        return purchTableOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responseHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the purchase order response header for the currrent purchase order.
    /// </summary>
    /// <param name = "_forUpdate">Determines if the record should be selected for update.</param>
    /// <returns><c>PurchaseOrderResponseHeader</c> record for the current purchase order.</returns>
    public PurchaseOrderResponseHeader responseHeader(boolean _forUpdate = false)
    {
        PurchaseOrderResponseHeader responseHeader;

        responseHeader.selectForUpdate(_forUpdate);

        select firstonly responseHeader
            where responseHeader.PurchId == this.PurchId;

        return responseHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback method on tax engine tax document display
    /// </summary>
    /// <returns>The tax document display string.</returns>
    public TaxDocumentDisplayString getTaxDocumentRowDisplayString()
    {
        return strFmt("@ApplicationSuiteTaxEngineIntegration:PurchTableTaxDocumentRowDisplayFormat", this.PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPrePaymentVendorInvoiceCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that all purchase order lines are related to the same project.
    /// </summary>
    /// <returns>
    /// true if all purchase order lines belong to the same project; otherwise, false.
    /// </returns>
    public boolean checkIfPrePaymentVendorInvoiceCreate()
    {
        boolean isProjectVendorPrepaymentCreated = true;
        if (this.ProjId)
        {
            PurchLine	purchLine;
            select firstonly RecId from purchLine
                where purchLine.PurchId == this.PurchId &&
                purchLine.ProjId != this.ProjId;

            if (purchLine.RecId)
            {
                isProjectVendorPrepaymentCreated = checkFailed(strFmt("@Proj:ValidateProjectRecord", this.ProjId));
            }
        }
        return isProjectVendorPrepaymentCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymSchedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the total of the <c>VendPaymSched</c> against the total of
    /// <c>PurchTable</c> document
    /// </summary>
    /// <param name="_vendPaymSched">
    /// <c>VendPaymSched</c> to check against, if null retreives the <c>VendPaymSched</c>
    /// related to this <c>PurchTable</c> record
    /// </param>
    /// <returns>
    /// true if the totals match or if no <c>VendPaymSched</c> is found; otherwise false
    /// </returns>
    public boolean validatePaymSchedTotals(VendPaymSched _vendPaymSched = null)
    {
         AmountCur totalAmount;
         VendPaymSched vendPaymSched = (_vendPaymSched ? _vendPaymSched : VendPaymSched::find(this.TableId, this.RecId));
         boolean valid = true;

        if (vendPaymSched)
        {
            PurchTotals purchTotals = PurchTotals::newPurchTable(this);
            purchTotals.calc();

            //<GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                totalAmount = purchTotals.purchTotalAmount() + purchTotals.parmTaxWithholdAmount_IN();
            }
            //</GIN>
            //<GBR>
            else if (BrazilParameters::isEnabled())
            {
                totalAmount = purchTotals.purchTotalAmount() - purchTotals.totalTaxAmountRetained_BR();
            }
            //<GBR>
            else
            {
                totalAmount = purchTotals.purchTotalAmount();
            }

            if (!totalAmount)
            {
                valid = true;
            }
            else
            {
                valid = (vendPaymSched.paymScheduleAmount() == totalAmount);
            }
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocumentBeenThroughYearEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current document has been processed by the year end process.
    /// </summary>
    /// <returns>
    /// true if the document has been through the year end process at least once; otherwise, false.
    /// </returns>
    public boolean hasDocumentBeenThroughYearEnd()
    {
        AccountingEvent accountingEventYearEndOpen = AccountingEvent::findByAccountingEventType(
            this.SourceDocumentHeader,
            AccountingEventType::PeriodOpen);

        boolean hasYearEndOpeningAccountingEvent = accountingEventYearEndOpen.RecId != 0;

        return hasYearEndOpeningAccountingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase order is confirmed.
    /// </summary>
    /// <returns>
    /// true if the purchase order is confirmed; otherwise, false.
    /// </returns>
    // <PubSect>
    public boolean isDocumentConfirmed()
    {
        return this.DocumentState == VersioningDocumentState::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDistributionUpdateNeeded_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if distribution update is needed.
    /// </summary>
    /// <param name = "_purchTableOrig">
    /// The original purchase order which is updated.
    /// </param>
    /// <param name="_returnValue">
    /// A Boolean value retrieved by the original method.
    /// </param>
    /// <returns>
    /// true if purchase order is for consumption; otherwise, false.
    /// </returns>
    public boolean postDistributionUpdateNeeded_BR(PurchTable _purchTableOrig, boolean _returnValue)
    {
        return _returnValue && this.purchTable_BR().VendFinalUser_BR != _purchTableOrig.purchTable_BR().VendFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDistributionUpdateNeededHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(PurchTable), tableMethodStr(PurchTable, distributionUpdateNeeded))]
    /// <summary>
    /// Determines if distribution update is needed.
    /// </summary>
    /// <param name="_args">The arguments from the original method.</param>
    public static void postDistributionUpdateNeededHandler_BR(XppPrePostArgs _args)
    {
        PurchTable purchTable       = _args.getThis();
        PurchTable purchTableOrig   = _args.getArgNum(1) as PurchTable;
        anytype returnValue;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        returnValue = purchTable.postDistributionUpdateNeeded_BR(purchTableOrig, _args.getReturnValue());

        _args.setReturnValue(returnValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTableInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchTableInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchTableInterface</c> object.
    /// </returns>
    public SalesPurchTableInterface salesPurchTableInterface()
    {
        return this.salesPurchTable::salesPurchTableInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTableVersioning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchTableVersioning</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>PurchTableVersioning</c> object.
    /// </returns>
    public PurchTableVersioning purchTableVersioning()
    {
        return this.PurchTableMap::purchTableVersioning();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124480</DeveloperDocumentation>
	<FormRef>PurchTable</FormRef>
	<Label>@SYS25204</Label>
	<ListPageRef>PurchTable</ListPageRef>
	<PreviewPartRef>PurchTableEnhancedPreview</PreviewPartRef>
	<SingularLabel>@SYS15812</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>PurchId</TitleField1>
	<TitleField2>PurchName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PurchIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<PrimaryIndex>PurchIdx</PrimaryIndex>
	<ReplacementKey>PurchIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailBuyersPushTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailBuyersPushTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InterCompanyPurchSalesReference</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InterCompanyPurchSalesReference</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerCov</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerCov</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PrintMgmtDocInstance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PrintMgmtDocInstance</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchPrepayTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchPrepayTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWorkRegulation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWorkRegulation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>PurchTable</Relation>
			<Table>AgreementReleaseHeaderMatch</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerPurchPlacer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requester</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangeRequestRequired</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement</Name>
			<Label>@SYS87179</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MatchingAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailRetailStatusType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailDriverDetails</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Attention</Name>
			<Label>@SYS1593</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqAttention</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementIsLinked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConfirmingPO</Name>
			<Label>@SPS591</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmingPO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsTarget_JP</Name>
			<Label>@SYS106495</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsTarget_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contract_SA</Name>
			<Label>@SYS73302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractNum_SA</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Crossdocking</Name>
			<Label>@RET806</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplenishmentLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CrossdockingDates</Name>
			<Label>@RET998</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CrossDockingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocalDeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailSalesDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlvEarliest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliverySummary</Name>
			<Label>@SYS22058</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiscountMiscCharges</Name>
			<Label>@SYS22031</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TAMVendRebateGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentPreview</Name>
			<Label>@SYS117648</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>workflowInstructions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>vendorName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>amountOrderedNotInvoicedMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>workflowLastComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>workflowWorkItemDueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPDelivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalReference</Name>
			<Label>@SYS21697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseOrderHeaderCreationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchOrderFormNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HeaderToLineUpdate</Name>
			<Label>@SYS62436</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseOrderHeaderCreationMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intercompany</Name>
			<Label>@SYS93837</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanySalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>interCompanyOriginDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyOriginal</Name>
			<Label>@SYS93838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyOriginalSalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyOriginalCustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCustPurchOrderFormNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyDirectDelivery</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyReturn</Name>
			<Label>@SYS120343</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnReasonCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnReplacementCreated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemOrderCreation</Name>
			<Label>@RET876</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FSHAutoCreated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseOrderHeaderCreationMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ListCode</Name>
			<Label>@SYS89034</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ListCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NotificationToTheCentralBank</Name>
			<Label>@SYS67156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAutoNumbering_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingSlipAutoNumbering_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAGroup</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeSupplier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseTable</Name>
			<Label>@SYS1653</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reasons</Name>
			<Label>@SYS111245</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonTableRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Requisitioner</Name>
			<Label>@SYS108788</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Requester</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailConcession</Name>
			<Label>@RET742</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentHeader</Name>
			<Label>@SYS314386</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@SYS132694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayDocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SummaryPurchase</Name>
			<Label>@SYS24162</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SummaryUpdate</Name>
			<Label>@SYS57755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyOriginalCustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyDirectDelivery</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SummaryUpdateParameters</Name>
			<Label>@SYS57738</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoSummaryModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transport</Name>
			<Label>@SYS3843</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UnGrouped</Name>
			<Label>@MCR23892</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRDropShipment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendInvoiceDeclaration</Name>
			<Label>@SYS126906</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS9455</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSDiscount</Name>
			<Label>@SYS22031</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSSalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendLineDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoSummaryModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS57738</Label>
			<Visible>No</Visible>
			<EnumType>ModuleVendPurch</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AvailSalesDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSalesDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankDocumentType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDocumentFacilityNature</ExtendedDataType>
			<Label>@SYS313726</Label>
			<EnumType>BankDocumentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChangeRequestRequired</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningChangeRequestRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDlvDate</ExtendedDataType>
			<Label>@SYS4006394</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlvEarliest</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDlvDate</ExtendedDataType>
			<Label>@SYS138390</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConfirmingPO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>ConfirmingPORefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsTarget_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendConsTarget_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractNum_SA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendContractNumZakat_SA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountyOrigDest</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountyOrigDest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CovStatus</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CrossDockingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCrossDockingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchDlvAddrType</ExtendedDataType>
			<EnumType>PurchDlvAddr</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchEndDiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VersioningDocumentState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EmailBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendEndDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExchangeRateDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FinalizeClosingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchFinalizeClosingDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FixedDueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchFixedDueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FixedExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchFixedExchRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightSlipType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendFreightSlipType</ExtendedDataType>
			<EnumType>FreightSlipType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreightZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendFreightZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FSHAutoCreated</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAutoCreatedPurch</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyAllowIndirectCreation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyAllowIndirectCreation</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InterCompanyCompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyCustPurchOrderFormNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyDirectDelivery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyDirectDelivery</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyVendor</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>InterCompanyOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyOriginalCustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyOriginalCustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyOriginalSalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyOriginalSalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanySalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanySalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntrastatAddValue_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvIntrastatAddValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchInventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceAutoNumbering_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtInvoiceAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEncumbranceRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>UnknownNoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsModified</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsModified</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBuyerGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBuyerGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendLanguageId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ListCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LocalDeliveryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLocalDeliveryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ManualEntryChangepolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicyManual</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendMarkupGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MatchingAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementHeaderRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRDropShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRDropShipment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MultiLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendMultiLineDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OneTimeSupplier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OneTimeSupplier</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OneTimeVendor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OneTimeSupplier</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PackingSlipAutoNumbering_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtPackingSlipAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymMode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPriceGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchaseType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchaseType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchName</ExtendedDataType>
			<Label>@SYS129167</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchPoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPoolId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS114840</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateConfirmed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDateConfirmed</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReplenishmentLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Label>@RET827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqAttention</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqAttention</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Requester</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchRequester</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailDriverDetails</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDriverDetails</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailRetailStatusType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailRetailStatusType</ExtendedDataType>
			<EnumType>RetailRetailStatusTypeBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnItemNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReturnItemNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnReasonCodeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnReasonCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnReplacementCreated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnReplacementCreated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Addressing</ExtendedDataType>
			<Label>@SYS88743</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailServiceCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ServiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ServiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VATNum</ExtendedDataType>
			<Label>@SYS110763</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SettleVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchSettlementType</ExtendedDataType>
			<EnumType>SettlementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateConfirmed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateConfirmed</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateRequested</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>InterCompanySkipUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314386</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS319494</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SystemEntryChangePolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicySystem</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemEntrySource</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMVendRebateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitedVATInvoice_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitedVATInvoice_LT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>URL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URLBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceDeclaration_IS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDeclarationId_IS</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerPurchPlacer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPlacer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCreateMarkup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSkipCreateMarkup</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipVersioning</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchSkipVersioning</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchaseOrderHeaderCreationMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchPurchaseOrderCreationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceRegister_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtInvoiceAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PackingSlipRegister_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtPackingSlipAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchOrderFormNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusOrderAccIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DocumentStateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentState</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DocumentStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchaseType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>Project</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MatchingAgreement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderAccCreatedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SDHeaderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ConsTarget_JPIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConsTarget_JP</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DropShipIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRDropShipment</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MCRDeliveryDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>MCRCallCenter</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BankLGDocumentMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BankDocumentType</MapField>
					<MapFieldTo>BankDocumentType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FiscalDocumentTextUpdateTableMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscHeading</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AgreementPartnerCode_RU</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDisc</MapField>
					<MapFieldTo>MultiLineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceGroup</MapField>
					<MapFieldTo>PriceGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscResultFields</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualEntryChangePolicy</MapField>
					<MapFieldTo>ManualEntryChangepolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDiscCode</MapField>
					<MapFieldTo>MultiLineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecieptDeliveryDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntryChangePolicy</MapField>
					<MapFieldTo>SystemEntryChangePolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
					<MapFieldTo>SystemEntrySource</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PurchTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingDate</MapField>
					<MapFieldTo>AccountingDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountingDistributionTemplate</MapField>
					<MapFieldTo>AccountingDistributionTemplate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefRecId</MapField>
					<MapFieldTo>AddressRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefTableId</MapField>
					<MapFieldTo>AddressRefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AutoSummaryModuleType</MapField>
					<MapFieldTo>AutoSummaryModuleType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeCode</MapField>
					<MapFieldTo>BankCentralBankPurposeCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeText</MapField>
					<MapFieldTo>BankCentralBankPurposeText</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankDocumentType</MapField>
					<MapFieldTo>BankDocumentType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
					<MapFieldTo>CashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscPercent</MapField>
					<MapFieldTo>CashDiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlvEarliest</MapField>
					<MapFieldTo>ConfirmedDlvEarliest</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmingPO</MapField>
					<MapFieldTo>ConfirmingPO</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsTarget_JP</MapField>
					<MapFieldTo>ConsTarget_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ContactPersonId</MapField>
					<MapFieldTo>ContactPersonId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CountyOrigDest</MapField>
					<MapFieldTo>CountyOrigDest</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CovStatus</MapField>
					<MapFieldTo>CovStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
					<MapFieldTo>DeliveryType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvTerm</MapField>
					<MapFieldTo>DlvTerm</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentState</MapField>
					<MapFieldTo>DocumentState</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentStatus</MapField>
					<MapFieldTo>DocumentStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Email</MapField>
					<MapFieldTo>Email</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EnterpriseNumber</MapField>
					<MapFieldTo>EnterpriseNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FinalizeClosingDate</MapField>
					<MapFieldTo>FinalizeClosingDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedDueDate</MapField>
					<MapFieldTo>FixedDueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedExchRate</MapField>
					<MapFieldTo>FixedExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FreightSlipType</MapField>
					<MapFieldTo>FreightSlipType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FreightZone</MapField>
					<MapFieldTo>FreightZone</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyAllowIndirectCreation</MapField>
					<MapFieldTo>InterCompanyAllowIndirectCreation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyCompanyId</MapField>
					<MapFieldTo>InterCompanyCompanyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyCustPurchOrderFormNum</MapField>
					<MapFieldTo>InterCompanyCustPurchOrderFormNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyDirectDelivery</MapField>
					<MapFieldTo>InterCompanyDirectDelivery</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOrder</MapField>
					<MapFieldTo>InterCompanyOrder</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOrigin</MapField>
					<MapFieldTo>InterCompanyOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOriginalCustAccount</MapField>
					<MapFieldTo>InterCompanyOriginalCustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOriginalSalesId</MapField>
					<MapFieldTo>InterCompanyOriginalSalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanySalesId</MapField>
					<MapFieldTo>InterCompanySalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatAddValue_LV</MapField>
					<MapFieldTo>IntrastatAddValue_LV</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRegister_LT</MapField>
					<MapFieldTo>InvoiceAutoNumbering_LT</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsEncumbranceRequired</MapField>
					<MapFieldTo>IsEncumbranceRequired</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBuyerGroupId</MapField>
					<MapFieldTo>ItemBuyerGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>ListCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupGroup</MapField>
					<MapFieldTo>MarkupGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MatchingAgreement</MapField>
					<MapFieldTo>MatchingAgreement</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDisc</MapField>
					<MapFieldTo>MultiLineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>NumberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OneTimeVendor</MapField>
					<MapFieldTo>OneTimeVendor</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackingSlipRegister_LT</MapField>
					<MapFieldTo>PackingSlipAutoNumbering_LT</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Port</MapField>
					<MapFieldTo>Port</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceGroupId</MapField>
					<MapFieldTo>PriceGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseOrderHeaderCreationMethod</MapField>
					<MapFieldTo>PurchaseOrderHeaderCreationMethod</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseType</MapField>
					<MapFieldTo>PurchaseType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchName</MapField>
					<MapFieldTo>PurchName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchOrderFormNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPoolId</MapField>
					<MapFieldTo>PurchPoolId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchStatus</MapField>
					<MapFieldTo>PurchStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
					<MapFieldTo>ReceiptDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReqAttention</MapField>
					<MapFieldTo>ReqAttention</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Requester</MapField>
					<MapFieldTo>Requester</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnItemNum</MapField>
					<MapFieldTo>ReturnItemNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnReasonCodeId</MapField>
					<MapFieldTo>ReturnReasonCodeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnReplacementCreated</MapField>
					<MapFieldTo>ReturnReplacementCreated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleVoucher</MapField>
					<MapFieldTo>SettleVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
					<MapFieldTo>ShippingDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
					<MapFieldTo>SkipUpdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatProcId</MapField>
					<MapFieldTo>StatProcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxPeriodPaymentCode_PL</MapField>
					<MapFieldTo>TaxPeriodPaymentCode_PL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCode</MapField>
					<MapFieldTo>TransactionCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Transport</MapField>
					<MapFieldTo>Transport</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransportationDocument</MapField>
					<MapFieldTo>TransportationDocument</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitedVATInvoice_LT</MapField>
					<MapFieldTo>UnitedVATInvoice_LT</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>URL</MapField>
					<MapFieldTo>URL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendGroup</MapField>
					<MapFieldTo>VendGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendInvoiceDeclaration_IS</MapField>
					<MapFieldTo>VendInvoiceDeclaration_IS</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorRef</MapField>
					<MapFieldTo>VendorRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerPurchPlacer</MapField>
					<MapFieldTo>WorkerPurchPlacer</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ReasonCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsTarget_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendGroup_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum_CZ</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchTable_RU</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AgreementHeaderExt_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsignorAccount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceAgreementDate_RU</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PurchaseOrderResponseHeaderMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumptionState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvTerm</MapField>
					<MapFieldTo>DlvTerm</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EarliestDlvDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchStatus</MapField>
					<MapFieldTo>PurchStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ResponseId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorRef</MapField>
					<MapFieldTo>VendorRef</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDistributionTemplate_PurchTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Agreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AgreementHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementHeader_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MatchingAgreement</Name>
					<Field>MatchingAgreement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCentralBankPurpose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCentralBankPurpose_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CashDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CashDisc_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDisc</Name>
					<Field>CashDisc</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>PurchTable</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConfirmingPO</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ConfirmingPO</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConfirmingPO</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ConfirmingPO_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfirmingPO</Name>
					<Field>ConfirmingPO</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ContactPerson_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ContactPerson_1_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CountyOrigDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCounty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCounty_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountyOrigDest</Name>
					<Field>CountyOrigDest</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Currency_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvMode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DlvMode_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DlvTerm_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InterCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InterCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntrastatPort</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntrastatPort_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntrastatStatProc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntrastatStatProc_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntrastatTransactionCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntrastatTransactionCode_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntrastatTransportMode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntrastatTransportMode_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBuyerGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBuyerGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventBuyerGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBuyerGroup_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBuyerGroupId</Name>
					<Field>ItemBuyerGroupId</Field>
					<RelatedField>Group</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBuyerGroupView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBuyerGroupView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventBuyerGroupView</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBuyerGroupView_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBuyerGroupId</Name>
					<Field>ItemBuyerGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventSite</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventSite_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceDeclarationId_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceDeclaration_IS</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeclarationUsedForInvoicing</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchaseOrders</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceDeclaration_IS</Name>
					<Field>VendInvoiceDeclaration_IS</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>VendInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupGroup_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupGroup</Name>
					<Field>MarkupGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>MarkupModuleType::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRHoldCodeTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRHoldCodeTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<Field>PurchId</Field>
					<RelatedField>InventRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>NumberSequenceGroup_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroup</Name>
					<Field>NumberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OrderVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable_1_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PaymSched_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PaymTerm_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SystemEntryChangePolicy</Name>
					<Field>SystemEntryChangePolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_1_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ManualEntryChangepolicy</Name>
					<Field>ManualEntryChangepolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjTable_1_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchPool</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchPool_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchPoolId</Name>
					<Field>PurchPoolId</Field>
					<RelatedField>PurchPoolId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchPoolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReasonTableRef_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReplenishmentLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReplenishmentLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReplenishmentLocation</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>ReplenishmentLocation</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Requester_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Requester</Name>
					<Field>Requester</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailServiceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailServiceCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceCategory</Name>
					<SourceEDT>RetailServiceCategoryId</SourceEDT>
					<Field>ServiceCategory</Field>
					<RelatedField>ServiceCategory</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReturnReasonCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReturnReasonCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReturnReasonCode_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnReasonCodeId</Name>
					<Field>ReturnReasonCodeId</Field>
					<RelatedField>ReasonCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReturnReasonCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTableInterCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTableInterCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTableInterCompany_Order</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InterCompanyOrder</Name>
					<Field>InterCompanyOrder</Field>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanySalesId</Name>
					<Field>InterCompanySalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMVendRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TAMVendRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMVendRebateGroupId</Name>
					<SourceEDT>TAMVendRebateGroupId</SourceEDT>
					<Field>TAMVendRebateGroupId</Field>
					<RelatedField>VendRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxGroupHeading_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendGroup_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendGroup</Name>
					<Field>VendGroup</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendLedger_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendLineDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendLineDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineDisc</Name>
					<SourceEDT>VendLineDiscCode</SourceEDT>
					<Field>LineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>VendLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::LineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendMarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendMarkupGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupGroup</Name>
					<Field>MarkupGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>MarkupModuleType::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendMultiLineDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendMultiLineDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MultiLineDisc</Name>
					<SourceEDT>VendMultiLineDiscCode</SourceEDT>
					<Field>MultiLineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>VendMultiLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::MultiLineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendMultiLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPaymModeSpec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendPaymModeSpec_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymModeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPriceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPriceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceGroupId</Name>
					<SourceEDT>VendPriceGroup</SourceEDT>
					<Field>PriceGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>VendPriceGroup</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendPriceGroup</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTotalDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTotalDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EndDisc</Name>
					<SourceEDT>VendEndDiscCode</SourceEDT>
					<Field>EndDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>VendEndDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::EndDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendEndDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerPurchPlacer_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_PurchTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerPurchPlacer</Name>
					<Field>WorkerPurchPlacer</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>